
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ThoiKhoaBieu.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace PTNK.Entities
{
	///<summary>
	/// An object representation of the 'ThoiKhoaBieu' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class ThoiKhoaBieuBase : EntityBase, PTNK.Entities.IThoiKhoaBieu, IEntityId<ThoiKhoaBieuKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ThoiKhoaBieuEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ThoiKhoaBieuEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ThoiKhoaBieuEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ThoiKhoaBieu> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ThoiKhoaBieuEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ThoiKhoaBieuEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ThoiKhoaBieuBase"/> instance.
		///</summary>
		public ThoiKhoaBieuBase()
		{
			this.entityData = new ThoiKhoaBieuEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ThoiKhoaBieuBase"/> instance.
		///</summary>
		///<param name="maThoiKhoaBieu"></param>
		///<param name="maPhanCong"></param>
		///<param name="maLopHoc"></param>
		///<param name="phuTrach"></param>
		///<param name="thu"></param>
		///<param name="tietHoc"></param>
		public ThoiKhoaBieuBase(System.String maThoiKhoaBieu, System.String maPhanCong, 
			System.String maLopHoc, System.String phuTrach, System.Int32? thu, System.Int32? tietHoc)
		{
			this.entityData = new ThoiKhoaBieuEntityData();
			this.backupData = null;

			this.MaThoiKhoaBieu = maThoiKhoaBieu;
			this.MaPhanCong = maPhanCong;
			this.MaLopHoc = maLopHoc;
			this.PhuTrach = phuTrach;
			this.Thu = thu;
			this.TietHoc = tietHoc;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ThoiKhoaBieu"/> instance.
		///</summary>
		///<param name="maThoiKhoaBieu"></param>
		///<param name="maPhanCong"></param>
		///<param name="maLopHoc"></param>
		///<param name="phuTrach"></param>
		///<param name="thu"></param>
		///<param name="tietHoc"></param>
		public static ThoiKhoaBieu CreateThoiKhoaBieu(System.String maThoiKhoaBieu, System.String maPhanCong, 
			System.String maLopHoc, System.String phuTrach, System.Int32? thu, System.Int32? tietHoc)
		{
			ThoiKhoaBieu newThoiKhoaBieu = new ThoiKhoaBieu();
			newThoiKhoaBieu.MaThoiKhoaBieu = maThoiKhoaBieu;
			newThoiKhoaBieu.MaPhanCong = maPhanCong;
			newThoiKhoaBieu.MaLopHoc = maLopHoc;
			newThoiKhoaBieu.PhuTrach = phuTrach;
			newThoiKhoaBieu.Thu = thu;
			newThoiKhoaBieu.TietHoc = tietHoc;
			return newThoiKhoaBieu;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaThoiKhoaBieu property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 50)]
		public virtual System.String MaThoiKhoaBieu
		{
			get
			{
				return this.entityData.MaThoiKhoaBieu; 
			}
			
			set
			{
				if (this.entityData.MaThoiKhoaBieu == value)
					return;
					
				OnColumnChanging(ThoiKhoaBieuColumn.MaThoiKhoaBieu, this.entityData.MaThoiKhoaBieu);
				this.entityData.MaThoiKhoaBieu = value;
				this.EntityId.MaThoiKhoaBieu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThoiKhoaBieuColumn.MaThoiKhoaBieu, this.entityData.MaThoiKhoaBieu);
				OnPropertyChanged("MaThoiKhoaBieu");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MaThoiKhoaBieu property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MaThoiKhoaBieu property.</remarks>
		/// <value>This type is nvarchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalMaThoiKhoaBieu
		{
			get { return this.entityData.OriginalMaThoiKhoaBieu; }
			set { this.entityData.OriginalMaThoiKhoaBieu = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the MaPhanCong property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaPhanCong
		{
			get
			{
				return this.entityData.MaPhanCong; 
			}
			
			set
			{
				if (this.entityData.MaPhanCong == value)
					return;
					
				OnColumnChanging(ThoiKhoaBieuColumn.MaPhanCong, this.entityData.MaPhanCong);
				this.entityData.MaPhanCong = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThoiKhoaBieuColumn.MaPhanCong, this.entityData.MaPhanCong);
				OnPropertyChanged("MaPhanCong");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLopHoc property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MaLopHoc
		{
			get
			{
				return this.entityData.MaLopHoc; 
			}
			
			set
			{
				if (this.entityData.MaLopHoc == value)
					return;
					
				OnColumnChanging(ThoiKhoaBieuColumn.MaLopHoc, this.entityData.MaLopHoc);
				this.entityData.MaLopHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThoiKhoaBieuColumn.MaLopHoc, this.entityData.MaLopHoc);
				OnPropertyChanged("MaLopHoc");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PhuTrach property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String PhuTrach
		{
			get
			{
				return this.entityData.PhuTrach; 
			}
			
			set
			{
				if (this.entityData.PhuTrach == value)
					return;
					
				OnColumnChanging(ThoiKhoaBieuColumn.PhuTrach, this.entityData.PhuTrach);
				this.entityData.PhuTrach = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThoiKhoaBieuColumn.PhuTrach, this.entityData.PhuTrach);
				OnPropertyChanged("PhuTrach");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Thu property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsThuNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Thu
		{
			get
			{
				return this.entityData.Thu; 
			}
			
			set
			{
				if (this.entityData.Thu == value)
					return;
					
				OnColumnChanging(ThoiKhoaBieuColumn.Thu, this.entityData.Thu);
				this.entityData.Thu = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThoiKhoaBieuColumn.Thu, this.entityData.Thu);
				OnPropertyChanged("Thu");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TietHoc property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTietHocNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TietHoc
		{
			get
			{
				return this.entityData.TietHoc; 
			}
			
			set
			{
				if (this.entityData.TietHoc == value)
					return;
					
				OnColumnChanging(ThoiKhoaBieuColumn.TietHoc, this.entityData.TietHoc);
				this.entityData.TietHoc = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ThoiKhoaBieuColumn.TietHoc, this.entityData.TietHoc);
				OnPropertyChanged("TietHoc");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("MaThoiKhoaBieu", "Ma Thoi Khoa Bieu"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MaThoiKhoaBieu", "Ma Thoi Khoa Bieu", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MaPhanCong", "Ma Phan Cong", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MaLopHoc", "Ma Lop Hoc", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PhuTrach", "Phu Trach", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ThoiKhoaBieu"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaThoiKhoaBieu", "MaPhanCong", "MaLopHoc", "PhuTrach", "Thu", "TietHoc"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ThoiKhoaBieuEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ThoiKhoaBieu) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ThoiKhoaBieu>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ThoiKhoaBieu);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ThoiKhoaBieu Entity 
		///</summary>
		public virtual ThoiKhoaBieu Copy()
		{
			//shallow copy entity
			ThoiKhoaBieu copy = new ThoiKhoaBieu();
			copy.SuppressEntityEvents = true;
			copy.MaThoiKhoaBieu = this.MaThoiKhoaBieu;
			copy.OriginalMaThoiKhoaBieu = this.OriginalMaThoiKhoaBieu;
			copy.MaPhanCong = this.MaPhanCong;
			copy.MaLopHoc = this.MaLopHoc;
			copy.PhuTrach = this.PhuTrach;
			copy.Thu = this.Thu;
			copy.TietHoc = this.TietHoc;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed ThoiKhoaBieu Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ThoiKhoaBieu DeepCopy()
		{
			return EntityHelper.Clone<ThoiKhoaBieu>(this as ThoiKhoaBieu);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ThoiKhoaBieuEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ThoiKhoaBieuEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ThoiKhoaBieuColumn column)
		{
			switch(column)
			{
					case ThoiKhoaBieuColumn.MaThoiKhoaBieu:
					return entityData.MaThoiKhoaBieu != _originalData.MaThoiKhoaBieu;
					case ThoiKhoaBieuColumn.MaPhanCong:
					return entityData.MaPhanCong != _originalData.MaPhanCong;
					case ThoiKhoaBieuColumn.MaLopHoc:
					return entityData.MaLopHoc != _originalData.MaLopHoc;
					case ThoiKhoaBieuColumn.PhuTrach:
					return entityData.PhuTrach != _originalData.PhuTrach;
					case ThoiKhoaBieuColumn.Thu:
					return entityData.Thu != _originalData.Thu;
					case ThoiKhoaBieuColumn.TietHoc:
					return entityData.TietHoc != _originalData.TietHoc;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaThoiKhoaBieu != _originalData.MaThoiKhoaBieu;
			result = result || entityData.MaPhanCong != _originalData.MaPhanCong;
			result = result || entityData.MaLopHoc != _originalData.MaLopHoc;
			result = result || entityData.PhuTrach != _originalData.PhuTrach;
			result = result || entityData.Thu != _originalData.Thu;
			result = result || entityData.TietHoc != _originalData.TietHoc;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ThoiKhoaBieuBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is ThoiKhoaBieuBase)
				return Equals(this, (ThoiKhoaBieuBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ThoiKhoaBieuBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaThoiKhoaBieu.GetHashCode() ^ 
					((this.MaPhanCong == null) ? string.Empty : this.MaPhanCong.ToString()).GetHashCode() ^ 
					((this.MaLopHoc == null) ? string.Empty : this.MaLopHoc.ToString()).GetHashCode() ^ 
					((this.PhuTrach == null) ? string.Empty : this.PhuTrach.ToString()).GetHashCode() ^ 
					((this.Thu == null) ? string.Empty : this.Thu.ToString()).GetHashCode() ^ 
					((this.TietHoc == null) ? string.Empty : this.TietHoc.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ThoiKhoaBieuBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ThoiKhoaBieuBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ThoiKhoaBieuBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ThoiKhoaBieuBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ThoiKhoaBieuBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ThoiKhoaBieuBase Object1, ThoiKhoaBieuBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaThoiKhoaBieu != Object2.MaThoiKhoaBieu)
				equal = false;
			if ( Object1.MaPhanCong != null && Object2.MaPhanCong != null )
			{
				if (Object1.MaPhanCong != Object2.MaPhanCong)
					equal = false;
			}
			else if (Object1.MaPhanCong == null ^ Object2.MaPhanCong == null )
			{
				equal = false;
			}
			if ( Object1.MaLopHoc != null && Object2.MaLopHoc != null )
			{
				if (Object1.MaLopHoc != Object2.MaLopHoc)
					equal = false;
			}
			else if (Object1.MaLopHoc == null ^ Object2.MaLopHoc == null )
			{
				equal = false;
			}
			if ( Object1.PhuTrach != null && Object2.PhuTrach != null )
			{
				if (Object1.PhuTrach != Object2.PhuTrach)
					equal = false;
			}
			else if (Object1.PhuTrach == null ^ Object2.PhuTrach == null )
			{
				equal = false;
			}
			if ( Object1.Thu != null && Object2.Thu != null )
			{
				if (Object1.Thu != Object2.Thu)
					equal = false;
			}
			else if (Object1.Thu == null ^ Object2.Thu == null )
			{
				equal = false;
			}
			if ( Object1.TietHoc != null && Object2.TietHoc != null )
			{
				if (Object1.TietHoc != Object2.TietHoc)
					equal = false;
			}
			else if (Object1.TietHoc == null ^ Object2.TietHoc == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ThoiKhoaBieuBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ThoiKhoaBieuComparer GetComparer()
        {
            return new ThoiKhoaBieuComparer();
        }
        */

        // Comparer delegates back to ThoiKhoaBieu
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ThoiKhoaBieu rhs, ThoiKhoaBieuColumn which)
        {
            switch (which)
            {
            	
            	
            	case ThoiKhoaBieuColumn.MaThoiKhoaBieu:
            		return this.MaThoiKhoaBieu.CompareTo(rhs.MaThoiKhoaBieu);
            		
            		                 
            	
            	
            	case ThoiKhoaBieuColumn.MaPhanCong:
            		return this.MaPhanCong.CompareTo(rhs.MaPhanCong);
            		
            		                 
            	
            	
            	case ThoiKhoaBieuColumn.MaLopHoc:
            		return this.MaLopHoc.CompareTo(rhs.MaLopHoc);
            		
            		                 
            	
            	
            	case ThoiKhoaBieuColumn.PhuTrach:
            		return this.PhuTrach.CompareTo(rhs.PhuTrach);
            		
            		                 
            	
            	
            	case ThoiKhoaBieuColumn.Thu:
            		return this.Thu.Value.CompareTo(rhs.Thu.Value);
            		
            		                 
            	
            	
            	case ThoiKhoaBieuColumn.TietHoc:
            		return this.TietHoc.Value.CompareTo(rhs.TietHoc.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ThoiKhoaBieuKey> Members
		
		// member variable for the EntityId property
		private ThoiKhoaBieuKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ThoiKhoaBieuKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ThoiKhoaBieuKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ThoiKhoaBieu")
					.Append("|").Append( this.MaThoiKhoaBieu.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{7}{6}- MaThoiKhoaBieu: {0}{6}- MaPhanCong: {1}{6}- MaLopHoc: {2}{6}- PhuTrach: {3}{6}- Thu: {4}{6}- TietHoc: {5}{6}", 
				this.MaThoiKhoaBieu,
				(this.MaPhanCong == null) ? string.Empty : this.MaPhanCong.ToString(),
				(this.MaLopHoc == null) ? string.Empty : this.MaLopHoc.ToString(),
				(this.PhuTrach == null) ? string.Empty : this.PhuTrach.ToString(),
				(this.Thu == null) ? string.Empty : this.Thu.ToString(),
				(this.TietHoc == null) ? string.Empty : this.TietHoc.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ThoiKhoaBieu' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ThoiKhoaBieuEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// MaThoiKhoaBieu : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ThoiKhoaBieu"</remarks>
			public System.String MaThoiKhoaBieu;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalMaThoiKhoaBieu;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// MaPhanCong : 
		/// </summary>
		public System.String		  MaPhanCong = null;
		
		/// <summary>
		/// MaLopHoc : 
		/// </summary>
		public System.String		  MaLopHoc = null;
		
		/// <summary>
		/// PhuTrach : 
		/// </summary>
		public System.String		  PhuTrach = null;
		
		/// <summary>
		/// Thu : 
		/// </summary>
		public System.Int32?		  Thu = null;
		
		/// <summary>
		/// TietHoc : 
		/// </summary>
		public System.Int32?		  TietHoc = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ThoiKhoaBieuEntityData _tmp = new ThoiKhoaBieuEntityData();
						
			_tmp.MaThoiKhoaBieu = this.MaThoiKhoaBieu;
			_tmp.OriginalMaThoiKhoaBieu = this.OriginalMaThoiKhoaBieu;
			
			_tmp.MaPhanCong = this.MaPhanCong;
			_tmp.MaLopHoc = this.MaLopHoc;
			_tmp.PhuTrach = this.PhuTrach;
			_tmp.Thu = this.Thu;
			_tmp.TietHoc = this.TietHoc;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThoiKhoaBieuColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ThoiKhoaBieuColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThoiKhoaBieuColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ThoiKhoaBieuColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThoiKhoaBieuColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ThoiKhoaBieuColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ThoiKhoaBieuEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ThoiKhoaBieuEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ThoiKhoaBieuColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ThoiKhoaBieuColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ThoiKhoaBieuEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ThoiKhoaBieuEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ThoiKhoaBieuEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ThoiKhoaBieu"/> object.
	/// </remarks>
	public class ThoiKhoaBieuEventArgs : System.EventArgs
	{
		private ThoiKhoaBieuColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ThoiKhoaBieuEventArgs class.
		///</summary>
		public ThoiKhoaBieuEventArgs(ThoiKhoaBieuColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ThoiKhoaBieuEventArgs class.
		///</summary>
		public ThoiKhoaBieuEventArgs(ThoiKhoaBieuColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ThoiKhoaBieuColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ThoiKhoaBieuColumn" />
		public ThoiKhoaBieuColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ThoiKhoaBieu related events.
	///</summary>
	public delegate void ThoiKhoaBieuEventHandler(object sender, ThoiKhoaBieuEventArgs e);
	
	#region ThoiKhoaBieuComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ThoiKhoaBieuComparer : System.Collections.Generic.IComparer<ThoiKhoaBieu>
	{
		ThoiKhoaBieuColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ThoiKhoaBieuComparer"/> class.
        /// </summary>
		public ThoiKhoaBieuComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ThoiKhoaBieuComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ThoiKhoaBieuComparer(ThoiKhoaBieuColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ThoiKhoaBieu"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ThoiKhoaBieu"/> to compare.</param>
        /// <param name="b">The second <c>ThoiKhoaBieu</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ThoiKhoaBieu a, ThoiKhoaBieu b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ThoiKhoaBieu entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ThoiKhoaBieu a, ThoiKhoaBieu b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ThoiKhoaBieuColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ThoiKhoaBieuKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ThoiKhoaBieu"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ThoiKhoaBieuKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ThoiKhoaBieuKey class.
		/// </summary>
		public ThoiKhoaBieuKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ThoiKhoaBieuKey class.
		/// </summary>
		public ThoiKhoaBieuKey(ThoiKhoaBieuBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaThoiKhoaBieu = entity.MaThoiKhoaBieu;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ThoiKhoaBieuKey class.
		/// </summary>
		public ThoiKhoaBieuKey(System.String maThoiKhoaBieu)
		{
			#region Init Properties

			this.MaThoiKhoaBieu = maThoiKhoaBieu;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ThoiKhoaBieuBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ThoiKhoaBieuBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaThoiKhoaBieu property
		private System.String _maThoiKhoaBieu;
		
		/// <summary>
		/// Gets or sets the MaThoiKhoaBieu property.
		/// </summary>
		public System.String MaThoiKhoaBieu
		{
			get { return _maThoiKhoaBieu; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaThoiKhoaBieu = value;
				
				_maThoiKhoaBieu = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaThoiKhoaBieu = ( values["MaThoiKhoaBieu"] != null ) ? (System.String) EntityUtil.ChangeType(values["MaThoiKhoaBieu"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaThoiKhoaBieu", MaThoiKhoaBieu);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaThoiKhoaBieu: {0}{1}",
								MaThoiKhoaBieu,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ThoiKhoaBieuColumn Enum
	
	/// <summary>
	/// Enumerate the ThoiKhoaBieu columns.
	/// </summary>
	[Serializable]
	public enum ThoiKhoaBieuColumn : int
	{
		/// <summary>
		/// MaThoiKhoaBieu : 
		/// </summary>
		[EnumTextValue("MaThoiKhoaBieu")]
		[ColumnEnum("MaThoiKhoaBieu", typeof(System.String), System.Data.DbType.String, true, false, false, 50)]
		MaThoiKhoaBieu = 1,
		/// <summary>
		/// MaPhanCong : 
		/// </summary>
		[EnumTextValue("MaPhanCong")]
		[ColumnEnum("MaPhanCong", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MaPhanCong = 2,
		/// <summary>
		/// MaLopHoc : 
		/// </summary>
		[EnumTextValue("MaLopHoc")]
		[ColumnEnum("MaLopHoc", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		MaLopHoc = 3,
		/// <summary>
		/// PhuTrach : 
		/// </summary>
		[EnumTextValue("PhuTrach")]
		[ColumnEnum("PhuTrach", typeof(System.String), System.Data.DbType.String, false, false, true, 50)]
		PhuTrach = 4,
		/// <summary>
		/// Thu : 
		/// </summary>
		[EnumTextValue("Thu")]
		[ColumnEnum("Thu", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Thu = 5,
		/// <summary>
		/// TietHoc : 
		/// </summary>
		[EnumTextValue("TietHoc")]
		[ColumnEnum("TietHoc", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TietHoc = 6
	}//End enum

	#endregion ThoiKhoaBieuColumn Enum

} // end namespace
