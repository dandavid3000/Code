<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PTNK.Services</name>
    </assembly>
    <members>
        <member name="T:PTNK.Services.PhanCongServiceBase">
            <summary>
             An object representation of the 'PhanCong' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PhanCong.cs file instead.
             All custom implementations should be done in the <see cref="T:PTNK.Entities.PhanCong"/> class.
             </remarks>
        </member>
        <member name="T:PTNK.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:PTNK.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:PTNK.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:PTNK.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PTNK.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PTNK.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:PTNK.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:PTNK.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.OnProcessStarting(PTNK.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.OnProcessEnded(PTNK.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.BulkInsert(PTNK.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,PTNK.Data.DeepLoadType,System.Type[],PTNK.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.DeepLoad(PTNK.Entities.TList{`0},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.DeepSave(`0,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.DeepSave(`0,PTNK.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:PTNK.Services.ServiceBaseCore`2.DeepSave(PTNK.Entities.TList{`0},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:PTNK.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PTNK.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PTNK.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:PTNK.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:PTNK.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:PTNK.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:PTNK.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:PTNK.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:PTNK.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PTNK.Entities.PhanCong"/> instance .
            </summary>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.CreatePhanCong(System.String,System.String,System.String,System.String,System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:PTNK.Entities.PhanCong"/> instance.
            </summary>
            <param name="maPhanCong"></param>
            <param name="maLopHoc"></param>
            <param name="maMonHoc"></param>
            <param name="maGiaoVien"></param>
            <param name="soTietHocTuan"></param>
            <param name="soTietHocLienTiepToiThieu"></param>
            <param name="soTietHocLienTiepToiDa"></param>
            <param name="soBuoiHocToiThieu"></param>
            <param name="soBuoiHocToiDa"></param>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Get(PTNK.Entities.PhanCongKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetByMaPhanCong(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhanCong$PrimaryKey index.
            </summary>
            <param name="maPhanCong"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.PhanCong"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetByMaPhanCong(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhanCong$PrimaryKey index.
            </summary>
            <param name="maPhanCong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.PhanCong"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetByMaGiaoVien(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhanCong$GiaoVienPhanCong index.
            </summary>
            <param name="maGiaoVien"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetByMaGiaoVien(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhanCong$GiaoVienPhanCong index.
            </summary>
            <param name="maGiaoVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetByMaLopHoc(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhanCong$LopHocPhanCong index.
            </summary>
            <param name="maLopHoc"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetByMaLopHoc(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhanCong$LopHocPhanCong index.
            </summary>
            <param name="maLopHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetByMaMonHoc(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhanCong$MonHocPhanCong index.
            </summary>
            <param name="maMonHoc"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetByMaMonHoc(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhanCong$MonHocPhanCong index.
            </summary>
            <param name="maMonHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PTNK.Entities.PhanCong"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PTNK.Entities.PhanCong"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PhanCong</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PhanCong</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PhanCong</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{PhanCong} of <c>PhanCong</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Find(PTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>PhanCong</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>PhanCong</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PhanCong</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Insert(PTNK.Entities.PhanCong)">
            <summary>
            	public virtualmethod that Inserts a PhanCong object into the datasource using a transaction.
            </summary>
            <param name="entity">PhanCong object to Insert.</param>
            <remarks>After Inserting into the datasource, the PhanCong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PhanCong entity = new PhanCong();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PhanCongService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Insert(PTNK.Entities.TList{PTNK.Entities.PhanCong})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhanCong</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PhanCong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PhanCong.
             <code><![CDATA[
             TList<PhanCong> list = new TList<PhanCong>();
             PhanCong entity = new PhanCong();
             entity.StringProperty = "foo";
             PhanCong entity2 = new PhanCong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhanCongService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Update(PTNK.Entities.PhanCong)">
            <summary>
            	public virtualmethod that Updates a PhanCong object into the datasource using a transaction.
            </summary>
            <param name="entity">PhanCong object to Update.</param>
            <remarks>After Updateing into the datasource, the PhanCong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PhanCong entity = PhanCongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PhanCongService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Update(PTNK.Entities.TList{PTNK.Entities.PhanCong})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhanCong</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PhanCong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PhanCong.
             <code><![CDATA[
             TList<PhanCong> list = new TList<PhanCong>();
             PhanCong entity = new PhanCong();
             entity.StringProperty = "foo";
             PhanCong entity2 = new PhanCong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhanCongService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Save(PTNK.Entities.PhanCong)">
            <summary>
            	public virtualmethod that Saves a PhanCong object into the datasource using a transaction.
            </summary>
            <param name="entity">PhanCong object to Save.</param>
            <remarks>After Saveing into the datasource, the PhanCong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            PhanCong entity = PhanCongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PhanCongService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Save(PTNK.Entities.TList{PTNK.Entities.PhanCong})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhanCong</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>PhanCong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of PhanCong.
             <code><![CDATA[
             TList<PhanCong> list = new TList<PhanCong>();
             PhanCong entity = new PhanCong();
             entity.StringProperty = "foo";
             PhanCong entity2 = new PhanCong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhanCongService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Delete(PTNK.Entities.PhanCong)">
            <summary>
            	public virtualmethod that Deletes a PhanCong object into the datasource using a transaction.
            </summary>
            <param name="entity">PhanCong object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PhanCong object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PhanCong entity = PhanCongService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PhanCongService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Delete(PTNK.Entities.TList{PTNK.Entities.PhanCong})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhanCong</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PhanCong</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PhanCong.
             <code><![CDATA[
             TList<PhanCong> list = new TList<PhanCong>();
             PhanCong entity = new PhanCong();
             entity.StringProperty = "foo";
             PhanCong entity2 = new PhanCong();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhanCongService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Delete(PTNK.Entities.PhanCongKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maPhanCong
            </summary>
            <param name="maPhanCong">PhanCong pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepLoadByMaPhanCong(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.PhanCong"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maPhanCong"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PhanCong Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.PhanCong"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepLoadByMaGiaoVien(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maGiaoVien"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PhanCong Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepLoadByMaLopHoc(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maLopHoc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PhanCong Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepLoadByMaMonHoc(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maMonHoc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PhanCong Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepLoad(PTNK.Entities.PhanCong)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">PhanCong Object</param>
            <remarks>
            <seealso cref="M:PTNK.Services.PhanCongServiceBase.DeepLoad(PTNK.Entities.PhanCong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepLoad(PTNK.Entities.PhanCong,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.PhanCongServiceBase.DeepLoad(PTNK.Entities.PhanCong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">PhanCong Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepLoad(PTNK.Entities.PhanCong,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PTNK.Entities.PhanCong"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PhanCong Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.PhanCong})">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.PhanCongServiceBase.DeepLoad(PTNK.Entities.PhanCong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.PhanCong},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.PhanCongServiceBase.DeepLoad(PTNK.Entities.PhanCong)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.PhanCong},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PTNK.Entities.PhanCong"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepSave(PTNK.Entities.PhanCong)">
            <summary>
            public virtualDeep Saves the <see cref="T:PTNK.Entities.PhanCong"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">PhanCong Object</param>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepSave(PTNK.Entities.PhanCong,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the PhanCong object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">PhanCong Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>PhanCong</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.PhanCong})">
            <summary>
            Deep Save the entire <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{PhanCong} Object</param>
        </member>
        <member name="M:PTNK.Services.PhanCongServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.PhanCong},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">PhanCong Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PTNK.Services.PhanCongServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PTNK.Services.RangBuocGiaoVienService">
            <summary>
             An component type implementation of the 'RangBuocGiaoVien' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PTNK.Services.RangBuocGiaoVienServiceBase">
            <summary>
             An object representation of the 'RangBuocGiaoVien' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the RangBuocGiaoVien.cs file instead.
             All custom implementations should be done in the <see cref="T:PTNK.Entities.RangBuocGiaoVien"/> class.
             </remarks>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PTNK.Entities.RangBuocGiaoVien"/> instance .
            </summary>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.CreateRangBuocGiaoVien(System.String,System.String,System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:PTNK.Entities.RangBuocGiaoVien"/> instance.
            </summary>
            <param name="maRangBuocGiaoVien"></param>
            <param name="maGiaoVien"></param>
            <param name="thu"></param>
            <param name="tietHoc"></param>
            <param name="trangThai"></param>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Get(PTNK.Entities.RangBuocGiaoVienKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.GetByMaRangBuocGiaoVien(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key RangBuocGiaoVien$PrimaryKey index.
            </summary>
            <param name="maRangBuocGiaoVien"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.RangBuocGiaoVien"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.GetByMaRangBuocGiaoVien(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key RangBuocGiaoVien$PrimaryKey index.
            </summary>
            <param name="maRangBuocGiaoVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.RangBuocGiaoVien"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.GetByMaGiaoVien(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key RangBuocGiaoVien$GiaoVienRangBuocGiaoVien index.
            </summary>
            <param name="maGiaoVien"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.GetByMaGiaoVien(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key RangBuocGiaoVien$GiaoVienRangBuocGiaoVien index.
            </summary>
            <param name="maGiaoVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PTNK.Entities.RangBuocGiaoVien"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PTNK.Entities.RangBuocGiaoVien"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RangBuocGiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RangBuocGiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RangBuocGiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{RangBuocGiaoVien} of <c>RangBuocGiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Find(PTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>RangBuocGiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>RangBuocGiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>RangBuocGiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Insert(PTNK.Entities.RangBuocGiaoVien)">
            <summary>
            	public virtualmethod that Inserts a RangBuocGiaoVien object into the datasource using a transaction.
            </summary>
            <param name="entity">RangBuocGiaoVien object to Insert.</param>
            <remarks>After Inserting into the datasource, the RangBuocGiaoVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            RangBuocGiaoVien entity = new RangBuocGiaoVien();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RangBuocGiaoVienService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Insert(PTNK.Entities.TList{PTNK.Entities.RangBuocGiaoVien})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RangBuocGiaoVien</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>RangBuocGiaoVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of RangBuocGiaoVien.
             <code><![CDATA[
             TList<RangBuocGiaoVien> list = new TList<RangBuocGiaoVien>();
             RangBuocGiaoVien entity = new RangBuocGiaoVien();
             entity.StringProperty = "foo";
             RangBuocGiaoVien entity2 = new RangBuocGiaoVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RangBuocGiaoVienService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Update(PTNK.Entities.RangBuocGiaoVien)">
            <summary>
            	public virtualmethod that Updates a RangBuocGiaoVien object into the datasource using a transaction.
            </summary>
            <param name="entity">RangBuocGiaoVien object to Update.</param>
            <remarks>After Updateing into the datasource, the RangBuocGiaoVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            RangBuocGiaoVien entity = RangBuocGiaoVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RangBuocGiaoVienService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Update(PTNK.Entities.TList{PTNK.Entities.RangBuocGiaoVien})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RangBuocGiaoVien</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>RangBuocGiaoVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of RangBuocGiaoVien.
             <code><![CDATA[
             TList<RangBuocGiaoVien> list = new TList<RangBuocGiaoVien>();
             RangBuocGiaoVien entity = new RangBuocGiaoVien();
             entity.StringProperty = "foo";
             RangBuocGiaoVien entity2 = new RangBuocGiaoVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RangBuocGiaoVienService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Save(PTNK.Entities.RangBuocGiaoVien)">
            <summary>
            	public virtualmethod that Saves a RangBuocGiaoVien object into the datasource using a transaction.
            </summary>
            <param name="entity">RangBuocGiaoVien object to Save.</param>
            <remarks>After Saveing into the datasource, the RangBuocGiaoVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            RangBuocGiaoVien entity = RangBuocGiaoVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	RangBuocGiaoVienService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Save(PTNK.Entities.TList{PTNK.Entities.RangBuocGiaoVien})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RangBuocGiaoVien</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>RangBuocGiaoVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of RangBuocGiaoVien.
             <code><![CDATA[
             TList<RangBuocGiaoVien> list = new TList<RangBuocGiaoVien>();
             RangBuocGiaoVien entity = new RangBuocGiaoVien();
             entity.StringProperty = "foo";
             RangBuocGiaoVien entity2 = new RangBuocGiaoVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RangBuocGiaoVienService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Delete(PTNK.Entities.RangBuocGiaoVien)">
            <summary>
            	public virtualmethod that Deletes a RangBuocGiaoVien object into the datasource using a transaction.
            </summary>
            <param name="entity">RangBuocGiaoVien object to Delete.</param>
            <remarks>After Deleteing into the datasource, the RangBuocGiaoVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            RangBuocGiaoVien entity = RangBuocGiaoVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RangBuocGiaoVienService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Delete(PTNK.Entities.TList{PTNK.Entities.RangBuocGiaoVien})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RangBuocGiaoVien</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>RangBuocGiaoVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of RangBuocGiaoVien.
             <code><![CDATA[
             TList<RangBuocGiaoVien> list = new TList<RangBuocGiaoVien>();
             RangBuocGiaoVien entity = new RangBuocGiaoVien();
             entity.StringProperty = "foo";
             RangBuocGiaoVien entity2 = new RangBuocGiaoVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RangBuocGiaoVienService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Delete(PTNK.Entities.RangBuocGiaoVienKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maRangBuocGiaoVien
            </summary>
            <param name="maRangBuocGiaoVien">RangBuocGiaoVien pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoadByMaRangBuocGiaoVien(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.RangBuocGiaoVien"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maRangBuocGiaoVien"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RangBuocGiaoVien Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.RangBuocGiaoVien"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoadByMaGiaoVien(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maGiaoVien"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RangBuocGiaoVien Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoad(PTNK.Entities.RangBuocGiaoVien)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">RangBuocGiaoVien Object</param>
            <remarks>
            <seealso cref="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoad(PTNK.Entities.RangBuocGiaoVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoad(PTNK.Entities.RangBuocGiaoVien,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoad(PTNK.Entities.RangBuocGiaoVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">RangBuocGiaoVien Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoad(PTNK.Entities.RangBuocGiaoVien,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PTNK.Entities.RangBuocGiaoVien"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RangBuocGiaoVien Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.RangBuocGiaoVien})">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoad(PTNK.Entities.RangBuocGiaoVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.RangBuocGiaoVien},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoad(PTNK.Entities.RangBuocGiaoVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.RangBuocGiaoVien},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PTNK.Entities.RangBuocGiaoVien"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepSave(PTNK.Entities.RangBuocGiaoVien)">
            <summary>
            public virtualDeep Saves the <see cref="T:PTNK.Entities.RangBuocGiaoVien"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">RangBuocGiaoVien Object</param>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepSave(PTNK.Entities.RangBuocGiaoVien,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the RangBuocGiaoVien object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">RangBuocGiaoVien Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>RangBuocGiaoVien</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.RangBuocGiaoVien})">
            <summary>
            Deep Save the entire <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{RangBuocGiaoVien} Object</param>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.RangBuocGiaoVien},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RangBuocGiaoVien Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PTNK.Services.RangBuocGiaoVienServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PTNK.Services.RangBuocGiaoVienService.#ctor">
            <summary>
            Initializes a new instance of the RangBuocGiaoVienService class.
            </summary>
        </member>
        <member name="T:PTNK.Services.LopHocServiceBase">
            <summary>
             An object representation of the 'LopHoc' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the LopHoc.cs file instead.
             All custom implementations should be done in the <see cref="T:PTNK.Entities.LopHoc"/> class.
             </remarks>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PTNK.Entities.LopHoc"/> instance .
            </summary>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.CreateLopHoc(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PTNK.Entities.LopHoc"/> instance.
            </summary>
            <param name="maLopHoc"></param>
            <param name="tenLopHoc"></param>
            <param name="maKhoi"></param>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Get(PTNK.Entities.LopHocKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.GetByMaLopHoc(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key LopHoc$PrimaryKey index.
            </summary>
            <param name="maLopHoc"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.LopHoc"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.GetByMaLopHoc(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key LopHoc$PrimaryKey index.
            </summary>
            <param name="maLopHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.LopHoc"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.GetByMaKhoi(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key LopHoc$KhoiLopHoc index.
            </summary>
            <param name="maKhoi"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.GetByMaKhoi(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key LopHoc$KhoiLopHoc index.
            </summary>
            <param name="maKhoi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PTNK.Entities.LopHoc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PTNK.Entities.LopHoc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{LopHoc} of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Find(PTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Insert(PTNK.Entities.LopHoc)">
            <summary>
            	public virtualmethod that Inserts a LopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LopHoc object to Insert.</param>
            <remarks>After Inserting into the datasource, the LopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            LopHoc entity = new LopHoc();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LopHocService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Insert(PTNK.Entities.TList{PTNK.Entities.LopHoc})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>LopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of LopHoc.
             <code><![CDATA[
             TList<LopHoc> list = new TList<LopHoc>();
             LopHoc entity = new LopHoc();
             entity.StringProperty = "foo";
             LopHoc entity2 = new LopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LopHocService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Update(PTNK.Entities.LopHoc)">
            <summary>
            	public virtualmethod that Updates a LopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LopHoc object to Update.</param>
            <remarks>After Updateing into the datasource, the LopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            LopHoc entity = LopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LopHocService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Update(PTNK.Entities.TList{PTNK.Entities.LopHoc})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>LopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of LopHoc.
             <code><![CDATA[
             TList<LopHoc> list = new TList<LopHoc>();
             LopHoc entity = new LopHoc();
             entity.StringProperty = "foo";
             LopHoc entity2 = new LopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LopHocService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Save(PTNK.Entities.LopHoc)">
            <summary>
            	public virtualmethod that Saves a LopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LopHoc object to Save.</param>
            <remarks>After Saveing into the datasource, the LopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            LopHoc entity = LopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LopHocService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Save(PTNK.Entities.TList{PTNK.Entities.LopHoc})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>LopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of LopHoc.
             <code><![CDATA[
             TList<LopHoc> list = new TList<LopHoc>();
             LopHoc entity = new LopHoc();
             entity.StringProperty = "foo";
             LopHoc entity2 = new LopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LopHocService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Delete(PTNK.Entities.LopHoc)">
            <summary>
            	public virtualmethod that Deletes a LopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LopHoc object to Delete.</param>
            <remarks>After Deleteing into the datasource, the LopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            LopHoc entity = LopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LopHocService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Delete(PTNK.Entities.TList{PTNK.Entities.LopHoc})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>LopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of LopHoc.
             <code><![CDATA[
             TList<LopHoc> list = new TList<LopHoc>();
             LopHoc entity = new LopHoc();
             entity.StringProperty = "foo";
             LopHoc entity2 = new LopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LopHocService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Delete(PTNK.Entities.LopHocKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maLopHoc
            </summary>
            <param name="maLopHoc">LopHoc pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepLoadByMaLopHoc(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.LopHoc"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maLopHoc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LopHoc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.LopHoc"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepLoadByMaKhoi(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maKhoi"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LopHoc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepLoad(PTNK.Entities.LopHoc)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">LopHoc Object</param>
            <remarks>
            <seealso cref="M:PTNK.Services.LopHocServiceBase.DeepLoad(PTNK.Entities.LopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepLoad(PTNK.Entities.LopHoc,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.LopHocServiceBase.DeepLoad(PTNK.Entities.LopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">LopHoc Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepLoad(PTNK.Entities.LopHoc,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PTNK.Entities.LopHoc"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LopHoc Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.LopHoc})">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.LopHocServiceBase.DeepLoad(PTNK.Entities.LopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.LopHoc},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.LopHocServiceBase.DeepLoad(PTNK.Entities.LopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.LopHoc},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PTNK.Entities.LopHoc"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepSave(PTNK.Entities.LopHoc)">
            <summary>
            public virtualDeep Saves the <see cref="T:PTNK.Entities.LopHoc"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">LopHoc Object</param>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepSave(PTNK.Entities.LopHoc,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the LopHoc object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">LopHoc Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>LopHoc</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.LopHoc})">
            <summary>
            Deep Save the entire <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{LopHoc} Object</param>
        </member>
        <member name="M:PTNK.Services.LopHocServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.LopHoc},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LopHoc Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PTNK.Services.LopHocServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PTNK.Services.ThamSoServiceBase">
            <summary>
             An object representation of the 'ThamSo' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ThamSo.cs file instead.
             All custom implementations should be done in the <see cref="T:PTNK.Entities.ThamSo"/> class.
             </remarks>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PTNK.Entities.ThamSo"/> instance .
            </summary>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.CreateThamSo(System.Byte,System.Byte,System.Int16)">
            <summary>
             A simple factory method to create a new <see cref="T:PTNK.Entities.ThamSo"/> instance.
            </summary>
            <param name="soTietToiDaTrongNgay"></param>
            <param name="tietGay"></param>
            <param name="soTietToiDaDuocHocTrongNgay"></param>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Get(PTNK.Entities.ThamSoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.GetBySoTietToiDaTrongNgayTietGaySoTietToiDaDuocHocTrongNgay(System.Byte,System.Byte,System.Int16)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key ThamSo$PrimaryKey index.
            </summary>
            <param name="soTietToiDaTrongNgay"></param>
            <param name="tietGay"></param>
            <param name="soTietToiDaDuocHocTrongNgay"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.ThamSo"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.GetBySoTietToiDaTrongNgayTietGaySoTietToiDaDuocHocTrongNgay(System.Byte,System.Byte,System.Int16,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key ThamSo$PrimaryKey index.
            </summary>
            <param name="soTietToiDaTrongNgay"></param>
            <param name="tietGay"></param>
            <param name="soTietToiDaDuocHocTrongNgay"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.ThamSo"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PTNK.Entities.ThamSo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PTNK.Entities.ThamSo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThamSo</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThamSo</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThamSo</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ThamSo} of <c>ThamSo</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Find(PTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ThamSo</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ThamSo</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ThamSo</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Insert(PTNK.Entities.ThamSo)">
            <summary>
            	public virtualmethod that Inserts a ThamSo object into the datasource using a transaction.
            </summary>
            <param name="entity">ThamSo object to Insert.</param>
            <remarks>After Inserting into the datasource, the ThamSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ThamSo entity = new ThamSo();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ThamSoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Insert(PTNK.Entities.TList{PTNK.Entities.ThamSo})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThamSo</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ThamSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ThamSo.
             <code><![CDATA[
             TList<ThamSo> list = new TList<ThamSo>();
             ThamSo entity = new ThamSo();
             entity.StringProperty = "foo";
             ThamSo entity2 = new ThamSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThamSoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Update(PTNK.Entities.ThamSo)">
            <summary>
            	public virtualmethod that Updates a ThamSo object into the datasource using a transaction.
            </summary>
            <param name="entity">ThamSo object to Update.</param>
            <remarks>After Updateing into the datasource, the ThamSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ThamSo entity = ThamSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ThamSoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Update(PTNK.Entities.TList{PTNK.Entities.ThamSo})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThamSo</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ThamSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ThamSo.
             <code><![CDATA[
             TList<ThamSo> list = new TList<ThamSo>();
             ThamSo entity = new ThamSo();
             entity.StringProperty = "foo";
             ThamSo entity2 = new ThamSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThamSoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Save(PTNK.Entities.ThamSo)">
            <summary>
            	public virtualmethod that Saves a ThamSo object into the datasource using a transaction.
            </summary>
            <param name="entity">ThamSo object to Save.</param>
            <remarks>After Saveing into the datasource, the ThamSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ThamSo entity = ThamSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ThamSoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Save(PTNK.Entities.TList{PTNK.Entities.ThamSo})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThamSo</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ThamSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ThamSo.
             <code><![CDATA[
             TList<ThamSo> list = new TList<ThamSo>();
             ThamSo entity = new ThamSo();
             entity.StringProperty = "foo";
             ThamSo entity2 = new ThamSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThamSoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Delete(PTNK.Entities.ThamSo)">
            <summary>
            	public virtualmethod that Deletes a ThamSo object into the datasource using a transaction.
            </summary>
            <param name="entity">ThamSo object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ThamSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ThamSo entity = ThamSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ThamSoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Delete(PTNK.Entities.TList{PTNK.Entities.ThamSo})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThamSo</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ThamSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ThamSo.
             <code><![CDATA[
             TList<ThamSo> list = new TList<ThamSo>();
             ThamSo entity = new ThamSo();
             entity.StringProperty = "foo";
             ThamSo entity2 = new ThamSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThamSoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Delete(PTNK.Entities.ThamSoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.Delete(System.Byte,System.Byte,System.Int16)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.Byte soTietToiDaTrongNgay, System.Byte tietGay, System.Int16 soTietToiDaDuocHocTrongNgay
            </summary>
            <param name="soTietToiDaTrongNgay">ThamSo pk id.</param>
            <param name="tietGay">ThamSo pk id.</param>
            <param name="soTietToiDaDuocHocTrongNgay">ThamSo pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.DeepLoadBySoTietToiDaTrongNgayTietGaySoTietToiDaDuocHocTrongNgay(System.Byte,System.Byte,System.Int16,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.ThamSo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="soTietToiDaTrongNgay"></param>
            <param name="tietGay"></param>
            <param name="soTietToiDaDuocHocTrongNgay"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThamSo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.ThamSo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.DeepLoad(PTNK.Entities.ThamSo)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ThamSo Object</param>
            <remarks>
            <seealso cref="M:PTNK.Services.ThamSoServiceBase.DeepLoad(PTNK.Entities.ThamSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.DeepLoad(PTNK.Entities.ThamSo,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.ThamSoServiceBase.DeepLoad(PTNK.Entities.ThamSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ThamSo Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.DeepLoad(PTNK.Entities.ThamSo,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PTNK.Entities.ThamSo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThamSo Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.ThamSo})">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.ThamSoServiceBase.DeepLoad(PTNK.Entities.ThamSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.ThamSo},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.ThamSoServiceBase.DeepLoad(PTNK.Entities.ThamSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.ThamSo},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PTNK.Entities.ThamSo"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.DeepSave(PTNK.Entities.ThamSo)">
            <summary>
            public virtualDeep Saves the <see cref="T:PTNK.Entities.ThamSo"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ThamSo Object</param>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.DeepSave(PTNK.Entities.ThamSo,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ThamSo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ThamSo Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ThamSo</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.ThamSo})">
            <summary>
            Deep Save the entire <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ThamSo} Object</param>
        </member>
        <member name="M:PTNK.Services.ThamSoServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.ThamSo},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ThamSo Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PTNK.Services.ThamSoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PTNK.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:PTNK.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:PTNK.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PTNK.Services.IProcessor.ChangeProcessorState(PTNK.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:PTNK.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PTNK.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:PTNK.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PTNK.Services.ProcessorBase.ChangeProcessorState(PTNK.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PTNK.Services.ProcessorBase.OnNotifyProcessorStateChanging(PTNK.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:PTNK.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:PTNK.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:PTNK.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:PTNK.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:PTNK.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:PTNK.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="T:PTNK.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:PTNK.Services.IProcessorResult.AddBrokenRulesList(System.Type,PTNK.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:PTNK.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PTNK.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:PTNK.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="M:PTNK.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:PTNK.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,PTNK.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:PTNK.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PTNK.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:PTNK.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
        <member name="T:PTNK.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:PTNK.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.OnProcessStarting(PTNK.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.OnProcessEnded(PTNK.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ServiceViewBaseCore`1.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:PTNK.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PTNK.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:PTNK.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:PTNK.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:PTNK.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:PTNK.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:PTNK.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:PTNK.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:PTNK.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:PTNK.Services.PhanCongService">
            <summary>
             An component type implementation of the 'PhanCong' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PTNK.Services.PhanCongService.#ctor">
            <summary>
            Initializes a new instance of the PhanCongService class.
            </summary>
        </member>
        <member name="T:PTNK.Services.ThamSoService">
            <summary>
             An component type implementation of the 'ThamSo' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PTNK.Services.ThamSoService.#ctor">
            <summary>
            Initializes a new instance of the ThamSoService class.
            </summary>
        </member>
        <member name="T:PTNK.Services.LichLopHocService">
            <summary>
             An component type implementation of the 'LichLopHoc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PTNK.Services.LichLopHocServiceBase">
            <summary>
             An object representation of the 'LichLopHoc' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the LichLopHoc.cs file instead.
             All custom implementations should be done in the <see cref="T:PTNK.Entities.LichLopHoc"/> class.
             </remarks>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PTNK.Entities.LichLopHoc"/> instance .
            </summary>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.CreateLichLopHoc(System.String,System.String,System.String,System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:PTNK.Entities.LichLopHoc"/> instance.
            </summary>
            <param name="maLichLopHoc"></param>
            <param name="maPhanCong"></param>
            <param name="thu"></param>
            <param name="tietHocBatDau"></param>
            <param name="soTietHoc"></param>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Get(PTNK.Entities.LichLopHocKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.GetByMaLichLopHoc(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key LichLopHoc$PrimaryKey index.
            </summary>
            <param name="maLichLopHoc"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.LichLopHoc"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.GetByMaLichLopHoc(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key LichLopHoc$PrimaryKey index.
            </summary>
            <param name="maLichLopHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.LichLopHoc"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.GetByMaPhanCong(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key LichLopHoc$PhanCongLichLopHoc index.
            </summary>
            <param name="maPhanCong"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.GetByMaPhanCong(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key LichLopHoc$PhanCongLichLopHoc index.
            </summary>
            <param name="maPhanCong"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PTNK.Entities.LichLopHoc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PTNK.Entities.LichLopHoc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LichLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LichLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LichLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{LichLopHoc} of <c>LichLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Find(PTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>LichLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>LichLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LichLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Insert(PTNK.Entities.LichLopHoc)">
            <summary>
            	public virtualmethod that Inserts a LichLopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LichLopHoc object to Insert.</param>
            <remarks>After Inserting into the datasource, the LichLopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            LichLopHoc entity = new LichLopHoc();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LichLopHocService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Insert(PTNK.Entities.TList{PTNK.Entities.LichLopHoc})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LichLopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>LichLopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of LichLopHoc.
             <code><![CDATA[
             TList<LichLopHoc> list = new TList<LichLopHoc>();
             LichLopHoc entity = new LichLopHoc();
             entity.StringProperty = "foo";
             LichLopHoc entity2 = new LichLopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LichLopHocService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Update(PTNK.Entities.LichLopHoc)">
            <summary>
            	public virtualmethod that Updates a LichLopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LichLopHoc object to Update.</param>
            <remarks>After Updateing into the datasource, the LichLopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            LichLopHoc entity = LichLopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LichLopHocService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Update(PTNK.Entities.TList{PTNK.Entities.LichLopHoc})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LichLopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>LichLopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of LichLopHoc.
             <code><![CDATA[
             TList<LichLopHoc> list = new TList<LichLopHoc>();
             LichLopHoc entity = new LichLopHoc();
             entity.StringProperty = "foo";
             LichLopHoc entity2 = new LichLopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LichLopHocService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Save(PTNK.Entities.LichLopHoc)">
            <summary>
            	public virtualmethod that Saves a LichLopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LichLopHoc object to Save.</param>
            <remarks>After Saveing into the datasource, the LichLopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            LichLopHoc entity = LichLopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LichLopHocService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Save(PTNK.Entities.TList{PTNK.Entities.LichLopHoc})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LichLopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>LichLopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of LichLopHoc.
             <code><![CDATA[
             TList<LichLopHoc> list = new TList<LichLopHoc>();
             LichLopHoc entity = new LichLopHoc();
             entity.StringProperty = "foo";
             LichLopHoc entity2 = new LichLopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LichLopHocService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Delete(PTNK.Entities.LichLopHoc)">
            <summary>
            	public virtualmethod that Deletes a LichLopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LichLopHoc object to Delete.</param>
            <remarks>After Deleteing into the datasource, the LichLopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            LichLopHoc entity = LichLopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LichLopHocService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Delete(PTNK.Entities.TList{PTNK.Entities.LichLopHoc})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LichLopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>LichLopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of LichLopHoc.
             <code><![CDATA[
             TList<LichLopHoc> list = new TList<LichLopHoc>();
             LichLopHoc entity = new LichLopHoc();
             entity.StringProperty = "foo";
             LichLopHoc entity2 = new LichLopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LichLopHocService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Delete(PTNK.Entities.LichLopHocKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maLichLopHoc
            </summary>
            <param name="maLichLopHoc">LichLopHoc pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepLoadByMaLichLopHoc(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.LichLopHoc"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maLichLopHoc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LichLopHoc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.LichLopHoc"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepLoadByMaPhanCong(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maPhanCong"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LichLopHoc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepLoad(PTNK.Entities.LichLopHoc)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">LichLopHoc Object</param>
            <remarks>
            <seealso cref="M:PTNK.Services.LichLopHocServiceBase.DeepLoad(PTNK.Entities.LichLopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepLoad(PTNK.Entities.LichLopHoc,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.LichLopHocServiceBase.DeepLoad(PTNK.Entities.LichLopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">LichLopHoc Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepLoad(PTNK.Entities.LichLopHoc,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PTNK.Entities.LichLopHoc"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LichLopHoc Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.LichLopHoc})">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.LichLopHocServiceBase.DeepLoad(PTNK.Entities.LichLopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.LichLopHoc},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.LichLopHocServiceBase.DeepLoad(PTNK.Entities.LichLopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.LichLopHoc},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PTNK.Entities.LichLopHoc"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepSave(PTNK.Entities.LichLopHoc)">
            <summary>
            public virtualDeep Saves the <see cref="T:PTNK.Entities.LichLopHoc"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">LichLopHoc Object</param>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepSave(PTNK.Entities.LichLopHoc,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the LichLopHoc object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">LichLopHoc Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>LichLopHoc</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.LichLopHoc})">
            <summary>
            Deep Save the entire <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{LichLopHoc} Object</param>
        </member>
        <member name="M:PTNK.Services.LichLopHocServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.LichLopHoc},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LichLopHoc Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PTNK.Services.LichLopHocServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PTNK.Services.LichLopHocService.#ctor">
            <summary>
            Initializes a new instance of the LichLopHocService class.
            </summary>
        </member>
        <member name="T:PTNK.Services.RangBuocLopHocServiceBase">
            <summary>
             An object representation of the 'RangBuocLopHoc' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the RangBuocLopHoc.cs file instead.
             All custom implementations should be done in the <see cref="T:PTNK.Entities.RangBuocLopHoc"/> class.
             </remarks>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PTNK.Entities.RangBuocLopHoc"/> instance .
            </summary>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.CreateRangBuocLopHoc(System.String,System.String,System.Nullable{System.Byte},System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:PTNK.Entities.RangBuocLopHoc"/> instance.
            </summary>
            <param name="maRangBuocLopHoc"></param>
            <param name="maLopHoc"></param>
            <param name="thu"></param>
            <param name="tietHoc"></param>
            <param name="trangThai"></param>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Get(PTNK.Entities.RangBuocLopHocKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.GetByMaRangBuocLopHoc(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key RangBuocLopHoc$PrimaryKey index.
            </summary>
            <param name="maRangBuocLopHoc"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.RangBuocLopHoc"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.GetByMaRangBuocLopHoc(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key RangBuocLopHoc$PrimaryKey index.
            </summary>
            <param name="maRangBuocLopHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.RangBuocLopHoc"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.GetByMaLopHoc(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key RangBuocLopHoc$LopHocRangBuocLopHoc index.
            </summary>
            <param name="maLopHoc"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.GetByMaLopHoc(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key RangBuocLopHoc$LopHocRangBuocLopHoc index.
            </summary>
            <param name="maLopHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PTNK.Entities.RangBuocLopHoc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PTNK.Entities.RangBuocLopHoc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RangBuocLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RangBuocLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>RangBuocLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{RangBuocLopHoc} of <c>RangBuocLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Find(PTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>RangBuocLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>RangBuocLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>RangBuocLopHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Insert(PTNK.Entities.RangBuocLopHoc)">
            <summary>
            	public virtualmethod that Inserts a RangBuocLopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">RangBuocLopHoc object to Insert.</param>
            <remarks>After Inserting into the datasource, the RangBuocLopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            RangBuocLopHoc entity = new RangBuocLopHoc();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	RangBuocLopHocService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Insert(PTNK.Entities.TList{PTNK.Entities.RangBuocLopHoc})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RangBuocLopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>RangBuocLopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of RangBuocLopHoc.
             <code><![CDATA[
             TList<RangBuocLopHoc> list = new TList<RangBuocLopHoc>();
             RangBuocLopHoc entity = new RangBuocLopHoc();
             entity.StringProperty = "foo";
             RangBuocLopHoc entity2 = new RangBuocLopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RangBuocLopHocService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Update(PTNK.Entities.RangBuocLopHoc)">
            <summary>
            	public virtualmethod that Updates a RangBuocLopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">RangBuocLopHoc object to Update.</param>
            <remarks>After Updateing into the datasource, the RangBuocLopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            RangBuocLopHoc entity = RangBuocLopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	RangBuocLopHocService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Update(PTNK.Entities.TList{PTNK.Entities.RangBuocLopHoc})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RangBuocLopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>RangBuocLopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of RangBuocLopHoc.
             <code><![CDATA[
             TList<RangBuocLopHoc> list = new TList<RangBuocLopHoc>();
             RangBuocLopHoc entity = new RangBuocLopHoc();
             entity.StringProperty = "foo";
             RangBuocLopHoc entity2 = new RangBuocLopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RangBuocLopHocService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Save(PTNK.Entities.RangBuocLopHoc)">
            <summary>
            	public virtualmethod that Saves a RangBuocLopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">RangBuocLopHoc object to Save.</param>
            <remarks>After Saveing into the datasource, the RangBuocLopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            RangBuocLopHoc entity = RangBuocLopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	RangBuocLopHocService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Save(PTNK.Entities.TList{PTNK.Entities.RangBuocLopHoc})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RangBuocLopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>RangBuocLopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of RangBuocLopHoc.
             <code><![CDATA[
             TList<RangBuocLopHoc> list = new TList<RangBuocLopHoc>();
             RangBuocLopHoc entity = new RangBuocLopHoc();
             entity.StringProperty = "foo";
             RangBuocLopHoc entity2 = new RangBuocLopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RangBuocLopHocService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Delete(PTNK.Entities.RangBuocLopHoc)">
            <summary>
            	public virtualmethod that Deletes a RangBuocLopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">RangBuocLopHoc object to Delete.</param>
            <remarks>After Deleteing into the datasource, the RangBuocLopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            RangBuocLopHoc entity = RangBuocLopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	RangBuocLopHocService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Delete(PTNK.Entities.TList{PTNK.Entities.RangBuocLopHoc})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>RangBuocLopHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>RangBuocLopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of RangBuocLopHoc.
             <code><![CDATA[
             TList<RangBuocLopHoc> list = new TList<RangBuocLopHoc>();
             RangBuocLopHoc entity = new RangBuocLopHoc();
             entity.StringProperty = "foo";
             RangBuocLopHoc entity2 = new RangBuocLopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	RangBuocLopHocService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Delete(PTNK.Entities.RangBuocLopHocKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maRangBuocLopHoc
            </summary>
            <param name="maRangBuocLopHoc">RangBuocLopHoc pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoadByMaRangBuocLopHoc(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.RangBuocLopHoc"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maRangBuocLopHoc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RangBuocLopHoc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.RangBuocLopHoc"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoadByMaLopHoc(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maLopHoc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RangBuocLopHoc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoad(PTNK.Entities.RangBuocLopHoc)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">RangBuocLopHoc Object</param>
            <remarks>
            <seealso cref="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoad(PTNK.Entities.RangBuocLopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoad(PTNK.Entities.RangBuocLopHoc,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoad(PTNK.Entities.RangBuocLopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">RangBuocLopHoc Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoad(PTNK.Entities.RangBuocLopHoc,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PTNK.Entities.RangBuocLopHoc"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">RangBuocLopHoc Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.RangBuocLopHoc})">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoad(PTNK.Entities.RangBuocLopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.RangBuocLopHoc},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoad(PTNK.Entities.RangBuocLopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.RangBuocLopHoc},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PTNK.Entities.RangBuocLopHoc"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepSave(PTNK.Entities.RangBuocLopHoc)">
            <summary>
            public virtualDeep Saves the <see cref="T:PTNK.Entities.RangBuocLopHoc"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">RangBuocLopHoc Object</param>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepSave(PTNK.Entities.RangBuocLopHoc,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the RangBuocLopHoc object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">RangBuocLopHoc Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>RangBuocLopHoc</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.RangBuocLopHoc})">
            <summary>
            Deep Save the entire <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{RangBuocLopHoc} Object</param>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.RangBuocLopHoc},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">RangBuocLopHoc Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PTNK.Services.RangBuocLopHocServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PTNK.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:PTNK.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:PTNK.Services.ProcessorEventArgs">
            <summary>
            ProcessorEventArgs
            </summary>
        </member>
        <member name="M:PTNK.Services.ProcessorEventArgs.#ctor(PTNK.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:PTNK.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:PTNK.Services.PhuTrachService">
            <summary>
             An component type implementation of the 'PhuTrach' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PTNK.Services.PhuTrachServiceBase">
            <summary>
             An object representation of the 'PhuTrach' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PhuTrach.cs file instead.
             All custom implementations should be done in the <see cref="T:PTNK.Entities.PhuTrach"/> class.
             </remarks>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PTNK.Entities.PhuTrach"/> instance .
            </summary>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.CreatePhuTrach(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PTNK.Entities.PhuTrach"/> instance.
            </summary>
            <param name="maPhuTrach"></param>
            <param name="maGiaoVien"></param>
            <param name="maMonHoc"></param>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Get(PTNK.Entities.PhuTrachKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetByMaPhuTrach(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhuTrach$PrimaryKey index.
            </summary>
            <param name="maPhuTrach"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.PhuTrach"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetByMaPhuTrach(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhuTrach$PrimaryKey index.
            </summary>
            <param name="maPhuTrach"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.PhuTrach"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetByMaGiaoVien(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhuTrach$GiaoVienPhuTrach index.
            </summary>
            <param name="maGiaoVien"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetByMaGiaoVien(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhuTrach$GiaoVienPhuTrach index.
            </summary>
            <param name="maGiaoVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetByMaMonHoc(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhuTrach$MonHocPhuTrach index.
            </summary>
            <param name="maMonHoc"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetByMaMonHoc(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key PhuTrach$MonHocPhuTrach index.
            </summary>
            <param name="maMonHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PTNK.Entities.PhuTrach"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PTNK.Entities.PhuTrach"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PhuTrach</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PhuTrach</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PhuTrach</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{PhuTrach} of <c>PhuTrach</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Find(PTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>PhuTrach</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>PhuTrach</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PhuTrach</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Insert(PTNK.Entities.PhuTrach)">
            <summary>
            	public virtualmethod that Inserts a PhuTrach object into the datasource using a transaction.
            </summary>
            <param name="entity">PhuTrach object to Insert.</param>
            <remarks>After Inserting into the datasource, the PhuTrach object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PhuTrach entity = new PhuTrach();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PhuTrachService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Insert(PTNK.Entities.TList{PTNK.Entities.PhuTrach})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhuTrach</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PhuTrach</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PhuTrach.
             <code><![CDATA[
             TList<PhuTrach> list = new TList<PhuTrach>();
             PhuTrach entity = new PhuTrach();
             entity.StringProperty = "foo";
             PhuTrach entity2 = new PhuTrach();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhuTrachService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Update(PTNK.Entities.PhuTrach)">
            <summary>
            	public virtualmethod that Updates a PhuTrach object into the datasource using a transaction.
            </summary>
            <param name="entity">PhuTrach object to Update.</param>
            <remarks>After Updateing into the datasource, the PhuTrach object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PhuTrach entity = PhuTrachService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PhuTrachService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Update(PTNK.Entities.TList{PTNK.Entities.PhuTrach})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhuTrach</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PhuTrach</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PhuTrach.
             <code><![CDATA[
             TList<PhuTrach> list = new TList<PhuTrach>();
             PhuTrach entity = new PhuTrach();
             entity.StringProperty = "foo";
             PhuTrach entity2 = new PhuTrach();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhuTrachService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Save(PTNK.Entities.PhuTrach)">
            <summary>
            	public virtualmethod that Saves a PhuTrach object into the datasource using a transaction.
            </summary>
            <param name="entity">PhuTrach object to Save.</param>
            <remarks>After Saveing into the datasource, the PhuTrach object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            PhuTrach entity = PhuTrachService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PhuTrachService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Save(PTNK.Entities.TList{PTNK.Entities.PhuTrach})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhuTrach</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>PhuTrach</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of PhuTrach.
             <code><![CDATA[
             TList<PhuTrach> list = new TList<PhuTrach>();
             PhuTrach entity = new PhuTrach();
             entity.StringProperty = "foo";
             PhuTrach entity2 = new PhuTrach();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhuTrachService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Delete(PTNK.Entities.PhuTrach)">
            <summary>
            	public virtualmethod that Deletes a PhuTrach object into the datasource using a transaction.
            </summary>
            <param name="entity">PhuTrach object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PhuTrach object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PhuTrach entity = PhuTrachService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PhuTrachService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Delete(PTNK.Entities.TList{PTNK.Entities.PhuTrach})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhuTrach</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PhuTrach</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PhuTrach.
             <code><![CDATA[
             TList<PhuTrach> list = new TList<PhuTrach>();
             PhuTrach entity = new PhuTrach();
             entity.StringProperty = "foo";
             PhuTrach entity2 = new PhuTrach();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhuTrachService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Delete(PTNK.Entities.PhuTrachKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maPhuTrach
            </summary>
            <param name="maPhuTrach">PhuTrach pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepLoadByMaPhuTrach(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.PhuTrach"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maPhuTrach"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PhuTrach Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.PhuTrach"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepLoadByMaGiaoVien(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maGiaoVien"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PhuTrach Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepLoadByMaMonHoc(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.TList`1"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maMonHoc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PhuTrach Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.TList`1"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepLoad(PTNK.Entities.PhuTrach)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">PhuTrach Object</param>
            <remarks>
            <seealso cref="M:PTNK.Services.PhuTrachServiceBase.DeepLoad(PTNK.Entities.PhuTrach)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepLoad(PTNK.Entities.PhuTrach,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.PhuTrachServiceBase.DeepLoad(PTNK.Entities.PhuTrach)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">PhuTrach Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepLoad(PTNK.Entities.PhuTrach,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PTNK.Entities.PhuTrach"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PhuTrach Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.PhuTrach})">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.PhuTrachServiceBase.DeepLoad(PTNK.Entities.PhuTrach)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.PhuTrach},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.PhuTrachServiceBase.DeepLoad(PTNK.Entities.PhuTrach)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.PhuTrach},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PTNK.Entities.PhuTrach"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepSave(PTNK.Entities.PhuTrach)">
            <summary>
            public virtualDeep Saves the <see cref="T:PTNK.Entities.PhuTrach"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">PhuTrach Object</param>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepSave(PTNK.Entities.PhuTrach,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the PhuTrach object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">PhuTrach Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>PhuTrach</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.PhuTrach})">
            <summary>
            Deep Save the entire <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{PhuTrach} Object</param>
        </member>
        <member name="M:PTNK.Services.PhuTrachServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.PhuTrach},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">PhuTrach Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PTNK.Services.PhuTrachServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PTNK.Services.PhuTrachService.#ctor">
            <summary>
            Initializes a new instance of the PhuTrachService class.
            </summary>
        </member>
        <member name="T:PTNK.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:PTNK.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:PTNK.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:PTNK.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:PTNK.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:PTNK.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:PTNK.Services.SecurityContext`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:PTNK.Services.SecurityContext`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:PTNK.Services.SecurityContext`1.Identity">
            <summary>
            The Current IIdentity .
            </summary>
        </member>
        <member name="P:PTNK.Services.SecurityContext`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:PTNK.Services.SecurityContext`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:PTNK.Services.SecurityContext`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:PTNK.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:PTNK.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:PTNK.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:PTNK.Services.ContextView`2.#ctor(`0,PTNK.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:PTNK.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:PTNK.Services.ContextView`2.#ctor(`0,PTNK.Services.SecurityContext{`0},PTNK.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:PTNK.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:PTNK.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:PTNK.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:PTNK.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:PTNK.Services.LopHocService">
            <summary>
             An component type implementation of the 'LopHoc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PTNK.Services.LopHocService.#ctor">
            <summary>
            Initializes a new instance of the LopHocService class.
            </summary>
        </member>
        <member name="T:PTNK.Services.RangBuocLopHocService">
            <summary>
             An component type implementation of the 'RangBuocLopHoc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PTNK.Services.RangBuocLopHocService.#ctor">
            <summary>
            Initializes a new instance of the RangBuocLopHocService class.
            </summary>
        </member>
        <member name="T:PTNK.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:PTNK.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:PTNK.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.Copy(PTNK.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:PTNK.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:PTNK.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="P:PTNK.Services.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:PTNK.Services.ConnectionScope.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="P:PTNK.Services.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:PTNK.Services.ConnectionScope.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.Complete">
             <summary>
             Completes this unit of work instance of the current transaction.  
             Commits the transaction,  Cleans up Connection, 
             Disposes of TransactionManager which performs unmanaged cleanup.
             </summary>
             <example>
                 try
                 {
                     using (ConnectionScope.CreateTransaction())
                     {
                         // or use ConnectionScope.ValidateOrCreateTransaction(true) 
                         // if you prefer to dynamically check for an existing transaction
                         AccountService.Save(account);
                         LedgerService.Save(generalEntry);
             
                         //Commit and Cleanup your transaction
                         bool result = ConnectionScope.Complete();
                     }
                 }
                 catch (Exception ex)
                 {
                     // when creating the transaction via the 
                     // using (ConnectionScope.CreateTransaction()) construct, 
                     // there's no need to rollback, handled by 
                     // ConnectionScope Dispose Method.
             
                     Logger.Write(ex.Message);
                 }
            </example>
        </member>
        <member name="M:PTNK.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:PTNK.Services.ConnectionScope.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:PTNK.Services.ConnectionScope.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:PTNK.Services.ConnectionScope.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:PTNK.Services.ConnectionScope.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:PTNK.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:PTNK.Services.ConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:PTNK.Services.ConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:PTNK.Services.ConnectionScope.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:PTNK.Services.ConnectionScope.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:PTNK.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:PTNK.Services.MonHocService">
            <summary>
             An component type implementation of the 'MonHoc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PTNK.Services.MonHocServiceBase">
            <summary>
             An object representation of the 'MonHoc' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the MonHoc.cs file instead.
             All custom implementations should be done in the <see cref="T:PTNK.Entities.MonHoc"/> class.
             </remarks>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PTNK.Entities.MonHoc"/> instance .
            </summary>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.CreateMonHoc(System.String,System.String,System.Nullable{System.Byte},System.Nullable{System.Byte})">
            <summary>
             A simple factory method to create a new <see cref="T:PTNK.Entities.MonHoc"/> instance.
            </summary>
            <param name="maMonHoc"></param>
            <param name="tenMonHoc"></param>
            <param name="quiDinhSoTietHocLienTiepToiThieu"></param>
            <param name="quiDinhSoTietHocLienTiepToiDa"></param>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Get(PTNK.Entities.MonHocKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.GetByMaMonHoc(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key MonHoc$PrimaryKey index.
            </summary>
            <param name="maMonHoc"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.MonHoc"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.GetByMaMonHoc(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key MonHoc$PrimaryKey index.
            </summary>
            <param name="maMonHoc"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.MonHoc"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PTNK.Entities.MonHoc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PTNK.Entities.MonHoc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{MonHoc} of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Find(PTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Insert(PTNK.Entities.MonHoc)">
            <summary>
            	public virtualmethod that Inserts a MonHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">MonHoc object to Insert.</param>
            <remarks>After Inserting into the datasource, the MonHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            MonHoc entity = new MonHoc();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	MonHocService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Insert(PTNK.Entities.TList{PTNK.Entities.MonHoc})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>MonHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of MonHoc.
             <code><![CDATA[
             TList<MonHoc> list = new TList<MonHoc>();
             MonHoc entity = new MonHoc();
             entity.StringProperty = "foo";
             MonHoc entity2 = new MonHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonHocService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Update(PTNK.Entities.MonHoc)">
            <summary>
            	public virtualmethod that Updates a MonHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">MonHoc object to Update.</param>
            <remarks>After Updateing into the datasource, the MonHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            MonHoc entity = MonHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	MonHocService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Update(PTNK.Entities.TList{PTNK.Entities.MonHoc})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>MonHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of MonHoc.
             <code><![CDATA[
             TList<MonHoc> list = new TList<MonHoc>();
             MonHoc entity = new MonHoc();
             entity.StringProperty = "foo";
             MonHoc entity2 = new MonHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonHocService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Save(PTNK.Entities.MonHoc)">
            <summary>
            	public virtualmethod that Saves a MonHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">MonHoc object to Save.</param>
            <remarks>After Saveing into the datasource, the MonHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            MonHoc entity = MonHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	MonHocService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Save(PTNK.Entities.TList{PTNK.Entities.MonHoc})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>MonHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of MonHoc.
             <code><![CDATA[
             TList<MonHoc> list = new TList<MonHoc>();
             MonHoc entity = new MonHoc();
             entity.StringProperty = "foo";
             MonHoc entity2 = new MonHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonHocService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Delete(PTNK.Entities.MonHoc)">
            <summary>
            	public virtualmethod that Deletes a MonHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">MonHoc object to Delete.</param>
            <remarks>After Deleteing into the datasource, the MonHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            MonHoc entity = MonHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	MonHocService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Delete(PTNK.Entities.TList{PTNK.Entities.MonHoc})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonHoc</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>MonHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of MonHoc.
             <code><![CDATA[
             TList<MonHoc> list = new TList<MonHoc>();
             MonHoc entity = new MonHoc();
             entity.StringProperty = "foo";
             MonHoc entity2 = new MonHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonHocService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Delete(PTNK.Entities.MonHocKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maMonHoc
            </summary>
            <param name="maMonHoc">MonHoc pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.DeepLoadByMaMonHoc(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.MonHoc"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maMonHoc"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MonHoc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.MonHoc"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.DeepLoad(PTNK.Entities.MonHoc)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">MonHoc Object</param>
            <remarks>
            <seealso cref="M:PTNK.Services.MonHocServiceBase.DeepLoad(PTNK.Entities.MonHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.DeepLoad(PTNK.Entities.MonHoc,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.MonHocServiceBase.DeepLoad(PTNK.Entities.MonHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">MonHoc Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.DeepLoad(PTNK.Entities.MonHoc,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PTNK.Entities.MonHoc"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MonHoc Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.MonHoc})">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.MonHocServiceBase.DeepLoad(PTNK.Entities.MonHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.MonHoc},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.MonHocServiceBase.DeepLoad(PTNK.Entities.MonHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.MonHoc},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PTNK.Entities.MonHoc"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.DeepSave(PTNK.Entities.MonHoc)">
            <summary>
            public virtualDeep Saves the <see cref="T:PTNK.Entities.MonHoc"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">MonHoc Object</param>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.DeepSave(PTNK.Entities.MonHoc,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the MonHoc object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">MonHoc Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>MonHoc</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.MonHoc})">
            <summary>
            Deep Save the entire <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{MonHoc} Object</param>
        </member>
        <member name="M:PTNK.Services.MonHocServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.MonHoc},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">MonHoc Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PTNK.Services.MonHocServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PTNK.Services.MonHocService.#ctor">
            <summary>
            Initializes a new instance of the MonHocService class.
            </summary>
        </member>
        <member name="T:PTNK.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:PTNK.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:PTNK.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:PTNK.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:PTNK.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:PTNK.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:PTNK.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:PTNK.Services.DomainUtil.GetErrorsFromList``1(PTNK.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:PTNK.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:PTNK.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:PTNK.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:PTNK.Services.GiaoVienService">
            <summary>
             An component type implementation of the 'GiaoVien' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PTNK.Services.GiaoVienServiceBase">
            <summary>
             An object representation of the 'GiaoVien' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the GiaoVien.cs file instead.
             All custom implementations should be done in the <see cref="T:PTNK.Entities.GiaoVien"/> class.
             </remarks>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PTNK.Entities.GiaoVien"/> instance .
            </summary>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.CreateGiaoVien(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PTNK.Entities.GiaoVien"/> instance.
            </summary>
            <param name="maGiaoVien"></param>
            <param name="hoTenGiaoVien"></param>
            <param name="tenTat"></param>
            <param name="diaChi"></param>
            <param name="dienThoai"></param>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Get(PTNK.Entities.GiaoVienKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.GetByMaGiaoVien(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key GiaoVien$PrimaryKey index.
            </summary>
            <param name="maGiaoVien"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.GiaoVien"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.GetByMaGiaoVien(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key GiaoVien$PrimaryKey index.
            </summary>
            <param name="maGiaoVien"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.GiaoVien"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PTNK.Entities.GiaoVien"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PTNK.Entities.GiaoVien"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>GiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{GiaoVien} of <c>GiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Find(PTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>GiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>GiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>GiaoVien</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Insert(PTNK.Entities.GiaoVien)">
            <summary>
            	public virtualmethod that Inserts a GiaoVien object into the datasource using a transaction.
            </summary>
            <param name="entity">GiaoVien object to Insert.</param>
            <remarks>After Inserting into the datasource, the GiaoVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            GiaoVien entity = new GiaoVien();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	GiaoVienService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Insert(PTNK.Entities.TList{PTNK.Entities.GiaoVien})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiaoVien</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>GiaoVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of GiaoVien.
             <code><![CDATA[
             TList<GiaoVien> list = new TList<GiaoVien>();
             GiaoVien entity = new GiaoVien();
             entity.StringProperty = "foo";
             GiaoVien entity2 = new GiaoVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiaoVienService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Update(PTNK.Entities.GiaoVien)">
            <summary>
            	public virtualmethod that Updates a GiaoVien object into the datasource using a transaction.
            </summary>
            <param name="entity">GiaoVien object to Update.</param>
            <remarks>After Updateing into the datasource, the GiaoVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            GiaoVien entity = GiaoVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	GiaoVienService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Update(PTNK.Entities.TList{PTNK.Entities.GiaoVien})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiaoVien</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>GiaoVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of GiaoVien.
             <code><![CDATA[
             TList<GiaoVien> list = new TList<GiaoVien>();
             GiaoVien entity = new GiaoVien();
             entity.StringProperty = "foo";
             GiaoVien entity2 = new GiaoVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiaoVienService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Save(PTNK.Entities.GiaoVien)">
            <summary>
            	public virtualmethod that Saves a GiaoVien object into the datasource using a transaction.
            </summary>
            <param name="entity">GiaoVien object to Save.</param>
            <remarks>After Saveing into the datasource, the GiaoVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            GiaoVien entity = GiaoVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	GiaoVienService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Save(PTNK.Entities.TList{PTNK.Entities.GiaoVien})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiaoVien</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>GiaoVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of GiaoVien.
             <code><![CDATA[
             TList<GiaoVien> list = new TList<GiaoVien>();
             GiaoVien entity = new GiaoVien();
             entity.StringProperty = "foo";
             GiaoVien entity2 = new GiaoVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiaoVienService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Delete(PTNK.Entities.GiaoVien)">
            <summary>
            	public virtualmethod that Deletes a GiaoVien object into the datasource using a transaction.
            </summary>
            <param name="entity">GiaoVien object to Delete.</param>
            <remarks>After Deleteing into the datasource, the GiaoVien object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            GiaoVien entity = GiaoVienService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	GiaoVienService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Delete(PTNK.Entities.TList{PTNK.Entities.GiaoVien})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>GiaoVien</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>GiaoVien</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of GiaoVien.
             <code><![CDATA[
             TList<GiaoVien> list = new TList<GiaoVien>();
             GiaoVien entity = new GiaoVien();
             entity.StringProperty = "foo";
             GiaoVien entity2 = new GiaoVien();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	GiaoVienService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Delete(PTNK.Entities.GiaoVienKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maGiaoVien
            </summary>
            <param name="maGiaoVien">GiaoVien pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.DeepLoadByMaGiaoVien(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.GiaoVien"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maGiaoVien"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiaoVien Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.GiaoVien"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.DeepLoad(PTNK.Entities.GiaoVien)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">GiaoVien Object</param>
            <remarks>
            <seealso cref="M:PTNK.Services.GiaoVienServiceBase.DeepLoad(PTNK.Entities.GiaoVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.DeepLoad(PTNK.Entities.GiaoVien,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.GiaoVienServiceBase.DeepLoad(PTNK.Entities.GiaoVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">GiaoVien Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.DeepLoad(PTNK.Entities.GiaoVien,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PTNK.Entities.GiaoVien"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">GiaoVien Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.GiaoVien})">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.GiaoVienServiceBase.DeepLoad(PTNK.Entities.GiaoVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.GiaoVien},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.GiaoVienServiceBase.DeepLoad(PTNK.Entities.GiaoVien)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.GiaoVien},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PTNK.Entities.GiaoVien"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.DeepSave(PTNK.Entities.GiaoVien)">
            <summary>
            public virtualDeep Saves the <see cref="T:PTNK.Entities.GiaoVien"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">GiaoVien Object</param>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.DeepSave(PTNK.Entities.GiaoVien,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the GiaoVien object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">GiaoVien Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>GiaoVien</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.GiaoVien})">
            <summary>
            Deep Save the entire <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{GiaoVien} Object</param>
        </member>
        <member name="M:PTNK.Services.GiaoVienServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.GiaoVien},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">GiaoVien Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PTNK.Services.GiaoVienServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PTNK.Services.GiaoVienService.#ctor">
            <summary>
            Initializes a new instance of the GiaoVienService class.
            </summary>
        </member>
        <member name="T:PTNK.Services.KhoiServiceBase">
            <summary>
             An object representation of the 'Khoi' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Khoi.cs file instead.
             All custom implementations should be done in the <see cref="T:PTNK.Entities.Khoi"/> class.
             </remarks>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PTNK.Entities.Khoi"/> instance .
            </summary>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.CreateKhoi(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:PTNK.Entities.Khoi"/> instance.
            </summary>
            <param name="maKhoi"></param>
            <param name="tenKhoi"></param>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Get(PTNK.Entities.KhoiKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.GetByMaKhoi(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key Khoi$PrimaryKey index.
            </summary>
            <param name="maKhoi"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.Khoi"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.GetByMaKhoi(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key Khoi$PrimaryKey index.
            </summary>
            <param name="maKhoi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.Khoi"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PTNK.Entities.Khoi"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PTNK.Entities.Khoi"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Khoi} of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Find(PTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Insert(PTNK.Entities.Khoi)">
            <summary>
            	public virtualmethod that Inserts a Khoi object into the datasource using a transaction.
            </summary>
            <param name="entity">Khoi object to Insert.</param>
            <remarks>After Inserting into the datasource, the Khoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Khoi entity = new Khoi();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	KhoiService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Insert(PTNK.Entities.TList{PTNK.Entities.Khoi})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Khoi</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Khoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Khoi.
             <code><![CDATA[
             TList<Khoi> list = new TList<Khoi>();
             Khoi entity = new Khoi();
             entity.StringProperty = "foo";
             Khoi entity2 = new Khoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Update(PTNK.Entities.Khoi)">
            <summary>
            	public virtualmethod that Updates a Khoi object into the datasource using a transaction.
            </summary>
            <param name="entity">Khoi object to Update.</param>
            <remarks>After Updateing into the datasource, the Khoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Khoi entity = KhoiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	KhoiService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Update(PTNK.Entities.TList{PTNK.Entities.Khoi})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Khoi</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Khoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Khoi.
             <code><![CDATA[
             TList<Khoi> list = new TList<Khoi>();
             Khoi entity = new Khoi();
             entity.StringProperty = "foo";
             Khoi entity2 = new Khoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Save(PTNK.Entities.Khoi)">
            <summary>
            	public virtualmethod that Saves a Khoi object into the datasource using a transaction.
            </summary>
            <param name="entity">Khoi object to Save.</param>
            <remarks>After Saveing into the datasource, the Khoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Khoi entity = KhoiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	KhoiService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Save(PTNK.Entities.TList{PTNK.Entities.Khoi})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Khoi</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Khoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Khoi.
             <code><![CDATA[
             TList<Khoi> list = new TList<Khoi>();
             Khoi entity = new Khoi();
             entity.StringProperty = "foo";
             Khoi entity2 = new Khoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Delete(PTNK.Entities.Khoi)">
            <summary>
            	public virtualmethod that Deletes a Khoi object into the datasource using a transaction.
            </summary>
            <param name="entity">Khoi object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Khoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Khoi entity = KhoiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	KhoiService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Delete(PTNK.Entities.TList{PTNK.Entities.Khoi})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Khoi</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Khoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Khoi.
             <code><![CDATA[
             TList<Khoi> list = new TList<Khoi>();
             Khoi entity = new Khoi();
             entity.StringProperty = "foo";
             Khoi entity2 = new Khoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Delete(PTNK.Entities.KhoiKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maKhoi
            </summary>
            <param name="maKhoi">Khoi pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.DeepLoadByMaKhoi(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.Khoi"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maKhoi"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Khoi Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.Khoi"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.DeepLoad(PTNK.Entities.Khoi)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Khoi Object</param>
            <remarks>
            <seealso cref="M:PTNK.Services.KhoiServiceBase.DeepLoad(PTNK.Entities.Khoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.DeepLoad(PTNK.Entities.Khoi,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.KhoiServiceBase.DeepLoad(PTNK.Entities.Khoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Khoi Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.DeepLoad(PTNK.Entities.Khoi,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PTNK.Entities.Khoi"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Khoi Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.Khoi})">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.KhoiServiceBase.DeepLoad(PTNK.Entities.Khoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.Khoi},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.KhoiServiceBase.DeepLoad(PTNK.Entities.Khoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.Khoi},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PTNK.Entities.Khoi"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.DeepSave(PTNK.Entities.Khoi)">
            <summary>
            public virtualDeep Saves the <see cref="T:PTNK.Entities.Khoi"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Khoi Object</param>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.DeepSave(PTNK.Entities.Khoi,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Khoi object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Khoi Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Khoi</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.Khoi})">
            <summary>
            Deep Save the entire <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Khoi} Object</param>
        </member>
        <member name="M:PTNK.Services.KhoiServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.Khoi},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Khoi Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PTNK.Services.KhoiServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:PTNK.Services.KhoiService">
            <summary>
             An component type implementation of the 'Khoi' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:PTNK.Services.KhoiService.#ctor">
            <summary>
            Initializes a new instance of the KhoiService class.
            </summary>
        </member>
        <member name="T:PTNK.Services.ThoiKhoaBieuService">
            <summary>
             An component type implementation of the 'ThoiKhoaBieu' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:PTNK.Services.ThoiKhoaBieuServiceBase">
            <summary>
             An object representation of the 'ThoiKhoaBieu' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ThoiKhoaBieu.cs file instead.
             All custom implementations should be done in the <see cref="T:PTNK.Entities.ThoiKhoaBieu"/> class.
             </remarks>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:PTNK.Entities.ThoiKhoaBieu"/> instance .
            </summary>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.CreateThoiKhoaBieu(System.String,System.String,System.String,System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
             A simple factory method to create a new <see cref="T:PTNK.Entities.ThoiKhoaBieu"/> instance.
            </summary>
            <param name="maThoiKhoaBieu"></param>
            <param name="maPhanCong"></param>
            <param name="maLopHoc"></param>
            <param name="phuTrach"></param>
            <param name="thu"></param>
            <param name="tietHoc"></param>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Get(PTNK.Entities.ThoiKhoaBieuKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.GetByMaThoiKhoaBieu(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key ThoiKhoaBieu$PrimaryKey index.
            </summary>
            <param name="maThoiKhoaBieu"></param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.ThoiKhoaBieu"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.GetByMaThoiKhoaBieu(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:PTNK.Entities.TList`1"/> from the datasource based on the primary key ThoiKhoaBieu$PrimaryKey index.
            </summary>
            <param name="maThoiKhoaBieu"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.ThoiKhoaBieu"/> class.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:PTNK.Entities.ThoiKhoaBieu"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:PTNK.Entities.ThoiKhoaBieu"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:PTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThoiKhoaBieu</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:PTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThoiKhoaBieu</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:PTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ThoiKhoaBieu</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ThoiKhoaBieu} of <c>ThoiKhoaBieu</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Find(PTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ThoiKhoaBieu</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ThoiKhoaBieu</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Find(PTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:PTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ThoiKhoaBieu</c> objects.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Insert(PTNK.Entities.ThoiKhoaBieu)">
            <summary>
            	public virtualmethod that Inserts a ThoiKhoaBieu object into the datasource using a transaction.
            </summary>
            <param name="entity">ThoiKhoaBieu object to Insert.</param>
            <remarks>After Inserting into the datasource, the ThoiKhoaBieu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ThoiKhoaBieu entity = new ThoiKhoaBieu();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ThoiKhoaBieuService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Insert(PTNK.Entities.TList{PTNK.Entities.ThoiKhoaBieu})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThoiKhoaBieu</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ThoiKhoaBieu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ThoiKhoaBieu.
             <code><![CDATA[
             TList<ThoiKhoaBieu> list = new TList<ThoiKhoaBieu>();
             ThoiKhoaBieu entity = new ThoiKhoaBieu();
             entity.StringProperty = "foo";
             ThoiKhoaBieu entity2 = new ThoiKhoaBieu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThoiKhoaBieuService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Update(PTNK.Entities.ThoiKhoaBieu)">
            <summary>
            	public virtualmethod that Updates a ThoiKhoaBieu object into the datasource using a transaction.
            </summary>
            <param name="entity">ThoiKhoaBieu object to Update.</param>
            <remarks>After Updateing into the datasource, the ThoiKhoaBieu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ThoiKhoaBieu entity = ThoiKhoaBieuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ThoiKhoaBieuService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Update(PTNK.Entities.TList{PTNK.Entities.ThoiKhoaBieu})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThoiKhoaBieu</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ThoiKhoaBieu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ThoiKhoaBieu.
             <code><![CDATA[
             TList<ThoiKhoaBieu> list = new TList<ThoiKhoaBieu>();
             ThoiKhoaBieu entity = new ThoiKhoaBieu();
             entity.StringProperty = "foo";
             ThoiKhoaBieu entity2 = new ThoiKhoaBieu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThoiKhoaBieuService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Save(PTNK.Entities.ThoiKhoaBieu)">
            <summary>
            	public virtualmethod that Saves a ThoiKhoaBieu object into the datasource using a transaction.
            </summary>
            <param name="entity">ThoiKhoaBieu object to Save.</param>
            <remarks>After Saveing into the datasource, the ThoiKhoaBieu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ThoiKhoaBieu entity = ThoiKhoaBieuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ThoiKhoaBieuService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Save(PTNK.Entities.TList{PTNK.Entities.ThoiKhoaBieu})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThoiKhoaBieu</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ThoiKhoaBieu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ThoiKhoaBieu.
             <code><![CDATA[
             TList<ThoiKhoaBieu> list = new TList<ThoiKhoaBieu>();
             ThoiKhoaBieu entity = new ThoiKhoaBieu();
             entity.StringProperty = "foo";
             ThoiKhoaBieu entity2 = new ThoiKhoaBieu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThoiKhoaBieuService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Delete(PTNK.Entities.ThoiKhoaBieu)">
            <summary>
            	public virtualmethod that Deletes a ThoiKhoaBieu object into the datasource using a transaction.
            </summary>
            <param name="entity">ThoiKhoaBieu object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ThoiKhoaBieu object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ThoiKhoaBieu entity = ThoiKhoaBieuService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ThoiKhoaBieuService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Delete(PTNK.Entities.TList{PTNK.Entities.ThoiKhoaBieu})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:PTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ThoiKhoaBieu</c> objects in a <see cref="T:PTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ThoiKhoaBieu</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ThoiKhoaBieu.
             <code><![CDATA[
             TList<ThoiKhoaBieu> list = new TList<ThoiKhoaBieu>();
             ThoiKhoaBieu entity = new ThoiKhoaBieu();
             entity.StringProperty = "foo";
             ThoiKhoaBieu entity2 = new ThoiKhoaBieu();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ThoiKhoaBieuService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Delete(PTNK.Entities.ThoiKhoaBieuKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maThoiKhoaBieu
            </summary>
            <param name="maThoiKhoaBieu">ThoiKhoaBieu pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepLoadByMaThoiKhoaBieu(System.String,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:PTNK.Entities.ThoiKhoaBieu"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maThoiKhoaBieu"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThoiKhoaBieu Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:PTNK.Entities.ThoiKhoaBieu"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepLoad(PTNK.Entities.ThoiKhoaBieu)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ThoiKhoaBieu Object</param>
            <remarks>
            <seealso cref="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepLoad(PTNK.Entities.ThoiKhoaBieu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepLoad(PTNK.Entities.ThoiKhoaBieu,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepLoad(PTNK.Entities.ThoiKhoaBieu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ThoiKhoaBieu Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepLoad(PTNK.Entities.ThoiKhoaBieu,System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:PTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:PTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:PTNK.Entities.ThoiKhoaBieu"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ThoiKhoaBieu Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.ThoiKhoaBieu})">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepLoad(PTNK.Entities.ThoiKhoaBieu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.ThoiKhoaBieu},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:PTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepLoad(PTNK.Entities.ThoiKhoaBieu)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:PTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepLoad(PTNK.Entities.TList{PTNK.Entities.ThoiKhoaBieu},System.Boolean,PTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:PTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:PTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:PTNK.Entities.ThoiKhoaBieu"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepSave(PTNK.Entities.ThoiKhoaBieu)">
            <summary>
            public virtualDeep Saves the <see cref="T:PTNK.Entities.ThoiKhoaBieu"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ThoiKhoaBieu Object</param>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepSave(PTNK.Entities.ThoiKhoaBieu,PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ThoiKhoaBieu object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ThoiKhoaBieu Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ThoiKhoaBieu</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.ThoiKhoaBieu})">
            <summary>
            Deep Save the entire <see cref="T:PTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ThoiKhoaBieu} Object</param>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuServiceBase.DeepSave(PTNK.Entities.TList{PTNK.Entities.ThoiKhoaBieu},PTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:PTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:PTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ThoiKhoaBieu Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:PTNK.Services.ThoiKhoaBieuServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:PTNK.Services.ThoiKhoaBieuService.#ctor">
            <summary>
            Initializes a new instance of the ThoiKhoaBieuService class.
            </summary>
        </member>
    </members>
</doc>
