
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file QuanLy.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace QuanLyHocSinhPTNK.Entities
{
	///<summary>
	/// An object representation of the 'QuanLy' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class QuanLyBase : EntityBase, QuanLyHocSinhPTNK.Entities.IQuanLy, IEntityId<QuanLyKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private QuanLyEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private QuanLyEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private QuanLyEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<QuanLy> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event QuanLyEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event QuanLyEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="QuanLyBase"/> instance.
		///</summary>
		public QuanLyBase()
		{
			this.entityData = new QuanLyEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="QuanLyBase"/> instance.
		///</summary>
		///<param name="maQuanLy"></param>
		///<param name="hoTenQuanLy"></param>
		///<param name="password"></param>
		///<param name="maChucDanh"></param>
		///<param name="maPhongBan"></param>
		public QuanLyBase(System.String maQuanLy, System.String hoTenQuanLy, System.String password, 
			System.String maChucDanh, System.String maPhongBan)
		{
			this.entityData = new QuanLyEntityData();
			this.backupData = null;

			this.MaQuanLy = maQuanLy;
			this.HoTenQuanLy = hoTenQuanLy;
			this.Password = password;
			this.MaChucDanh = maChucDanh;
			this.MaPhongBan = maPhongBan;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="QuanLy"/> instance.
		///</summary>
		///<param name="maQuanLy"></param>
		///<param name="hoTenQuanLy"></param>
		///<param name="password"></param>
		///<param name="maChucDanh"></param>
		///<param name="maPhongBan"></param>
		public static QuanLy CreateQuanLy(System.String maQuanLy, System.String hoTenQuanLy, System.String password, 
			System.String maChucDanh, System.String maPhongBan)
		{
			QuanLy newQuanLy = new QuanLy();
			newQuanLy.MaQuanLy = maQuanLy;
			newQuanLy.HoTenQuanLy = hoTenQuanLy;
			newQuanLy.Password = password;
			newQuanLy.MaChucDanh = maChucDanh;
			newQuanLy.MaPhongBan = maPhongBan;
			return newQuanLy;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 10)]
		public virtual System.String MaQuanLy
		{
			get
			{
				return this.entityData.MaQuanLy; 
			}
			
			set
			{
				if (this.entityData.MaQuanLy == value)
					return;
					
				OnColumnChanging(QuanLyColumn.MaQuanLy, this.entityData.MaQuanLy);
				this.entityData.MaQuanLy = value;
				this.EntityId.MaQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuanLyColumn.MaQuanLy, this.entityData.MaQuanLy);
				OnPropertyChanged("MaQuanLy");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MaQuanLy property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MaQuanLy property.</remarks>
		/// <value>This type is nchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalMaQuanLy
		{
			get { return this.entityData.OriginalMaQuanLy; }
			set { this.entityData.OriginalMaQuanLy = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the HoTenQuanLy property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String HoTenQuanLy
		{
			get
			{
				return this.entityData.HoTenQuanLy; 
			}
			
			set
			{
				if (this.entityData.HoTenQuanLy == value)
					return;
					
				OnColumnChanging(QuanLyColumn.HoTenQuanLy, this.entityData.HoTenQuanLy);
				this.entityData.HoTenQuanLy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuanLyColumn.HoTenQuanLy, this.entityData.HoTenQuanLy);
				OnPropertyChanged("HoTenQuanLy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
					
				OnColumnChanging(QuanLyColumn.Password, this.entityData.Password);
				this.entityData.Password = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuanLyColumn.Password, this.entityData.Password);
				OnPropertyChanged("Password");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaChucDanh property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String MaChucDanh
		{
			get
			{
				return this.entityData.MaChucDanh; 
			}
			
			set
			{
				if (this.entityData.MaChucDanh == value)
					return;
					
				OnColumnChanging(QuanLyColumn.MaChucDanh, this.entityData.MaChucDanh);
				this.entityData.MaChucDanh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuanLyColumn.MaChucDanh, this.entityData.MaChucDanh);
				OnPropertyChanged("MaChucDanh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaPhongBan property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String MaPhongBan
		{
			get
			{
				return this.entityData.MaPhongBan; 
			}
			
			set
			{
				if (this.entityData.MaPhongBan == value)
					return;
					
				OnColumnChanging(QuanLyColumn.MaPhongBan, this.entityData.MaPhongBan);
				this.entityData.MaPhongBan = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(QuanLyColumn.MaPhongBan, this.entityData.MaPhongBan);
				OnPropertyChanged("MaPhongBan");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="ChucDanh"/>.
		/// </summary>
		/// <value>The source ChucDanh for MaChucDanh.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ChucDanh MaChucDanhSource
      	{
            get { return entityData.MaChucDanhSource; }
            set { entityData.MaChucDanhSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="PhongBan"/>.
		/// </summary>
		/// <value>The source PhongBan for MaPhongBan.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual PhongBan MaPhongBanSource
      	{
            get { return entityData.MaPhongBanSource; }
            set { entityData.MaPhongBanSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("MaQuanLy", "Ma Quan Ly"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MaQuanLy", "Ma Quan Ly", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("HoTenQuanLy", "Ho Ten Quan Ly"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("HoTenQuanLy", "Ho Ten Quan Ly", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Password", "Password"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Password", "Password", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("MaChucDanh", "Ma Chuc Danh"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MaChucDanh", "Ma Chuc Danh", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("MaPhongBan", "Ma Phong Ban"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MaPhongBan", "Ma Phong Ban", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "QuanLy"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaQuanLy", "HoTenQuanLy", "Password", "MaChucDanh", "MaPhongBan"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as QuanLyEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (QuanLy) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<QuanLy>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as QuanLy);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed QuanLy Entity 
		///</summary>
		public virtual QuanLy Copy()
		{
			//shallow copy entity
			QuanLy copy = new QuanLy();
			copy.SuppressEntityEvents = true;
			copy.MaQuanLy = this.MaQuanLy;
			copy.OriginalMaQuanLy = this.OriginalMaQuanLy;
			copy.HoTenQuanLy = this.HoTenQuanLy;
			copy.Password = this.Password;
			copy.MaChucDanh = this.MaChucDanh;
			copy.MaPhongBan = this.MaPhongBan;
			
			copy.MaChucDanhSource = MakeCopyOf(this.MaChucDanhSource) as ChucDanh;
			copy.MaPhongBanSource = MakeCopyOf(this.MaPhongBanSource) as PhongBan;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed QuanLy Entity which is a deep copy of the current entity.
		///</summary>
		public virtual QuanLy DeepCopy()
		{
			return EntityHelper.Clone<QuanLy>(this as QuanLy);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as QuanLyEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as QuanLyEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(QuanLyColumn column)
		{
			switch(column)
			{
					case QuanLyColumn.MaQuanLy:
					return entityData.MaQuanLy != _originalData.MaQuanLy;
					case QuanLyColumn.HoTenQuanLy:
					return entityData.HoTenQuanLy != _originalData.HoTenQuanLy;
					case QuanLyColumn.Password:
					return entityData.Password != _originalData.Password;
					case QuanLyColumn.MaChucDanh:
					return entityData.MaChucDanh != _originalData.MaChucDanh;
					case QuanLyColumn.MaPhongBan:
					return entityData.MaPhongBan != _originalData.MaPhongBan;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaQuanLy != _originalData.MaQuanLy;
			result = result || entityData.HoTenQuanLy != _originalData.HoTenQuanLy;
			result = result || entityData.Password != _originalData.Password;
			result = result || entityData.MaChucDanh != _originalData.MaChucDanh;
			result = result || entityData.MaPhongBan != _originalData.MaPhongBan;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="QuanLyBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is QuanLyBase)
				return Equals(this, (QuanLyBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="QuanLyBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaQuanLy.GetHashCode() ^ 
					this.HoTenQuanLy.GetHashCode() ^ 
					this.Password.GetHashCode() ^ 
					this.MaChucDanh.GetHashCode() ^ 
					this.MaPhongBan.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="QuanLyBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(QuanLyBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="QuanLyBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="QuanLyBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="QuanLyBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(QuanLyBase Object1, QuanLyBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaQuanLy != Object2.MaQuanLy)
				equal = false;
			if (Object1.HoTenQuanLy != Object2.HoTenQuanLy)
				equal = false;
			if (Object1.Password != Object2.Password)
				equal = false;
			if (Object1.MaChucDanh != Object2.MaChucDanh)
				equal = false;
			if (Object1.MaPhongBan != Object2.MaPhongBan)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((QuanLyBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static QuanLyComparer GetComparer()
        {
            return new QuanLyComparer();
        }
        */

        // Comparer delegates back to QuanLy
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(QuanLy rhs, QuanLyColumn which)
        {
            switch (which)
            {
            	
            	
            	case QuanLyColumn.MaQuanLy:
            		return this.MaQuanLy.CompareTo(rhs.MaQuanLy);
            		
            		                 
            	
            	
            	case QuanLyColumn.HoTenQuanLy:
            		return this.HoTenQuanLy.CompareTo(rhs.HoTenQuanLy);
            		
            		                 
            	
            	
            	case QuanLyColumn.Password:
            		return this.Password.CompareTo(rhs.Password);
            		
            		                 
            	
            	
            	case QuanLyColumn.MaChucDanh:
            		return this.MaChucDanh.CompareTo(rhs.MaChucDanh);
            		
            		                 
            	
            	
            	case QuanLyColumn.MaPhongBan:
            		return this.MaPhongBan.CompareTo(rhs.MaPhongBan);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<QuanLyKey> Members
		
		// member variable for the EntityId property
		private QuanLyKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual QuanLyKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new QuanLyKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("QuanLy")
					.Append("|").Append( this.MaQuanLy.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{6}{5}- MaQuanLy: {0}{5}- HoTenQuanLy: {1}{5}- Password: {2}{5}- MaChucDanh: {3}{5}- MaPhongBan: {4}{5}", 
				this.MaQuanLy,
				this.HoTenQuanLy,
				this.Password,
				this.MaChucDanh,
				this.MaPhongBan,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'QuanLy' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class QuanLyEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// MaQuanLy : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "QuanLy"</remarks>
			public System.String MaQuanLy;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalMaQuanLy;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// HoTenQuanLy : 
		/// </summary>
		public System.String		  HoTenQuanLy = string.Empty;
		
		/// <summary>
		/// Password : 
		/// </summary>
		public System.String		  Password = string.Empty;
		
		/// <summary>
		/// MaChucDanh : 
		/// </summary>
		public System.String		  MaChucDanh = string.Empty;
		
		/// <summary>
		/// MaPhongBan : 
		/// </summary>
		public System.String		  MaPhongBan = string.Empty;
		#endregion
			
		#region Source Foreign Key Property
				
		private ChucDanh _maChucDanhSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ChucDanh"/>.
		/// </summary>
		/// <value>The source ChucDanh for MaChucDanh.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual ChucDanh MaChucDanhSource
      	{
            get { return this._maChucDanhSource; }
            set { this._maChucDanhSource = value; }
      	}
		private PhongBan _maPhongBanSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="PhongBan"/>.
		/// </summary>
		/// <value>The source PhongBan for MaPhongBan.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual PhongBan MaPhongBanSource
      	{
            get { return this._maPhongBanSource; }
            set { this._maPhongBanSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			QuanLyEntityData _tmp = new QuanLyEntityData();
						
			_tmp.MaQuanLy = this.MaQuanLy;
			_tmp.OriginalMaQuanLy = this.OriginalMaQuanLy;
			
			_tmp.HoTenQuanLy = this.HoTenQuanLy;
			_tmp.Password = this.Password;
			_tmp.MaChucDanh = this.MaChucDanh;
			_tmp.MaPhongBan = this.MaPhongBan;
			
			#region Source Parent Composite Entities
			if (this.MaChucDanhSource != null)
				_tmp.MaChucDanhSource = MakeCopyOf(this.MaChucDanhSource) as ChucDanh;
			if (this.MaPhongBanSource != null)
				_tmp.MaPhongBanSource = MakeCopyOf(this.MaPhongBanSource) as PhongBan;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuanLyColumn"/> which has raised the event.</param>
		public void OnColumnChanging(QuanLyColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuanLyColumn"/> which has raised the event.</param>
		public void OnColumnChanged(QuanLyColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuanLyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(QuanLyColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				QuanLyEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new QuanLyEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="QuanLyColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(QuanLyColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				QuanLyEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new QuanLyEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region QuanLyEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="QuanLy"/> object.
	/// </remarks>
	public class QuanLyEventArgs : System.EventArgs
	{
		private QuanLyColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the QuanLyEventArgs class.
		///</summary>
		public QuanLyEventArgs(QuanLyColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the QuanLyEventArgs class.
		///</summary>
		public QuanLyEventArgs(QuanLyColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The QuanLyColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="QuanLyColumn" />
		public QuanLyColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all QuanLy related events.
	///</summary>
	public delegate void QuanLyEventHandler(object sender, QuanLyEventArgs e);
	
	#region QuanLyComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class QuanLyComparer : System.Collections.Generic.IComparer<QuanLy>
	{
		QuanLyColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:QuanLyComparer"/> class.
        /// </summary>
		public QuanLyComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:QuanLyComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public QuanLyComparer(QuanLyColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="QuanLy"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="QuanLy"/> to compare.</param>
        /// <param name="b">The second <c>QuanLy</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(QuanLy a, QuanLy b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(QuanLy entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(QuanLy a, QuanLy b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public QuanLyColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region QuanLyKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="QuanLy"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class QuanLyKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the QuanLyKey class.
		/// </summary>
		public QuanLyKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the QuanLyKey class.
		/// </summary>
		public QuanLyKey(QuanLyBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaQuanLy = entity.MaQuanLy;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the QuanLyKey class.
		/// </summary>
		public QuanLyKey(System.String maQuanLy)
		{
			#region Init Properties

			this.MaQuanLy = maQuanLy;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private QuanLyBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public QuanLyBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaQuanLy property
		private System.String _maQuanLy;
		
		/// <summary>
		/// Gets or sets the MaQuanLy property.
		/// </summary>
		public System.String MaQuanLy
		{
			get { return _maQuanLy; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaQuanLy = value;
				
				_maQuanLy = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaQuanLy = ( values["MaQuanLy"] != null ) ? (System.String) EntityUtil.ChangeType(values["MaQuanLy"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaQuanLy", MaQuanLy);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaQuanLy: {0}{1}",
								MaQuanLy,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region QuanLyColumn Enum
	
	/// <summary>
	/// Enumerate the QuanLy columns.
	/// </summary>
	[Serializable]
	public enum QuanLyColumn : int
	{
		/// <summary>
		/// MaQuanLy : 
		/// </summary>
		[EnumTextValue("MaQuanLy")]
		[ColumnEnum("MaQuanLy", typeof(System.String), System.Data.DbType.StringFixedLength, true, false, false, 10)]
		MaQuanLy = 1,
		/// <summary>
		/// HoTenQuanLy : 
		/// </summary>
		[EnumTextValue("HoTenQuanLy")]
		[ColumnEnum("HoTenQuanLy", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		HoTenQuanLy = 2,
		/// <summary>
		/// Password : 
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("Password", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 10)]
		Password = 3,
		/// <summary>
		/// MaChucDanh : 
		/// </summary>
		[EnumTextValue("MaChucDanh")]
		[ColumnEnum("MaChucDanh", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 10)]
		MaChucDanh = 4,
		/// <summary>
		/// MaPhongBan : 
		/// </summary>
		[EnumTextValue("MaPhongBan")]
		[ColumnEnum("MaPhongBan", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 10)]
		MaPhongBan = 5
	}//End enum

	#endregion QuanLyColumn Enum

} // end namespace
