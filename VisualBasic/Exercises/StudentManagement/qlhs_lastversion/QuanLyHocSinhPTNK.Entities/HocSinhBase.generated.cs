
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file HocSinh.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace QuanLyHocSinhPTNK.Entities
{
	///<summary>
	/// An object representation of the 'HocSinh' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class HocSinhBase : EntityBase, QuanLyHocSinhPTNK.Entities.IHocSinh, IEntityId<HocSinhKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private HocSinhEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private HocSinhEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private HocSinhEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<HocSinh> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event HocSinhEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event HocSinhEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="HocSinhBase"/> instance.
		///</summary>
		public HocSinhBase()
		{
			this.entityData = new HocSinhEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="HocSinhBase"/> instance.
		///</summary>
		///<param name="maHocSinh"></param>
		///<param name="hoTenHocSinh"></param>
		///<param name="gioiTinh"></param>
		///<param name="ngaySinh"></param>
		///<param name="diaChi"></param>
		///<param name="email"></param>
		///<param name="xepLoai"></param>
		///<param name="hanhKiem"></param>
		///<param name="password"></param>
		///<param name="maLop"></param>
		public HocSinhBase(System.String maHocSinh, System.String hoTenHocSinh, System.String gioiTinh, 
			System.DateTime ngaySinh, System.String diaChi, System.String email, System.String xepLoai, 
			System.String hanhKiem, System.String password, System.String maLop)
		{
			this.entityData = new HocSinhEntityData();
			this.backupData = null;

			this.MaHocSinh = maHocSinh;
			this.HoTenHocSinh = hoTenHocSinh;
			this.GioiTinh = gioiTinh;
			this.NgaySinh = ngaySinh;
			this.DiaChi = diaChi;
			this.Email = email;
			this.XepLoai = xepLoai;
			this.HanhKiem = hanhKiem;
			this.Password = password;
			this.MaLop = maLop;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="HocSinh"/> instance.
		///</summary>
		///<param name="maHocSinh"></param>
		///<param name="hoTenHocSinh"></param>
		///<param name="gioiTinh"></param>
		///<param name="ngaySinh"></param>
		///<param name="diaChi"></param>
		///<param name="email"></param>
		///<param name="xepLoai"></param>
		///<param name="hanhKiem"></param>
		///<param name="password"></param>
		///<param name="maLop"></param>
		public static HocSinh CreateHocSinh(System.String maHocSinh, System.String hoTenHocSinh, System.String gioiTinh, 
			System.DateTime ngaySinh, System.String diaChi, System.String email, System.String xepLoai, 
			System.String hanhKiem, System.String password, System.String maLop)
		{
			HocSinh newHocSinh = new HocSinh();
			newHocSinh.MaHocSinh = maHocSinh;
			newHocSinh.HoTenHocSinh = hoTenHocSinh;
			newHocSinh.GioiTinh = gioiTinh;
			newHocSinh.NgaySinh = ngaySinh;
			newHocSinh.DiaChi = diaChi;
			newHocSinh.Email = email;
			newHocSinh.XepLoai = xepLoai;
			newHocSinh.HanhKiem = hanhKiem;
			newHocSinh.Password = password;
			newHocSinh.MaLop = maLop;
			return newHocSinh;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the MaHocSinh property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 10)]
		public virtual System.String MaHocSinh
		{
			get
			{
				return this.entityData.MaHocSinh; 
			}
			
			set
			{
				if (this.entityData.MaHocSinh == value)
					return;
					
				OnColumnChanging(HocSinhColumn.MaHocSinh, this.entityData.MaHocSinh);
				this.entityData.MaHocSinh = value;
				this.EntityId.MaHocSinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocSinhColumn.MaHocSinh, this.entityData.MaHocSinh);
				OnPropertyChanged("MaHocSinh");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the MaHocSinh property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the MaHocSinh property.</remarks>
		/// <value>This type is nchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalMaHocSinh
		{
			get { return this.entityData.OriginalMaHocSinh; }
			set { this.entityData.OriginalMaHocSinh = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the HoTenHocSinh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String HoTenHocSinh
		{
			get
			{
				return this.entityData.HoTenHocSinh; 
			}
			
			set
			{
				if (this.entityData.HoTenHocSinh == value)
					return;
					
				OnColumnChanging(HocSinhColumn.HoTenHocSinh, this.entityData.HoTenHocSinh);
				this.entityData.HoTenHocSinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocSinhColumn.HoTenHocSinh, this.entityData.HoTenHocSinh);
				OnPropertyChanged("HoTenHocSinh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GioiTinh property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String GioiTinh
		{
			get
			{
				return this.entityData.GioiTinh; 
			}
			
			set
			{
				if (this.entityData.GioiTinh == value)
					return;
					
				OnColumnChanging(HocSinhColumn.GioiTinh, this.entityData.GioiTinh);
				this.entityData.GioiTinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocSinhColumn.GioiTinh, this.entityData.GioiTinh);
				OnPropertyChanged("GioiTinh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NgaySinh property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime NgaySinh
		{
			get
			{
				return this.entityData.NgaySinh; 
			}
			
			set
			{
				if (this.entityData.NgaySinh == value)
					return;
					
				OnColumnChanging(HocSinhColumn.NgaySinh, this.entityData.NgaySinh);
				this.entityData.NgaySinh = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocSinhColumn.NgaySinh, this.entityData.NgaySinh);
				OnPropertyChanged("NgaySinh");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DiaChi property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String DiaChi
		{
			get
			{
				return this.entityData.DiaChi; 
			}
			
			set
			{
				if (this.entityData.DiaChi == value)
					return;
					
				OnColumnChanging(HocSinhColumn.DiaChi, this.entityData.DiaChi);
				this.entityData.DiaChi = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocSinhColumn.DiaChi, this.entityData.DiaChi);
				OnPropertyChanged("DiaChi");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is text.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(HocSinhColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocSinhColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the XepLoai property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String XepLoai
		{
			get
			{
				return this.entityData.XepLoai; 
			}
			
			set
			{
				if (this.entityData.XepLoai == value)
					return;
					
				OnColumnChanging(HocSinhColumn.XepLoai, this.entityData.XepLoai);
				this.entityData.XepLoai = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocSinhColumn.XepLoai, this.entityData.XepLoai);
				OnPropertyChanged("XepLoai");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HanhKiem property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String HanhKiem
		{
			get
			{
				return this.entityData.HanhKiem; 
			}
			
			set
			{
				if (this.entityData.HanhKiem == value)
					return;
					
				OnColumnChanging(HocSinhColumn.HanhKiem, this.entityData.HanhKiem);
				this.entityData.HanhKiem = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocSinhColumn.HanhKiem, this.entityData.HanhKiem);
				OnPropertyChanged("HanhKiem");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
					
				OnColumnChanging(HocSinhColumn.Password, this.entityData.Password);
				this.entityData.Password = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocSinhColumn.Password, this.entityData.Password);
				OnPropertyChanged("Password");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MaLop property. 
		///		
		/// </summary>
		/// <value>This type is nchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String MaLop
		{
			get
			{
				return this.entityData.MaLop; 
			}
			
			set
			{
				if (this.entityData.MaLop == value)
					return;
					
				OnColumnChanging(HocSinhColumn.MaLop, this.entityData.MaLop);
				this.entityData.MaLop = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(HocSinhColumn.MaLop, this.entityData.MaLop);
				OnPropertyChanged("MaLop");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="LopHoc"/>.
		/// </summary>
		/// <value>The source LopHoc for MaLop.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual LopHoc MaLopSource
      	{
            get { return entityData.MaLopSource; }
            set { entityData.MaLopSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of BangDiem objects
		///	which are related to this object through the relation FK_BangDiem_HocSinh
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<BangDiem> BangDiemCollection
		{
			get { return entityData.BangDiemCollection; }
			set { entityData.BangDiemCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("MaHocSinh", "Ma Hoc Sinh"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MaHocSinh", "Ma Hoc Sinh", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("HoTenHocSinh", "Ho Ten Hoc Sinh"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("HoTenHocSinh", "Ho Ten Hoc Sinh", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("GioiTinh", "Gioi Tinh"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("GioiTinh", "Gioi Tinh", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("DiaChi", "Dia Chi"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DiaChi", "Dia Chi", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("XepLoai", "Xep Loai"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("XepLoai", "Xep Loai", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("HanhKiem", "Hanh Kiem"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("HanhKiem", "Hanh Kiem", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Password", "Password"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Password", "Password", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("MaLop", "Ma Lop"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MaLop", "Ma Lop", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "HocSinh"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"MaHocSinh", "HoTenHocSinh", "GioiTinh", "NgaySinh", "DiaChi", "Email", "XepLoai", "HanhKiem", "Password", "MaLop"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as HocSinhEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (HocSinh) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<HocSinh>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as HocSinh);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed HocSinh Entity 
		///</summary>
		public virtual HocSinh Copy()
		{
			//shallow copy entity
			HocSinh copy = new HocSinh();
			copy.SuppressEntityEvents = true;
			copy.MaHocSinh = this.MaHocSinh;
			copy.OriginalMaHocSinh = this.OriginalMaHocSinh;
			copy.HoTenHocSinh = this.HoTenHocSinh;
			copy.GioiTinh = this.GioiTinh;
			copy.NgaySinh = this.NgaySinh;
			copy.DiaChi = this.DiaChi;
			copy.Email = this.Email;
			copy.XepLoai = this.XepLoai;
			copy.HanhKiem = this.HanhKiem;
			copy.Password = this.Password;
			copy.MaLop = this.MaLop;
			
			copy.MaLopSource = MakeCopyOf(this.MaLopSource) as LopHoc;
		
			//deep copy nested objects
			copy.BangDiemCollection = (TList<BangDiem>) MakeCopyOf(this.BangDiemCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed HocSinh Entity which is a deep copy of the current entity.
		///</summary>
		public virtual HocSinh DeepCopy()
		{
			return EntityHelper.Clone<HocSinh>(this as HocSinh);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as HocSinhEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as HocSinhEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(HocSinhColumn column)
		{
			switch(column)
			{
					case HocSinhColumn.MaHocSinh:
					return entityData.MaHocSinh != _originalData.MaHocSinh;
					case HocSinhColumn.HoTenHocSinh:
					return entityData.HoTenHocSinh != _originalData.HoTenHocSinh;
					case HocSinhColumn.GioiTinh:
					return entityData.GioiTinh != _originalData.GioiTinh;
					case HocSinhColumn.NgaySinh:
					return entityData.NgaySinh != _originalData.NgaySinh;
					case HocSinhColumn.DiaChi:
					return entityData.DiaChi != _originalData.DiaChi;
					case HocSinhColumn.Email:
					return entityData.Email != _originalData.Email;
					case HocSinhColumn.XepLoai:
					return entityData.XepLoai != _originalData.XepLoai;
					case HocSinhColumn.HanhKiem:
					return entityData.HanhKiem != _originalData.HanhKiem;
					case HocSinhColumn.Password:
					return entityData.Password != _originalData.Password;
					case HocSinhColumn.MaLop:
					return entityData.MaLop != _originalData.MaLop;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.MaHocSinh != _originalData.MaHocSinh;
			result = result || entityData.HoTenHocSinh != _originalData.HoTenHocSinh;
			result = result || entityData.GioiTinh != _originalData.GioiTinh;
			result = result || entityData.NgaySinh != _originalData.NgaySinh;
			result = result || entityData.DiaChi != _originalData.DiaChi;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.XepLoai != _originalData.XepLoai;
			result = result || entityData.HanhKiem != _originalData.HanhKiem;
			result = result || entityData.Password != _originalData.Password;
			result = result || entityData.MaLop != _originalData.MaLop;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="HocSinhBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is HocSinhBase)
				return Equals(this, (HocSinhBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="HocSinhBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.MaHocSinh.GetHashCode() ^ 
					this.HoTenHocSinh.GetHashCode() ^ 
					this.GioiTinh.GetHashCode() ^ 
					this.NgaySinh.GetHashCode() ^ 
					this.DiaChi.GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					this.XepLoai.GetHashCode() ^ 
					this.HanhKiem.GetHashCode() ^ 
					this.Password.GetHashCode() ^ 
					this.MaLop.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="HocSinhBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(HocSinhBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="HocSinhBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="HocSinhBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="HocSinhBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(HocSinhBase Object1, HocSinhBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.MaHocSinh != Object2.MaHocSinh)
				equal = false;
			if (Object1.HoTenHocSinh != Object2.HoTenHocSinh)
				equal = false;
			if (Object1.GioiTinh != Object2.GioiTinh)
				equal = false;
			if (Object1.NgaySinh != Object2.NgaySinh)
				equal = false;
			if (Object1.DiaChi != Object2.DiaChi)
				equal = false;
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if (Object1.XepLoai != Object2.XepLoai)
				equal = false;
			if (Object1.HanhKiem != Object2.HanhKiem)
				equal = false;
			if (Object1.Password != Object2.Password)
				equal = false;
			if (Object1.MaLop != Object2.MaLop)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((HocSinhBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static HocSinhComparer GetComparer()
        {
            return new HocSinhComparer();
        }
        */

        // Comparer delegates back to HocSinh
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(HocSinh rhs, HocSinhColumn which)
        {
            switch (which)
            {
            	
            	
            	case HocSinhColumn.MaHocSinh:
            		return this.MaHocSinh.CompareTo(rhs.MaHocSinh);
            		
            		                 
            	
            	
            	case HocSinhColumn.HoTenHocSinh:
            		return this.HoTenHocSinh.CompareTo(rhs.HoTenHocSinh);
            		
            		                 
            	
            	
            	case HocSinhColumn.GioiTinh:
            		return this.GioiTinh.CompareTo(rhs.GioiTinh);
            		
            		                 
            	
            	
            	case HocSinhColumn.NgaySinh:
            		return this.NgaySinh.CompareTo(rhs.NgaySinh);
            		
            		                 
            	
            	
            	case HocSinhColumn.DiaChi:
            		return this.DiaChi.CompareTo(rhs.DiaChi);
            		
            		                 
            	
            	
            	case HocSinhColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case HocSinhColumn.XepLoai:
            		return this.XepLoai.CompareTo(rhs.XepLoai);
            		
            		                 
            	
            	
            	case HocSinhColumn.HanhKiem:
            		return this.HanhKiem.CompareTo(rhs.HanhKiem);
            		
            		                 
            	
            	
            	case HocSinhColumn.Password:
            		return this.Password.CompareTo(rhs.Password);
            		
            		                 
            	
            	
            	case HocSinhColumn.MaLop:
            		return this.MaLop.CompareTo(rhs.MaLop);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<HocSinhKey> Members
		
		// member variable for the EntityId property
		private HocSinhKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual HocSinhKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new HocSinhKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("HocSinh")
					.Append("|").Append( this.MaHocSinh.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- MaHocSinh: {0}{10}- HoTenHocSinh: {1}{10}- GioiTinh: {2}{10}- NgaySinh: {3}{10}- DiaChi: {4}{10}- Email: {5}{10}- XepLoai: {6}{10}- HanhKiem: {7}{10}- Password: {8}{10}- MaLop: {9}{10}", 
				this.MaHocSinh,
				this.HoTenHocSinh,
				this.GioiTinh,
				this.NgaySinh,
				this.DiaChi,
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				this.XepLoai,
				this.HanhKiem,
				this.Password,
				this.MaLop,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'HocSinh' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class HocSinhEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// MaHocSinh : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "HocSinh"</remarks>
			public System.String MaHocSinh;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalMaHocSinh;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// HoTenHocSinh : 
		/// </summary>
		public System.String		  HoTenHocSinh = string.Empty;
		
		/// <summary>
		/// GioiTinh : 
		/// </summary>
		public System.String		  GioiTinh = string.Empty;
		
		/// <summary>
		/// NgaySinh : 
		/// </summary>
		public System.DateTime		  NgaySinh = DateTime.MinValue;
		
		/// <summary>
		/// DiaChi : 
		/// </summary>
		public System.String		  DiaChi = string.Empty;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = null;
		
		/// <summary>
		/// XepLoai : 
		/// </summary>
		public System.String		  XepLoai = string.Empty;
		
		/// <summary>
		/// HanhKiem : 
		/// </summary>
		public System.String		  HanhKiem = string.Empty;
		
		/// <summary>
		/// Password : 
		/// </summary>
		public System.String		  Password = string.Empty;
		
		/// <summary>
		/// MaLop : 
		/// </summary>
		public System.String		  MaLop = string.Empty;
		#endregion
			
		#region Source Foreign Key Property
				
		private LopHoc _maLopSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="LopHoc"/>.
		/// </summary>
		/// <value>The source LopHoc for MaLop.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual LopHoc MaLopSource
      	{
            get { return this._maLopSource; }
            set { this._maLopSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region BangDiemCollection
		
		private TList<BangDiem> bangDiemMaHocSinh;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation bangDiemMaHocSinh
		/// </summary>	
		public TList<BangDiem> BangDiemCollection
		{
			get
			{
				if (bangDiemMaHocSinh == null)
				{
				bangDiemMaHocSinh = new TList<BangDiem>();
				}
	
				return bangDiemMaHocSinh;
			}
			set { bangDiemMaHocSinh = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			HocSinhEntityData _tmp = new HocSinhEntityData();
						
			_tmp.MaHocSinh = this.MaHocSinh;
			_tmp.OriginalMaHocSinh = this.OriginalMaHocSinh;
			
			_tmp.HoTenHocSinh = this.HoTenHocSinh;
			_tmp.GioiTinh = this.GioiTinh;
			_tmp.NgaySinh = this.NgaySinh;
			_tmp.DiaChi = this.DiaChi;
			_tmp.Email = this.Email;
			_tmp.XepLoai = this.XepLoai;
			_tmp.HanhKiem = this.HanhKiem;
			_tmp.Password = this.Password;
			_tmp.MaLop = this.MaLop;
			
			#region Source Parent Composite Entities
			if (this.MaLopSource != null)
				_tmp.MaLopSource = MakeCopyOf(this.MaLopSource) as LopHoc;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this.bangDiemMaHocSinh != null)
				_tmp.BangDiemCollection = (TList<BangDiem>) MakeCopyOf(this.BangDiemCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HocSinhColumn"/> which has raised the event.</param>
		public void OnColumnChanging(HocSinhColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HocSinhColumn"/> which has raised the event.</param>
		public void OnColumnChanged(HocSinhColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HocSinhColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(HocSinhColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				HocSinhEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new HocSinhEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="HocSinhColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(HocSinhColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				HocSinhEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new HocSinhEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region HocSinhEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="HocSinh"/> object.
	/// </remarks>
	public class HocSinhEventArgs : System.EventArgs
	{
		private HocSinhColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the HocSinhEventArgs class.
		///</summary>
		public HocSinhEventArgs(HocSinhColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the HocSinhEventArgs class.
		///</summary>
		public HocSinhEventArgs(HocSinhColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The HocSinhColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="HocSinhColumn" />
		public HocSinhColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all HocSinh related events.
	///</summary>
	public delegate void HocSinhEventHandler(object sender, HocSinhEventArgs e);
	
	#region HocSinhComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class HocSinhComparer : System.Collections.Generic.IComparer<HocSinh>
	{
		HocSinhColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:HocSinhComparer"/> class.
        /// </summary>
		public HocSinhComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:HocSinhComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public HocSinhComparer(HocSinhColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="HocSinh"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="HocSinh"/> to compare.</param>
        /// <param name="b">The second <c>HocSinh</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(HocSinh a, HocSinh b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(HocSinh entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(HocSinh a, HocSinh b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public HocSinhColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region HocSinhKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="HocSinh"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class HocSinhKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the HocSinhKey class.
		/// </summary>
		public HocSinhKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the HocSinhKey class.
		/// </summary>
		public HocSinhKey(HocSinhBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.MaHocSinh = entity.MaHocSinh;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the HocSinhKey class.
		/// </summary>
		public HocSinhKey(System.String maHocSinh)
		{
			#region Init Properties

			this.MaHocSinh = maHocSinh;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private HocSinhBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public HocSinhBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the MaHocSinh property
		private System.String _maHocSinh;
		
		/// <summary>
		/// Gets or sets the MaHocSinh property.
		/// </summary>
		public System.String MaHocSinh
		{
			get { return _maHocSinh; }
			set
			{
				if ( this.Entity != null )
					this.Entity.MaHocSinh = value;
				
				_maHocSinh = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				MaHocSinh = ( values["MaHocSinh"] != null ) ? (System.String) EntityUtil.ChangeType(values["MaHocSinh"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("MaHocSinh", MaHocSinh);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("MaHocSinh: {0}{1}",
								MaHocSinh,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region HocSinhColumn Enum
	
	/// <summary>
	/// Enumerate the HocSinh columns.
	/// </summary>
	[Serializable]
	public enum HocSinhColumn : int
	{
		/// <summary>
		/// MaHocSinh : 
		/// </summary>
		[EnumTextValue("MaHocSinh")]
		[ColumnEnum("MaHocSinh", typeof(System.String), System.Data.DbType.StringFixedLength, true, false, false, 10)]
		MaHocSinh = 1,
		/// <summary>
		/// HoTenHocSinh : 
		/// </summary>
		[EnumTextValue("HoTenHocSinh")]
		[ColumnEnum("HoTenHocSinh", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		HoTenHocSinh = 2,
		/// <summary>
		/// GioiTinh : 
		/// </summary>
		[EnumTextValue("GioiTinh")]
		[ColumnEnum("GioiTinh", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		GioiTinh = 3,
		/// <summary>
		/// NgaySinh : 
		/// </summary>
		[EnumTextValue("NgaySinh")]
		[ColumnEnum("NgaySinh", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		NgaySinh = 4,
		/// <summary>
		/// DiaChi : 
		/// </summary>
		[EnumTextValue("DiaChi")]
		[ColumnEnum("DiaChi", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		DiaChi = 5,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		Email = 6,
		/// <summary>
		/// XepLoai : 
		/// </summary>
		[EnumTextValue("XepLoai")]
		[ColumnEnum("XepLoai", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		XepLoai = 7,
		/// <summary>
		/// HanhKiem : 
		/// </summary>
		[EnumTextValue("HanhKiem")]
		[ColumnEnum("HanhKiem", typeof(System.String), System.Data.DbType.String, false, false, false, 50)]
		HanhKiem = 8,
		/// <summary>
		/// Password : 
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("Password", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 10)]
		Password = 9,
		/// <summary>
		/// MaLop : 
		/// </summary>
		[EnumTextValue("MaLop")]
		[ColumnEnum("MaLop", typeof(System.String), System.Data.DbType.StringFixedLength, false, false, false, 10)]
		MaLop = 10
	}//End enum

	#endregion HocSinhColumn Enum

} // end namespace
