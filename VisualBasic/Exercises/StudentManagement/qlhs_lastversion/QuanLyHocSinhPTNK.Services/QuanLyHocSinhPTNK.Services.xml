<?xml version="1.0"?>
<doc>
    <assembly>
        <name>QuanLyHocSinhPTNK.Services</name>
    </assembly>
    <members>
        <member name="T:QuanLyHocSinhPTNK.Services.ServiceViewBase`1">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.IComponentService">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.IComponentService.ProcessorList">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.IComponentService.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.IComponentService.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="E:QuanLyHocSinhPTNK.Services.IComponentService.ProcessStarting">
            <summary>
            Event to indicate that a processor is about to begin.
            </summary>
        </member>
        <member name="E:QuanLyHocSinhPTNK.Services.IComponentService.ProcessEnded">
            <summary>
            Event to indicate that a processor has just ended.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.OnProcessStarting(QuanLyHocSinhPTNK.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.OnProcessEnded(QuanLyHocSinhPTNK.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.Get">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.Get(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.Get(System.String,System.String)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.Get(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets All rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">The total number of rows in the data source.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a VList of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:QuanLyHocSinhPTNK.Services.ServiceViewBaseCore`1.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ConnectionScope">
            <summary>
            Provides storage of global database connection information.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.#ctor">
            <summary>
            Initializes a new instance of the ConnectionScope class.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.NewThread(System.Threading.ThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:QuanLyHocSinhPTNK.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.NewThread(System.Threading.ParameterizedThreadStart)">
            <summary>
            Creates a new <see cref="T:System.Threading.Thread"/> object and copies
            the current <see cref="T:QuanLyHocSinhPTNK.Services.ConnectionScope"/> parameters.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns a new <see cref="T:System.Threading.Thread"/> object.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ThreadStart)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.EnqueueOnThreadPool(System.Threading.ParameterizedThreadStart,System.Object)">
            <summary>
            Queues a method for execution. The method executes
            when a thread pool thread becomes available.
            </summary>
            <param name="start">A delegate specifying which method to run
            when the <see cref="T:System.Threading.Thread"/> is started.</param>
            <param name="state">An object containing data to be used by the method.</param>
            <returns>Returns true if the method is successfully queued.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.Copy(QuanLyHocSinhPTNK.Services.ConnectionScope)">
            <summary>
            Copies the values from the specified <paramref name="scope"/> object
            to the <see cref="T:QuanLyHocSinhPTNK.Services.ConnectionScope"/> used by the current thread.
            </summary>
            <param name="scope">A <see cref="T:QuanLyHocSinhPTNK.Services.ConnectionScope"/> object.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.ValidateOrCreateTransaction">
            <summary>
            Validates an existing <c cref="P:QuanLyHocSinhPTNK.Services.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:QuanLyHocSinhPTNK.Services.ConnectionScope.TransactionManager"/> to use.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.ValidateOrCreateTransaction(System.Boolean)">
            <summary>
            Validates an existing <c cref="P:QuanLyHocSinhPTNK.Services.ConnectionScope.TransactionManager"/> if one exists,
            otherwise creates a new <c cref="P:QuanLyHocSinhPTNK.Services.ConnectionScope.TransactionManager"/> to use.
            </summary>
            <param name="createTransaction">determines whether to create a new transaction</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.CreateTransaction">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.CreateTransaction(System.Data.IsolationLevel)">
            <summary>
            Creates a new transaction on the current <c>ConnectionScope</c>
            with the specified <c cref="T:System.Data.IsolationLevel"/>.
            </summary>
            <param name="level">Determines which <c cref="T:System.Data.IsolationLevel"/> to use for the transaction.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.Complete">
             <summary>
             Completes this unit of work instance of the current transaction.  
             Commits the transaction,  Cleans up Connection, 
             Disposes of TransactionManager which performs unmanaged cleanup.
             </summary>
             <example>
                 try
                 {
                     using (ConnectionScope.CreateTransaction())
                     {
                         // or use ConnectionScope.ValidateOrCreateTransaction(true) 
                         // if you prefer to dynamically check for an existing transaction
                         AccountService.Save(account);
                         LedgerService.Save(generalEntry);
             
                         //Commit and Cleanup your transaction
                         bool result = ConnectionScope.Complete();
                     }
                 }
                 catch (Exception ex)
                 {
                     // when creating the transaction via the 
                     // using (ConnectionScope.CreateTransaction()) construct, 
                     // there's no need to rollback, handled by 
                     // ConnectionScope Dispose Method.
             
                     Logger.Write(ex.Message);
                 }
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ConnectionScope.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="F:QuanLyHocSinhPTNK.Services.ConnectionScope.connectionStringKey">
            <summary>
            The ConnectionStringKey member variable.
            </summary>
        </member>
        <member name="F:QuanLyHocSinhPTNK.Services.ConnectionScope.dynamicConnectionString">
            <summary>
            The DynamicConnectionString member variable.
            </summary>
        </member>
        <member name="F:QuanLyHocSinhPTNK.Services.ConnectionScope.transactionManager">
            <summary>
            The TransactionManager member variable.
            </summary>
        </member>
        <member name="F:QuanLyHocSinhPTNK.Services.ConnectionScope.dataProvider">
            <summary>
            The NetTiersProvider member variable.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ConnectionScope.Current">
            <summary>
            Gets a reference to the ConnectionScope object for the current thread.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ConnectionScope.ConnectionStringKey">
            <summary>
            Gets or sets the ConnectionStringKey property.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ConnectionScope.DynamicConnectionString">
            <summary>
            Gets or sets the DynamicConnectionString property.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ConnectionScope.TransactionManager">
            <summary>
            Gets or sets the TransactionManager property.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ConnectionScope.DataProvider">
             <summary>
             Gets or Sets the Current DataProvider property of the <c>ConnectionScope</c> Object.
             </summary>
             <remarks>
             To use a dynamic connection, you must set both the 
             DynamicConnectionString and a unique ConnectionStringKey properties;
            </remarks>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ConnectionScope.HasTransaction">
            <summary>
            Determines if Current Connections is in a Transaction.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.MonHocServiceBase">
            <summary>
             An object representation of the 'MonHoc' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the MonHoc.cs file instead.
             All custom implementations should be done in the <see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> class.
             </remarks>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ServiceBase`2">
            <summary>
            The base class that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.Execute">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.Execute(System.Boolean)">
             <summary>
            	Provides the beginning
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.OnProcessStarting(QuanLyHocSinhPTNK.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.OnProcessEnded(QuanLyHocSinhPTNK.Services.ProcessorBase)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.Get(`1)">
            <summary>
            Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.GetAll">
            <summary>
            Gets all rows from the DataSource.
            </summary>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of rows from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">Number of rows in the DataSource.</param>
            <returns>Returns a TList of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out parameter to get total records for query</param>
            <remarks>Operators must be capitalized (OR, AND)</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.Insert(`0)">
            <summary>
            Inserts a row into the DataSource.
            </summary>
            <param name="entity">The Entity object to insert.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.BulkInsert(QuanLyHocSinhPTNK.Entities.TList{`0})">
            <summary>
            Efficiently inserts multiple rows into the DataSource.
            </summary>
            <param name="entities">TList of Entity objects to insert.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.Update(`0)">
            <summary>
            Updates an existing row in the DataSource.
            </summary>
            <param name="entity">The Entity object to update.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.Delete(`0)">
            <summary>
            Deletes a row from the DataSource.
            </summary>
            <param name="entity">The Entity object to delete.</param>
            <returns>Returns true if the operation is successful.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.Save(`0)">
            <summary>
            Saves row changes in the DataSource (insert, update ,delete).
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.DeepLoad(`0,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[],QuanLyHocSinhPTNK.Data.Bases.DeepSession)">
            <summary>
            Deep Load the entire Entity object with criteria based on the child types array and the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entity">The Entity object to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
            <param name="innerList">A collection of child types for easy access.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{`0},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entities">TList of Entity objects to load.</param>
            <param name="deep">A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. If True, loads the complete object graph below this object. If False, loads this object only.</param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Load.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.DeepSave(`0)">
            <summary>
            Deep Save the Entity object with all of the child property collections only 1 level deep.
            </summary>
            <param name="entity">The Entity object to save.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.DeepSave(`0,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.DeepSave(`0,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[],System.Collections.Hashtable)">
            <summary>
            Deep Save the entire Entity object with criteria based on the child types array and the DeepSaveType.
            </summary>
            <remarks>
            This method should be implemented by sub-classes to provide specific deep save functionality.
            </remarks>
            <param name="entity">The Entity object to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
            <param name="innerList">A Hashtable of child types for easy access.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.DeepSave(QuanLyHocSinhPTNK.Entities.TList{`0},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the Entity objects with criteria based on the child types array and the DeepSaveType.
            </summary>
            <param name="entities">TList of Entity objects to save.</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Entity Property Collection Type Array To Include or Exclude from Save.</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.ProcessorList">
             <summary>
            	Provides a List of Processors to execute external business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.ServiceProcessResult">
             <summary>
            	Provides a Notification Pattern of Process Results.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.AbortOnFailure">
             <summary>
            	Provides a way to terminate the Processor calls upon an exception. 
             </summary>
            <value>bool value determining to stop once an exceptions been thrown. </value>		
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.CurrentProcessor">
            <summary>
            Current Processor being executed
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.ProcessCounter">
            <summary>
            Current Number of Processes completed thus far.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.CurrentProcessorIndex">
            <summary>
            Current index of the processor currently or last executed 
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.TotalProcesses">
            <summary>
            Total Number of Processes currently enlisted in this service 
            </summary>
        </member>
        <member name="E:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.ProcessStarting">
            <summary>
            Event to indicate that a processor has began.
            </summary>
        </member>
        <member name="E:QuanLyHocSinhPTNK.Services.ServiceBaseCore`2.ProcessEnded">
            <summary>
            Event to indicate that a processor has ended.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> instance .
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.CreateMonHoc(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> instance.
            </summary>
            <param name="maMon"></param>
            <param name="tenMon"></param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Get(QuanLyHocSinhPTNK.Entities.MonHocKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.GetByMaMon(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_MonHoc_1 index.
            </summary>
            <param name="maMon"></param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.GetByMaMon(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_MonHoc_1 index.
            </summary>
            <param name="maMon"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{MonHoc} of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>MonHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Insert(QuanLyHocSinhPTNK.Entities.MonHoc)">
            <summary>
            	public virtualmethod that Inserts a MonHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">MonHoc object to Insert.</param>
            <remarks>After Inserting into the datasource, the MonHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            MonHoc entity = new MonHoc();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	MonHocService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Insert(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.MonHoc})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonHoc</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>MonHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of MonHoc.
             <code><![CDATA[
             TList<MonHoc> list = new TList<MonHoc>();
             MonHoc entity = new MonHoc();
             entity.StringProperty = "foo";
             MonHoc entity2 = new MonHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonHocService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Update(QuanLyHocSinhPTNK.Entities.MonHoc)">
            <summary>
            	public virtualmethod that Updates a MonHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">MonHoc object to Update.</param>
            <remarks>After Updateing into the datasource, the MonHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            MonHoc entity = MonHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	MonHocService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Update(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.MonHoc})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonHoc</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>MonHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of MonHoc.
             <code><![CDATA[
             TList<MonHoc> list = new TList<MonHoc>();
             MonHoc entity = new MonHoc();
             entity.StringProperty = "foo";
             MonHoc entity2 = new MonHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonHocService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Save(QuanLyHocSinhPTNK.Entities.MonHoc)">
            <summary>
            	public virtualmethod that Saves a MonHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">MonHoc object to Save.</param>
            <remarks>After Saveing into the datasource, the MonHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            MonHoc entity = MonHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	MonHocService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Save(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.MonHoc})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonHoc</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>MonHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of MonHoc.
             <code><![CDATA[
             TList<MonHoc> list = new TList<MonHoc>();
             MonHoc entity = new MonHoc();
             entity.StringProperty = "foo";
             MonHoc entity2 = new MonHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonHocService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Delete(QuanLyHocSinhPTNK.Entities.MonHoc)">
            <summary>
            	public virtualmethod that Deletes a MonHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">MonHoc object to Delete.</param>
            <remarks>After Deleteing into the datasource, the MonHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            MonHoc entity = MonHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	MonHocService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Delete(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.MonHoc})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>MonHoc</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>MonHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of MonHoc.
             <code><![CDATA[
             TList<MonHoc> list = new TList<MonHoc>();
             MonHoc entity = new MonHoc();
             entity.StringProperty = "foo";
             MonHoc entity2 = new MonHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	MonHocService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Delete(QuanLyHocSinhPTNK.Entities.MonHocKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maMon
            </summary>
            <param name="maMon">MonHoc pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepLoadByMaMon(System.String,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maMon"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MonHoc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.MonHoc)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">MonHoc Object</param>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.MonHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.MonHoc,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.MonHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">MonHoc Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.MonHoc,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">MonHoc Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.MonHoc})">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.MonHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.MonHoc},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.MonHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.MonHoc},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.MonHoc)">
            <summary>
            public virtualDeep Saves the <see cref="T:QuanLyHocSinhPTNK.Entities.MonHoc"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">MonHoc Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.MonHoc,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the MonHoc object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">MonHoc Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>MonHoc</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.MonHoc})">
            <summary>
            Deep Save the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{MonHoc} Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.MonHoc},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">MonHoc Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.MonHocServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ProcessorBase">
            <summary>
            The interface that each complex business unit of work processor will use.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.IProcessor">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.IProcessor.Process">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.IProcessor.ChangeProcessorState(QuanLyHocSinhPTNK.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.IProcessor.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.IProcessor.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ProcessorBase.Process">
             <summary>
            	Provides a List of Processors to execute business process logic in.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ProcessorBase.ChangeProcessorState(QuanLyHocSinhPTNK.Services.ProcessorState)">
            <summary>
            Provides the notification on the change of process state to interested parties.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ProcessorBase.OnNotifyProcessorStateChanging(QuanLyHocSinhPTNK.Services.ProcessorState)">
            <summary>
            Raises the ProcessorStateChanging event.
            </summary>
            <param name="newProcessorState"></param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ProcessorBase.ProcessResult">
            <summary>
            Provides the current process result of it's operation.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ProcessorBase.ProcessName">
             <summary>
            	Provides a name of the current processor to execute business process logic in.
             </summary>
            <value>The name of the type of the processors to execute</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ProcessorBase.CurrentProcessorState">
            <summary>
            Provides the current process state of operation.
            </summary>
        </member>
        <member name="E:QuanLyHocSinhPTNK.Services.ProcessorBase.ProcessorStateChanging">
            <summary>
            The ProcessorStateChanging event.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ProcessorBase.ProcessorStateChangingEventHandler">
            <summary>
            The ProcessorStateChangingEventHandler event handler.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.HocKyServiceBase">
            <summary>
             An object representation of the 'HocKy' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HocKy.cs file instead.
             All custom implementations should be done in the <see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> class.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> instance .
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.CreateHocKy(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> instance.
            </summary>
            <param name="maHocKy"></param>
            <param name="tenHocKy"></param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Get(QuanLyHocSinhPTNK.Entities.HocKyKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.GetByMaHocKy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_HocKy index.
            </summary>
            <param name="maHocKy"></param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.GetByMaHocKy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_HocKy index.
            </summary>
            <param name="maHocKy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocKy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocKy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocKy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HocKy} of <c>HocKy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HocKy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HocKy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HocKy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Insert(QuanLyHocSinhPTNK.Entities.HocKy)">
            <summary>
            	public virtualmethod that Inserts a HocKy object into the datasource using a transaction.
            </summary>
            <param name="entity">HocKy object to Insert.</param>
            <remarks>After Inserting into the datasource, the HocKy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HocKy entity = new HocKy();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HocKyService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Insert(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocKy})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocKy</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HocKy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HocKy.
             <code><![CDATA[
             TList<HocKy> list = new TList<HocKy>();
             HocKy entity = new HocKy();
             entity.StringProperty = "foo";
             HocKy entity2 = new HocKy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocKyService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Update(QuanLyHocSinhPTNK.Entities.HocKy)">
            <summary>
            	public virtualmethod that Updates a HocKy object into the datasource using a transaction.
            </summary>
            <param name="entity">HocKy object to Update.</param>
            <remarks>After Updateing into the datasource, the HocKy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HocKy entity = HocKyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HocKyService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Update(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocKy})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocKy</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HocKy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HocKy.
             <code><![CDATA[
             TList<HocKy> list = new TList<HocKy>();
             HocKy entity = new HocKy();
             entity.StringProperty = "foo";
             HocKy entity2 = new HocKy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocKyService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Save(QuanLyHocSinhPTNK.Entities.HocKy)">
            <summary>
            	public virtualmethod that Saves a HocKy object into the datasource using a transaction.
            </summary>
            <param name="entity">HocKy object to Save.</param>
            <remarks>After Saveing into the datasource, the HocKy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HocKy entity = HocKyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HocKyService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Save(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocKy})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocKy</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HocKy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HocKy.
             <code><![CDATA[
             TList<HocKy> list = new TList<HocKy>();
             HocKy entity = new HocKy();
             entity.StringProperty = "foo";
             HocKy entity2 = new HocKy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocKyService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Delete(QuanLyHocSinhPTNK.Entities.HocKy)">
            <summary>
            	public virtualmethod that Deletes a HocKy object into the datasource using a transaction.
            </summary>
            <param name="entity">HocKy object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HocKy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HocKy entity = HocKyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HocKyService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Delete(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocKy})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocKy</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HocKy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HocKy.
             <code><![CDATA[
             TList<HocKy> list = new TList<HocKy>();
             HocKy entity = new HocKy();
             entity.StringProperty = "foo";
             HocKy entity2 = new HocKy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocKyService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Delete(QuanLyHocSinhPTNK.Entities.HocKyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maHocKy
            </summary>
            <param name="maHocKy">HocKy pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepLoadByMaHocKy(System.String,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maHocKy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HocKy Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocKy)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HocKy Object</param>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocKy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocKy,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocKy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HocKy Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocKy,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HocKy Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocKy})">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocKy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocKy},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocKy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocKy},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.HocKy)">
            <summary>
            public virtualDeep Saves the <see cref="T:QuanLyHocSinhPTNK.Entities.HocKy"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HocKy Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.HocKy,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HocKy object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HocKy Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HocKy</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocKy})">
            <summary>
            Deep Save the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HocKy} Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocKy},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HocKy Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.HocKyServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.QuanLyService">
            <summary>
             An component type implementation of the 'QuanLy' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.QuanLyServiceBase">
            <summary>
             An object representation of the 'QuanLy' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the QuanLy.cs file instead.
             All custom implementations should be done in the <see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> class.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> instance .
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.CreateQuanLy(System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> instance.
            </summary>
            <param name="maQuanLy"></param>
            <param name="hoTenQuanLy"></param>
            <param name="password"></param>
            <param name="maChucDanh"></param>
            <param name="maPhongBan"></param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetByMaChucDanh(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_QuanLy_ChucDanh key.
            	FK_QuanLy_ChucDanh Description: 
            </summary>
            <param name="maChucDanh"></param>
            <returns>Returns a generic collection of QuanLy objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetByMaChucDanh(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_QuanLy_ChucDanh key.
            	FK_QuanLy_ChucDanh Description: 
            </summary>
            <param name="maChucDanh"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> of <c>QuanLy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetByMaPhongBan(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_QuanLy_PhongBan key.
            	FK_QuanLy_PhongBan Description: 
            </summary>
            <param name="maPhongBan"></param>
            <returns>Returns a generic collection of QuanLy objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetByMaPhongBan(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_QuanLy_PhongBan key.
            	FK_QuanLy_PhongBan Description: 
            </summary>
            <param name="maPhongBan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> of <c>QuanLy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Get(QuanLyHocSinhPTNK.Entities.QuanLyKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetByMaQuanLy(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_QuanLy index.
            </summary>
            <param name="maQuanLy"></param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetByMaQuanLy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_QuanLy index.
            </summary>
            <param name="maQuanLy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuanLy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuanLy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>QuanLy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{QuanLy} of <c>QuanLy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>QuanLy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>QuanLy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>QuanLy</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Insert(QuanLyHocSinhPTNK.Entities.QuanLy)">
            <summary>
            	public virtualmethod that Inserts a QuanLy object into the datasource using a transaction.
            </summary>
            <param name="entity">QuanLy object to Insert.</param>
            <remarks>After Inserting into the datasource, the QuanLy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            QuanLy entity = new QuanLy();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	QuanLyService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Insert(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.QuanLy})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuanLy</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>QuanLy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of QuanLy.
             <code><![CDATA[
             TList<QuanLy> list = new TList<QuanLy>();
             QuanLy entity = new QuanLy();
             entity.StringProperty = "foo";
             QuanLy entity2 = new QuanLy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuanLyService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Update(QuanLyHocSinhPTNK.Entities.QuanLy)">
            <summary>
            	public virtualmethod that Updates a QuanLy object into the datasource using a transaction.
            </summary>
            <param name="entity">QuanLy object to Update.</param>
            <remarks>After Updateing into the datasource, the QuanLy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            QuanLy entity = QuanLyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	QuanLyService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Update(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.QuanLy})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuanLy</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>QuanLy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of QuanLy.
             <code><![CDATA[
             TList<QuanLy> list = new TList<QuanLy>();
             QuanLy entity = new QuanLy();
             entity.StringProperty = "foo";
             QuanLy entity2 = new QuanLy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuanLyService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Save(QuanLyHocSinhPTNK.Entities.QuanLy)">
            <summary>
            	public virtualmethod that Saves a QuanLy object into the datasource using a transaction.
            </summary>
            <param name="entity">QuanLy object to Save.</param>
            <remarks>After Saveing into the datasource, the QuanLy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            QuanLy entity = QuanLyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	QuanLyService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Save(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.QuanLy})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuanLy</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>QuanLy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of QuanLy.
             <code><![CDATA[
             TList<QuanLy> list = new TList<QuanLy>();
             QuanLy entity = new QuanLy();
             entity.StringProperty = "foo";
             QuanLy entity2 = new QuanLy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuanLyService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Delete(QuanLyHocSinhPTNK.Entities.QuanLy)">
            <summary>
            	public virtualmethod that Deletes a QuanLy object into the datasource using a transaction.
            </summary>
            <param name="entity">QuanLy object to Delete.</param>
            <remarks>After Deleteing into the datasource, the QuanLy object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            QuanLy entity = QuanLyService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	QuanLyService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Delete(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.QuanLy})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>QuanLy</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>QuanLy</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of QuanLy.
             <code><![CDATA[
             TList<QuanLy> list = new TList<QuanLy>();
             QuanLy entity = new QuanLy();
             entity.StringProperty = "foo";
             QuanLy entity2 = new QuanLy();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	QuanLyService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Delete(QuanLyHocSinhPTNK.Entities.QuanLyKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maQuanLy
            </summary>
            <param name="maQuanLy">QuanLy pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepLoadByMaQuanLy(System.String,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maQuanLy"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuanLy Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.QuanLy)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">QuanLy Object</param>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.QuanLy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.QuanLy,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.QuanLy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">QuanLy Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.QuanLy,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">QuanLy Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.QuanLy})">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.QuanLy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.QuanLy},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.QuanLy)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.QuanLy},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.QuanLy)">
            <summary>
            public virtualDeep Saves the <see cref="T:QuanLyHocSinhPTNK.Entities.QuanLy"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">QuanLy Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.QuanLy,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the QuanLy object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">QuanLy Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>QuanLy</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.QuanLy})">
            <summary>
            Deep Save the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{QuanLy} Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.QuanLy},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">QuanLy Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.QuanLyServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.QuanLyService.#ctor">
            <summary>
            Initializes a new instance of the QuanLyService class.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.LopHocServiceBase">
            <summary>
             An object representation of the 'LopHoc' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the LopHoc.cs file instead.
             All custom implementations should be done in the <see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> class.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> instance .
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.CreateLopHoc(System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> instance.
            </summary>
            <param name="maLop"></param>
            <param name="tenLop"></param>
            <param name="maKhoi"></param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.GetByMaKhoi(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_LopHoc_Khoi key.
            	FK_LopHoc_Khoi Description: 
            </summary>
            <param name="maKhoi"></param>
            <returns>Returns a generic collection of LopHoc objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.GetByMaKhoi(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_LopHoc_Khoi key.
            	FK_LopHoc_Khoi Description: 
            </summary>
            <param name="maKhoi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Get(QuanLyHocSinhPTNK.Entities.LopHocKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.GetByMaLop(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_LopHoc index.
            </summary>
            <param name="maLop"></param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.GetByMaLop(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_LopHoc index.
            </summary>
            <param name="maLop"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{LopHoc} of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>LopHoc</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Insert(QuanLyHocSinhPTNK.Entities.LopHoc)">
            <summary>
            	public virtualmethod that Inserts a LopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LopHoc object to Insert.</param>
            <remarks>After Inserting into the datasource, the LopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            LopHoc entity = new LopHoc();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	LopHocService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Insert(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.LopHoc})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LopHoc</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>LopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of LopHoc.
             <code><![CDATA[
             TList<LopHoc> list = new TList<LopHoc>();
             LopHoc entity = new LopHoc();
             entity.StringProperty = "foo";
             LopHoc entity2 = new LopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LopHocService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Update(QuanLyHocSinhPTNK.Entities.LopHoc)">
            <summary>
            	public virtualmethod that Updates a LopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LopHoc object to Update.</param>
            <remarks>After Updateing into the datasource, the LopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            LopHoc entity = LopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	LopHocService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Update(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.LopHoc})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LopHoc</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>LopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of LopHoc.
             <code><![CDATA[
             TList<LopHoc> list = new TList<LopHoc>();
             LopHoc entity = new LopHoc();
             entity.StringProperty = "foo";
             LopHoc entity2 = new LopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LopHocService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Save(QuanLyHocSinhPTNK.Entities.LopHoc)">
            <summary>
            	public virtualmethod that Saves a LopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LopHoc object to Save.</param>
            <remarks>After Saveing into the datasource, the LopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            LopHoc entity = LopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	LopHocService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Save(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.LopHoc})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LopHoc</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>LopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of LopHoc.
             <code><![CDATA[
             TList<LopHoc> list = new TList<LopHoc>();
             LopHoc entity = new LopHoc();
             entity.StringProperty = "foo";
             LopHoc entity2 = new LopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LopHocService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Delete(QuanLyHocSinhPTNK.Entities.LopHoc)">
            <summary>
            	public virtualmethod that Deletes a LopHoc object into the datasource using a transaction.
            </summary>
            <param name="entity">LopHoc object to Delete.</param>
            <remarks>After Deleteing into the datasource, the LopHoc object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            LopHoc entity = LopHocService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	LopHocService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Delete(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.LopHoc})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>LopHoc</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>LopHoc</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of LopHoc.
             <code><![CDATA[
             TList<LopHoc> list = new TList<LopHoc>();
             LopHoc entity = new LopHoc();
             entity.StringProperty = "foo";
             LopHoc entity2 = new LopHoc();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	LopHocService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Delete(QuanLyHocSinhPTNK.Entities.LopHocKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maLop
            </summary>
            <param name="maLop">LopHoc pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepLoadByMaLop(System.String,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maLop"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LopHoc Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.LopHoc)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">LopHoc Object</param>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.LopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.LopHoc,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.LopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">LopHoc Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.LopHoc,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">LopHoc Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.LopHoc})">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.LopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.LopHoc},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.LopHoc)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.LopHoc},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.LopHoc)">
            <summary>
            public virtualDeep Saves the <see cref="T:QuanLyHocSinhPTNK.Entities.LopHoc"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">LopHoc Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.LopHoc,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the LopHoc object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">LopHoc Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>LopHoc</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.LopHoc})">
            <summary>
            Deep Save the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{LopHoc} Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.LopHoc},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">LopHoc Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.LopHocServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ProcessorState">
            <summary>
            ProcessorState enumeration.
            </summary>
        </member>
        <member name="F:QuanLyHocSinhPTNK.Services.ProcessorState.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:QuanLyHocSinhPTNK.Services.ProcessorState.Running">
            <summary>
            Running
            </summary>
        </member>
        <member name="F:QuanLyHocSinhPTNK.Services.ProcessorState.Stopped">
            <summary>
            Stopped
            </summary>
        </member>
        <member name="F:QuanLyHocSinhPTNK.Services.ProcessorState.Completed">
            <summary>
            Completed
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.DiemService">
            <summary>
             An component type implementation of the 'Diem' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.DiemServiceBase">
            <summary>
             An object representation of the 'Diem' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Diem.cs file instead.
             All custom implementations should be done in the <see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> class.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> instance .
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.CreateDiem(System.String,System.Double,System.Double,System.Double,System.Double,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> instance.
            </summary>
            <param name="maDiem"></param>
            <param name="diem15Phut"></param>
            <param name="diem1Tiet"></param>
            <param name="diemCuoiKy"></param>
            <param name="dtb"></param>
            <param name="maMon"></param>
            <param name="maBangDiem"></param>
            <param name="maHocKy"></param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetByMaMon(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_Diem_MonHoc key.
            	FK_Diem_MonHoc Description: 
            </summary>
            <param name="maMon"></param>
            <returns>Returns a generic collection of Diem objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetByMaMon(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_Diem_MonHoc key.
            	FK_Diem_MonHoc Description: 
            </summary>
            <param name="maMon"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> of <c>Diem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetByMaHocKy(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_Diem_HocKy key.
            	FK_Diem_HocKy Description: 
            </summary>
            <param name="maHocKy"></param>
            <returns>Returns a generic collection of Diem objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetByMaHocKy(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_Diem_HocKy key.
            	FK_Diem_HocKy Description: 
            </summary>
            <param name="maHocKy"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> of <c>Diem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetByMaBangDiem(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_Diem_BangDiem key.
            	FK_Diem_BangDiem Description: 
            </summary>
            <param name="maBangDiem"></param>
            <returns>Returns a generic collection of Diem objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetByMaBangDiem(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_Diem_BangDiem key.
            	FK_Diem_BangDiem Description: 
            </summary>
            <param name="maBangDiem"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> of <c>Diem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Get(QuanLyHocSinhPTNK.Entities.DiemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetByMaDiem(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_MonHoc index.
            </summary>
            <param name="maDiem"></param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetByMaDiem(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_MonHoc index.
            </summary>
            <param name="maDiem"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Diem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Diem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Diem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Diem} of <c>Diem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Diem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Diem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Diem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Insert(QuanLyHocSinhPTNK.Entities.Diem)">
            <summary>
            	public virtualmethod that Inserts a Diem object into the datasource using a transaction.
            </summary>
            <param name="entity">Diem object to Insert.</param>
            <remarks>After Inserting into the datasource, the Diem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Diem entity = new Diem();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	DiemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Insert(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Diem})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Diem</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Diem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Diem.
             <code><![CDATA[
             TList<Diem> list = new TList<Diem>();
             Diem entity = new Diem();
             entity.StringProperty = "foo";
             Diem entity2 = new Diem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DiemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Update(QuanLyHocSinhPTNK.Entities.Diem)">
            <summary>
            	public virtualmethod that Updates a Diem object into the datasource using a transaction.
            </summary>
            <param name="entity">Diem object to Update.</param>
            <remarks>After Updateing into the datasource, the Diem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Diem entity = DiemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	DiemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Update(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Diem})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Diem</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Diem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Diem.
             <code><![CDATA[
             TList<Diem> list = new TList<Diem>();
             Diem entity = new Diem();
             entity.StringProperty = "foo";
             Diem entity2 = new Diem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DiemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Save(QuanLyHocSinhPTNK.Entities.Diem)">
            <summary>
            	public virtualmethod that Saves a Diem object into the datasource using a transaction.
            </summary>
            <param name="entity">Diem object to Save.</param>
            <remarks>After Saveing into the datasource, the Diem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Diem entity = DiemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	DiemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Save(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Diem})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Diem</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Diem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Diem.
             <code><![CDATA[
             TList<Diem> list = new TList<Diem>();
             Diem entity = new Diem();
             entity.StringProperty = "foo";
             Diem entity2 = new Diem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DiemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Delete(QuanLyHocSinhPTNK.Entities.Diem)">
            <summary>
            	public virtualmethod that Deletes a Diem object into the datasource using a transaction.
            </summary>
            <param name="entity">Diem object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Diem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Diem entity = DiemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	DiemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Delete(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Diem})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Diem</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Diem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Diem.
             <code><![CDATA[
             TList<Diem> list = new TList<Diem>();
             Diem entity = new Diem();
             entity.StringProperty = "foo";
             Diem entity2 = new Diem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	DiemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Delete(QuanLyHocSinhPTNK.Entities.DiemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maDiem
            </summary>
            <param name="maDiem">Diem pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepLoadByMaDiem(System.String,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maDiem"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Diem Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Diem)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Diem Object</param>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Diem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Diem,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Diem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Diem Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Diem,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Diem Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Diem})">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Diem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Diem},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Diem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Diem},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.Diem)">
            <summary>
            public virtualDeep Saves the <see cref="T:QuanLyHocSinhPTNK.Entities.Diem"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Diem Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.Diem,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Diem object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Diem Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Diem</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Diem})">
            <summary>
            Deep Save the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Diem} Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Diem},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Diem Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.DiemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DiemService.#ctor">
            <summary>
            Initializes a new instance of the DiemService class.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.HocSinhService">
            <summary>
             An component type implementation of the 'HocSinh' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.HocSinhServiceBase">
            <summary>
             An object representation of the 'HocSinh' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the HocSinh.cs file instead.
             All custom implementations should be done in the <see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> class.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> instance .
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.CreateHocSinh(System.String,System.String,System.String,System.DateTime,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> instance.
            </summary>
            <param name="maHocSinh"></param>
            <param name="hoTenHocSinh"></param>
            <param name="gioiTinh"></param>
            <param name="ngaySinh"></param>
            <param name="diaChi"></param>
            <param name="email"></param>
            <param name="xepLoai"></param>
            <param name="hanhKiem"></param>
            <param name="password"></param>
            <param name="maLop"></param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.GetByMaLop(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_HocSinh_LopHoc key.
            	FK_HocSinh_LopHoc Description: 
            </summary>
            <param name="maLop"></param>
            <returns>Returns a generic collection of HocSinh objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.GetByMaLop(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_HocSinh_LopHoc key.
            	FK_HocSinh_LopHoc Description: 
            </summary>
            <param name="maLop"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> of <c>HocSinh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Get(QuanLyHocSinhPTNK.Entities.HocSinhKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.GetByMaHocSinh(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_HocSinh index.
            </summary>
            <param name="maHocSinh"></param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.GetByMaHocSinh(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_HocSinh index.
            </summary>
            <param name="maHocSinh"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocSinh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocSinh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>HocSinh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{HocSinh} of <c>HocSinh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>HocSinh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>HocSinh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>HocSinh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Insert(QuanLyHocSinhPTNK.Entities.HocSinh)">
            <summary>
            	public virtualmethod that Inserts a HocSinh object into the datasource using a transaction.
            </summary>
            <param name="entity">HocSinh object to Insert.</param>
            <remarks>After Inserting into the datasource, the HocSinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            HocSinh entity = new HocSinh();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	HocSinhService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Insert(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocSinh})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocSinh</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>HocSinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of HocSinh.
             <code><![CDATA[
             TList<HocSinh> list = new TList<HocSinh>();
             HocSinh entity = new HocSinh();
             entity.StringProperty = "foo";
             HocSinh entity2 = new HocSinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocSinhService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Update(QuanLyHocSinhPTNK.Entities.HocSinh)">
            <summary>
            	public virtualmethod that Updates a HocSinh object into the datasource using a transaction.
            </summary>
            <param name="entity">HocSinh object to Update.</param>
            <remarks>After Updateing into the datasource, the HocSinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            HocSinh entity = HocSinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	HocSinhService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Update(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocSinh})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocSinh</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>HocSinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of HocSinh.
             <code><![CDATA[
             TList<HocSinh> list = new TList<HocSinh>();
             HocSinh entity = new HocSinh();
             entity.StringProperty = "foo";
             HocSinh entity2 = new HocSinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocSinhService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Save(QuanLyHocSinhPTNK.Entities.HocSinh)">
            <summary>
            	public virtualmethod that Saves a HocSinh object into the datasource using a transaction.
            </summary>
            <param name="entity">HocSinh object to Save.</param>
            <remarks>After Saveing into the datasource, the HocSinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            HocSinh entity = HocSinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	HocSinhService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Save(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocSinh})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocSinh</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>HocSinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of HocSinh.
             <code><![CDATA[
             TList<HocSinh> list = new TList<HocSinh>();
             HocSinh entity = new HocSinh();
             entity.StringProperty = "foo";
             HocSinh entity2 = new HocSinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocSinhService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Delete(QuanLyHocSinhPTNK.Entities.HocSinh)">
            <summary>
            	public virtualmethod that Deletes a HocSinh object into the datasource using a transaction.
            </summary>
            <param name="entity">HocSinh object to Delete.</param>
            <remarks>After Deleteing into the datasource, the HocSinh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            HocSinh entity = HocSinhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	HocSinhService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Delete(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocSinh})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>HocSinh</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>HocSinh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of HocSinh.
             <code><![CDATA[
             TList<HocSinh> list = new TList<HocSinh>();
             HocSinh entity = new HocSinh();
             entity.StringProperty = "foo";
             HocSinh entity2 = new HocSinh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	HocSinhService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Delete(QuanLyHocSinhPTNK.Entities.HocSinhKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maHocSinh
            </summary>
            <param name="maHocSinh">HocSinh pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepLoadByMaHocSinh(System.String,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maHocSinh"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HocSinh Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocSinh)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">HocSinh Object</param>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocSinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocSinh,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocSinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">HocSinh Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocSinh,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">HocSinh Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocSinh})">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocSinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocSinh},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.HocSinh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocSinh},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.HocSinh)">
            <summary>
            public virtualDeep Saves the <see cref="T:QuanLyHocSinhPTNK.Entities.HocSinh"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">HocSinh Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.HocSinh,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the HocSinh object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">HocSinh Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>HocSinh</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocSinh})">
            <summary>
            Deep Save the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{HocSinh} Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.HocSinh},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">HocSinh Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.HocSinhServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocSinhService.#ctor">
            <summary>
            Initializes a new instance of the HocSinhService class.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.IProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.IProcessorResult.AddBrokenRulesList(System.Type,QuanLyHocSinhPTNK.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.IProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.IProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.IProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ProcessStartingHandler">
            <summary>
            ProcessStartingHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ProcessEndedHandler">
            <summary>
            ProcessEndedHandler
            </summary>
            <param name="sender"></param>
            <param name="args"></param>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ProcessorEventArgs">
            <summary>
            ProcessorEventArgs
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ProcessorEventArgs.#ctor(QuanLyHocSinhPTNK.Services.ProcessorBase)">
            <summary>
            Initializes a new instance of the ProcessorEventArgs class.
            </summary>
            <param name="processor"></param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ProcessorEventArgs.Processor">
            <summary>
            Gets or sets the processor.
            </summary>
            <value>The processor.</value>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.HocKyService">
            <summary>
             An component type implementation of the 'HocKy' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.HocKyService.#ctor">
            <summary>
            Initializes a new instance of the HocKyService class.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.KhoiService">
            <summary>
             An component type implementation of the 'Khoi' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.KhoiServiceBase">
            <summary>
             An object representation of the 'Khoi' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the Khoi.cs file instead.
             All custom implementations should be done in the <see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> class.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> instance .
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.CreateKhoi(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> instance.
            </summary>
            <param name="maKhoi"></param>
            <param name="tenKhoi"></param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Get(QuanLyHocSinhPTNK.Entities.KhoiKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.GetByMaKhoi(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_Khoi index.
            </summary>
            <param name="maKhoi"></param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.GetByMaKhoi(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_Khoi index.
            </summary>
            <param name="maKhoi"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{Khoi} of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>Khoi</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Insert(QuanLyHocSinhPTNK.Entities.Khoi)">
            <summary>
            	public virtualmethod that Inserts a Khoi object into the datasource using a transaction.
            </summary>
            <param name="entity">Khoi object to Insert.</param>
            <remarks>After Inserting into the datasource, the Khoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            Khoi entity = new Khoi();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	KhoiService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Insert(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Khoi})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Khoi</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>Khoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of Khoi.
             <code><![CDATA[
             TList<Khoi> list = new TList<Khoi>();
             Khoi entity = new Khoi();
             entity.StringProperty = "foo";
             Khoi entity2 = new Khoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Update(QuanLyHocSinhPTNK.Entities.Khoi)">
            <summary>
            	public virtualmethod that Updates a Khoi object into the datasource using a transaction.
            </summary>
            <param name="entity">Khoi object to Update.</param>
            <remarks>After Updateing into the datasource, the Khoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            Khoi entity = KhoiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	KhoiService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Update(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Khoi})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Khoi</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>Khoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of Khoi.
             <code><![CDATA[
             TList<Khoi> list = new TList<Khoi>();
             Khoi entity = new Khoi();
             entity.StringProperty = "foo";
             Khoi entity2 = new Khoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Save(QuanLyHocSinhPTNK.Entities.Khoi)">
            <summary>
            	public virtualmethod that Saves a Khoi object into the datasource using a transaction.
            </summary>
            <param name="entity">Khoi object to Save.</param>
            <remarks>After Saveing into the datasource, the Khoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            Khoi entity = KhoiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	KhoiService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Save(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Khoi})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Khoi</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>Khoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of Khoi.
             <code><![CDATA[
             TList<Khoi> list = new TList<Khoi>();
             Khoi entity = new Khoi();
             entity.StringProperty = "foo";
             Khoi entity2 = new Khoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Delete(QuanLyHocSinhPTNK.Entities.Khoi)">
            <summary>
            	public virtualmethod that Deletes a Khoi object into the datasource using a transaction.
            </summary>
            <param name="entity">Khoi object to Delete.</param>
            <remarks>After Deleteing into the datasource, the Khoi object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            Khoi entity = KhoiService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	KhoiService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Delete(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Khoi})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>Khoi</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>Khoi</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of Khoi.
             <code><![CDATA[
             TList<Khoi> list = new TList<Khoi>();
             Khoi entity = new Khoi();
             entity.StringProperty = "foo";
             Khoi entity2 = new Khoi();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	KhoiService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Delete(QuanLyHocSinhPTNK.Entities.KhoiKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maKhoi
            </summary>
            <param name="maKhoi">Khoi pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepLoadByMaKhoi(System.String,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maKhoi"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Khoi Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Khoi)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">Khoi Object</param>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Khoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Khoi,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Khoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">Khoi Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Khoi,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">Khoi Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Khoi})">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Khoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Khoi},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.Khoi)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Khoi},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.Khoi)">
            <summary>
            public virtualDeep Saves the <see cref="T:QuanLyHocSinhPTNK.Entities.Khoi"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">Khoi Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.Khoi,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the Khoi object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">Khoi Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>Khoi</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Khoi})">
            <summary>
            Deep Save the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{Khoi} Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.Khoi},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">Khoi Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.KhoiServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.KhoiService.#ctor">
            <summary>
            Initializes a new instance of the KhoiService class.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ChucDanhService">
            <summary>
             An component type implementation of the 'ChucDanh' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase">
            <summary>
             An object representation of the 'ChucDanh' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the ChucDanh.cs file instead.
             All custom implementations should be done in the <see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> class.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> instance .
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.CreateChucDanh(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> instance.
            </summary>
            <param name="maChucDanh"></param>
            <param name="tenChucDanh"></param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Get(QuanLyHocSinhPTNK.Entities.ChucDanhKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.GetByMaChucDanh(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_ChucDanh index.
            </summary>
            <param name="maChucDanh"></param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.GetByMaChucDanh(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_ChucDanh index.
            </summary>
            <param name="maChucDanh"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChucDanh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChucDanh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>ChucDanh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{ChucDanh} of <c>ChucDanh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>ChucDanh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>ChucDanh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>ChucDanh</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Insert(QuanLyHocSinhPTNK.Entities.ChucDanh)">
            <summary>
            	public virtualmethod that Inserts a ChucDanh object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucDanh object to Insert.</param>
            <remarks>After Inserting into the datasource, the ChucDanh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            ChucDanh entity = new ChucDanh();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	ChucDanhService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Insert(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.ChucDanh})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucDanh</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>ChucDanh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of ChucDanh.
             <code><![CDATA[
             TList<ChucDanh> list = new TList<ChucDanh>();
             ChucDanh entity = new ChucDanh();
             entity.StringProperty = "foo";
             ChucDanh entity2 = new ChucDanh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucDanhService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Update(QuanLyHocSinhPTNK.Entities.ChucDanh)">
            <summary>
            	public virtualmethod that Updates a ChucDanh object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucDanh object to Update.</param>
            <remarks>After Updateing into the datasource, the ChucDanh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            ChucDanh entity = ChucDanhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	ChucDanhService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Update(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.ChucDanh})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucDanh</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>ChucDanh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of ChucDanh.
             <code><![CDATA[
             TList<ChucDanh> list = new TList<ChucDanh>();
             ChucDanh entity = new ChucDanh();
             entity.StringProperty = "foo";
             ChucDanh entity2 = new ChucDanh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucDanhService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Save(QuanLyHocSinhPTNK.Entities.ChucDanh)">
            <summary>
            	public virtualmethod that Saves a ChucDanh object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucDanh object to Save.</param>
            <remarks>After Saveing into the datasource, the ChucDanh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            ChucDanh entity = ChucDanhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	ChucDanhService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Save(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.ChucDanh})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucDanh</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>ChucDanh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of ChucDanh.
             <code><![CDATA[
             TList<ChucDanh> list = new TList<ChucDanh>();
             ChucDanh entity = new ChucDanh();
             entity.StringProperty = "foo";
             ChucDanh entity2 = new ChucDanh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucDanhService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Delete(QuanLyHocSinhPTNK.Entities.ChucDanh)">
            <summary>
            	public virtualmethod that Deletes a ChucDanh object into the datasource using a transaction.
            </summary>
            <param name="entity">ChucDanh object to Delete.</param>
            <remarks>After Deleteing into the datasource, the ChucDanh object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            ChucDanh entity = ChucDanhService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	ChucDanhService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Delete(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.ChucDanh})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>ChucDanh</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>ChucDanh</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of ChucDanh.
             <code><![CDATA[
             TList<ChucDanh> list = new TList<ChucDanh>();
             ChucDanh entity = new ChucDanh();
             entity.StringProperty = "foo";
             ChucDanh entity2 = new ChucDanh();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	ChucDanhService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Delete(QuanLyHocSinhPTNK.Entities.ChucDanhKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maChucDanh
            </summary>
            <param name="maChucDanh">ChucDanh pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepLoadByMaChucDanh(System.String,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maChucDanh"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ChucDanh Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.ChucDanh)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">ChucDanh Object</param>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.ChucDanh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.ChucDanh,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.ChucDanh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">ChucDanh Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.ChucDanh,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">ChucDanh Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.ChucDanh})">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.ChucDanh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.ChucDanh},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.ChucDanh)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.ChucDanh},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.ChucDanh)">
            <summary>
            public virtualDeep Saves the <see cref="T:QuanLyHocSinhPTNK.Entities.ChucDanh"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">ChucDanh Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.ChucDanh,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the ChucDanh object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">ChucDanh Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>ChucDanh</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.ChucDanh})">
            <summary>
            Deep Save the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{ChucDanh} Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.ChucDanh},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">ChucDanh Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ChucDanhServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ChucDanhService.#ctor">
            <summary>
            Initializes a new instance of the ChucDanhService class.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.BangDiemService">
            <summary>
             An component type implementation of the 'BangDiem' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.BangDiemServiceBase">
            <summary>
             An object representation of the 'BangDiem' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the BangDiem.cs file instead.
             All custom implementations should be done in the <see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> class.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> instance .
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.CreateBangDiem(System.String,System.Double,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> instance.
            </summary>
            <param name="maBangDiem"></param>
            <param name="dtb"></param>
            <param name="maHocSinh"></param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.GetByMaHocSinh(System.String)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_BangDiem_HocSinh key.
            	FK_BangDiem_HocSinh Description: 
            </summary>
            <param name="maHocSinh"></param>
            <returns>Returns a generic collection of BangDiem objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.GetByMaHocSinh(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	public virtual method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the FK_BangDiem_HocSinh key.
            	FK_BangDiem_HocSinh Description: 
            </summary>
            <param name="maHocSinh"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">Out parameter, number of total rows in given query.</param>
            <returns>Returns a collection <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> of <c>BangDiem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Get(QuanLyHocSinhPTNK.Entities.BangDiemKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.GetByMaBangDiem(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_BangDiem index.
            </summary>
            <param name="maBangDiem"></param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.GetByMaBangDiem(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_BangDiem index.
            </summary>
            <param name="maBangDiem"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BangDiem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BangDiem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BangDiem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{BangDiem} of <c>BangDiem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>BangDiem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>BangDiem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BangDiem</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Insert(QuanLyHocSinhPTNK.Entities.BangDiem)">
            <summary>
            	public virtualmethod that Inserts a BangDiem object into the datasource using a transaction.
            </summary>
            <param name="entity">BangDiem object to Insert.</param>
            <remarks>After Inserting into the datasource, the BangDiem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            BangDiem entity = new BangDiem();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BangDiemService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Insert(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangDiem})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BangDiem</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>BangDiem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of BangDiem.
             <code><![CDATA[
             TList<BangDiem> list = new TList<BangDiem>();
             BangDiem entity = new BangDiem();
             entity.StringProperty = "foo";
             BangDiem entity2 = new BangDiem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BangDiemService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Update(QuanLyHocSinhPTNK.Entities.BangDiem)">
            <summary>
            	public virtualmethod that Updates a BangDiem object into the datasource using a transaction.
            </summary>
            <param name="entity">BangDiem object to Update.</param>
            <remarks>After Updateing into the datasource, the BangDiem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            BangDiem entity = BangDiemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BangDiemService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Update(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangDiem})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BangDiem</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>BangDiem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of BangDiem.
             <code><![CDATA[
             TList<BangDiem> list = new TList<BangDiem>();
             BangDiem entity = new BangDiem();
             entity.StringProperty = "foo";
             BangDiem entity2 = new BangDiem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BangDiemService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Save(QuanLyHocSinhPTNK.Entities.BangDiem)">
            <summary>
            	public virtualmethod that Saves a BangDiem object into the datasource using a transaction.
            </summary>
            <param name="entity">BangDiem object to Save.</param>
            <remarks>After Saveing into the datasource, the BangDiem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            BangDiem entity = BangDiemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	BangDiemService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Save(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangDiem})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BangDiem</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>BangDiem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of BangDiem.
             <code><![CDATA[
             TList<BangDiem> list = new TList<BangDiem>();
             BangDiem entity = new BangDiem();
             entity.StringProperty = "foo";
             BangDiem entity2 = new BangDiem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BangDiemService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Delete(QuanLyHocSinhPTNK.Entities.BangDiem)">
            <summary>
            	public virtualmethod that Deletes a BangDiem object into the datasource using a transaction.
            </summary>
            <param name="entity">BangDiem object to Delete.</param>
            <remarks>After Deleteing into the datasource, the BangDiem object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            BangDiem entity = BangDiemService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BangDiemService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Delete(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangDiem})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BangDiem</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>BangDiem</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of BangDiem.
             <code><![CDATA[
             TList<BangDiem> list = new TList<BangDiem>();
             BangDiem entity = new BangDiem();
             entity.StringProperty = "foo";
             BangDiem entity2 = new BangDiem();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BangDiemService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Delete(QuanLyHocSinhPTNK.Entities.BangDiemKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maBangDiem
            </summary>
            <param name="maBangDiem">BangDiem pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepLoadByMaBangDiem(System.String,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maBangDiem"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BangDiem Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangDiem)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">BangDiem Object</param>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangDiem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangDiem,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangDiem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">BangDiem Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangDiem,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BangDiem Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangDiem})">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangDiem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangDiem},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangDiem)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangDiem},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.BangDiem)">
            <summary>
            public virtualDeep Saves the <see cref="T:QuanLyHocSinhPTNK.Entities.BangDiem"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">BangDiem Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.BangDiem,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the BangDiem object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">BangDiem Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>BangDiem</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangDiem})">
            <summary>
            Deep Save the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{BangDiem} Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangDiem},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">BangDiem Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.BangDiemServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangDiemService.#ctor">
            <summary>
            Initializes a new instance of the BangDiemService class.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase">
            <summary>
             An object representation of the 'BangThamSo' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the BangThamSo.cs file instead.
             All custom implementations should be done in the <see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> class.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> instance .
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.CreateBangThamSo(System.String,System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Int32,System.Int32)">
            <summary>
             A simple factory method to create a new <see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> instance.
            </summary>
            <param name="maBangThamSo"></param>
            <param name="soTuoiToiThieu"></param>
            <param name="soTuoiToiDa"></param>
            <param name="siSoToiDa"></param>
            <param name="soMonHoc"></param>
            <param name="diemChuan"></param>
            <param name="soQuanLyToiDa"></param>
            <param name="soTietHocLienTiep"></param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Get(QuanLyHocSinhPTNK.Entities.BangThamSoKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.GetByMaBangThamSo(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_BangThamSo index.
            </summary>
            <param name="maBangThamSo"></param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.GetByMaBangThamSo(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_BangThamSo index.
            </summary>
            <param name="maBangThamSo"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BangThamSo</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BangThamSo</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>BangThamSo</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{BangThamSo} of <c>BangThamSo</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>BangThamSo</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>BangThamSo</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>BangThamSo</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Insert(QuanLyHocSinhPTNK.Entities.BangThamSo)">
            <summary>
            	public virtualmethod that Inserts a BangThamSo object into the datasource using a transaction.
            </summary>
            <param name="entity">BangThamSo object to Insert.</param>
            <remarks>After Inserting into the datasource, the BangThamSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            BangThamSo entity = new BangThamSo();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	BangThamSoService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Insert(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangThamSo})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BangThamSo</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>BangThamSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of BangThamSo.
             <code><![CDATA[
             TList<BangThamSo> list = new TList<BangThamSo>();
             BangThamSo entity = new BangThamSo();
             entity.StringProperty = "foo";
             BangThamSo entity2 = new BangThamSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BangThamSoService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Update(QuanLyHocSinhPTNK.Entities.BangThamSo)">
            <summary>
            	public virtualmethod that Updates a BangThamSo object into the datasource using a transaction.
            </summary>
            <param name="entity">BangThamSo object to Update.</param>
            <remarks>After Updateing into the datasource, the BangThamSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            BangThamSo entity = BangThamSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	BangThamSoService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Update(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangThamSo})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BangThamSo</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>BangThamSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of BangThamSo.
             <code><![CDATA[
             TList<BangThamSo> list = new TList<BangThamSo>();
             BangThamSo entity = new BangThamSo();
             entity.StringProperty = "foo";
             BangThamSo entity2 = new BangThamSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BangThamSoService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Save(QuanLyHocSinhPTNK.Entities.BangThamSo)">
            <summary>
            	public virtualmethod that Saves a BangThamSo object into the datasource using a transaction.
            </summary>
            <param name="entity">BangThamSo object to Save.</param>
            <remarks>After Saveing into the datasource, the BangThamSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            BangThamSo entity = BangThamSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	BangThamSoService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Save(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangThamSo})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BangThamSo</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>BangThamSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of BangThamSo.
             <code><![CDATA[
             TList<BangThamSo> list = new TList<BangThamSo>();
             BangThamSo entity = new BangThamSo();
             entity.StringProperty = "foo";
             BangThamSo entity2 = new BangThamSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BangThamSoService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Delete(QuanLyHocSinhPTNK.Entities.BangThamSo)">
            <summary>
            	public virtualmethod that Deletes a BangThamSo object into the datasource using a transaction.
            </summary>
            <param name="entity">BangThamSo object to Delete.</param>
            <remarks>After Deleteing into the datasource, the BangThamSo object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            BangThamSo entity = BangThamSoService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	BangThamSoService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Delete(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangThamSo})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>BangThamSo</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>BangThamSo</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of BangThamSo.
             <code><![CDATA[
             TList<BangThamSo> list = new TList<BangThamSo>();
             BangThamSo entity = new BangThamSo();
             entity.StringProperty = "foo";
             BangThamSo entity2 = new BangThamSo();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	BangThamSoService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Delete(QuanLyHocSinhPTNK.Entities.BangThamSoKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maBangThamSo
            </summary>
            <param name="maBangThamSo">BangThamSo pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepLoadByMaBangThamSo(System.String,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maBangThamSo"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BangThamSo Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangThamSo)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">BangThamSo Object</param>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangThamSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangThamSo,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangThamSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">BangThamSo Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangThamSo,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">BangThamSo Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangThamSo})">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangThamSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangThamSo},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.BangThamSo)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangThamSo},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.BangThamSo)">
            <summary>
            public virtualDeep Saves the <see cref="T:QuanLyHocSinhPTNK.Entities.BangThamSo"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">BangThamSo Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.BangThamSo,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the BangThamSo object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">BangThamSo Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>BangThamSo</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangThamSo})">
            <summary>
            Deep Save the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{BangThamSo} Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.BangThamSo},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">BangThamSo Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.BangThamSoServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.BangThamSoService">
            <summary>
             An component type implementation of the 'BangThamSo' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.BangThamSoService.#ctor">
            <summary>
            Initializes a new instance of the BangThamSoService class.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.PhongBanServiceBase">
            <summary>
             An object representation of the 'PhongBan' table.
            </summary>
             <remarks>
             IMPORTANT!!! You should not modify this partial  class, modify the PhongBan.cs file instead.
             All custom implementations should be done in the <see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> class.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.#ctor">
            <summary>
             Creates a new <see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> instance .
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.CreatePhongBan(System.String,System.String)">
            <summary>
             A simple factory method to create a new <see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> instance.
            </summary>
            <param name="maPhongBan"></param>
            <param name="tenPhongBan"></param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Get(QuanLyHocSinhPTNK.Entities.PhongBanKey)">
            <summary>
            	Gets a row from the DataSource based on its primary key.
            </summary>
            <param name="key">The unique identifier of the row to retrieve.</param>
            <returns>Returns an instance of the Entity class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.GetByMaPhongBan(System.String)">
            <summary>
             method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_PhongBan index.
            </summary>
            <param name="maPhongBan"></param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.GetByMaPhongBan(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
             Method that Gets rows in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the datasource based on the primary key PK_PhongBan index.
            </summary>
            <param name="maPhongBan"></param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Page length of records you would like to retrieve</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> class.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.GetAll">
            <summary>
            Get a complete collection of <see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> entities.
            </summary>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.GetAll(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get a set portion of a complete list of <see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> entities
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter, number of total rows in given query.</param>
            <returns>a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> </returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.GetPaged(System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PhongBan</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.GetPaged(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> rows from the DataSource.
            </summary>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PhongBan</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.GetPaged(System.String,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Gets a page of entity rows with a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> from the DataSource with a where clause and order by clause.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC).</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">Out Parameter, Number of rows in the DataSource.</param>
            <remarks></remarks>
            <returns>Returns a typed collection of <c>PhongBan</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.GetTotalItems(System.String,System.Int32@)">
            <summary>
            Gets the number of rows in the DataSource that match the specified whereClause.
            This method is only provided as a workaround for the ObjectDataSource's need to 
            execute another method to discover the total count instead of using another param, like our out param.  
            This method should be avoided if using the ObjectDataSource or another method.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="totalCount">Number of rows in the DataSource.</param>
            <returns>Returns the number of rows.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Find(System.String)">
            <summary>
            Attempts to do a parameterized version of a simple whereclause. 
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection of Entity objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Find(System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            Returns rows meeting the whereClause condition from the DataSource.
            </summary>
            <param name="whereClause">Specifies the condition for the rows returned by a query (Name='John Doe', Name='John Doe' AND Id='1', Name='John Doe' OR Id='1').</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="totalCount">out parameter to get total records for query</param>
            <remarks>Does NOT Support Advanced Operations such as SubSelects.  See GetPaged for that functionality.</remarks>
            <returns>Returns a typed collection TList{PhongBan} of <c>PhongBan</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <returns>Returns a typed collection of <c>PhongBan</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <returns>Returns a typed collection of <c>PhongBan</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Find(QuanLyHocSinhPTNK.Data.IFilterParameterCollection,System.String,System.Int32,System.Int32,System.Int32@)">
            <summary>
            	Returns rows from the DataSource that meet the parameter conditions.
            </summary>
            <param name="parameters">A collection of <see cref="T:QuanLyHocSinhPTNK.Data.SqlFilterParameter"/> objects.</param>
            <param name="orderBy">Specifies the sort criteria for the rows in the DataSource (Name ASC; BirthDay DESC, Name ASC);</param>
            <param name="start">Row number at which to start reading.</param>
            <param name="pageLength">Number of rows to return.</param>
            <param name="count">out. The number of rows that match this query.</param>
            <returns>Returns a typed collection of <c>PhongBan</c> objects.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Insert(QuanLyHocSinhPTNK.Entities.PhongBan)">
            <summary>
            	public virtualmethod that Inserts a PhongBan object into the datasource using a transaction.
            </summary>
            <param name="entity">PhongBan object to Insert.</param>
            <remarks>After Inserting into the datasource, the PhongBan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Insert Method with an already open transaction.
            <code>
            PhongBan entity = new PhongBan();
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Insert Child entity, Then Parent Entity
            	ChildObjectTypeService.Insert(entity.ChildObjectSource);
            	PhongBanService.Insert(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Insert(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.PhongBan})">
             <summary>
             	public virtual method that Inserts rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhongBan</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Insert.</param>
             <remarks>
            		This function will only Insert entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Inserting the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Inserting into the datasource, the <c>PhongBan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Insert.</returns>
             <example>
             The following code shows the usage of the Insert Method with a collection of PhongBan.
             <code><![CDATA[
             TList<PhongBan> list = new TList<PhongBan>();
             PhongBan entity = new PhongBan();
             entity.StringProperty = "foo";
             PhongBan entity2 = new PhongBan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhongBanService.Insert(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Update(QuanLyHocSinhPTNK.Entities.PhongBan)">
            <summary>
            	public virtualmethod that Updates a PhongBan object into the datasource using a transaction.
            </summary>
            <param name="entity">PhongBan object to Update.</param>
            <remarks>After Updateing into the datasource, the PhongBan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Update Method with an already open transaction.
            <code>
            PhongBan entity = PhongBanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Update Child entity, Then Parent Entity
            	ChildObjectTypeService.Update(entity.ChildObjectSource);
            	PhongBanService.Update(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Update(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.PhongBan})">
             <summary>
             	public virtual method that Updates rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhongBan</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Update.</param>
             <remarks>
            		This function will only Update entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Updateing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Updateing into the datasource, the <c>PhongBan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Update.</returns>
             <example>
             The following code shows the usage of the Update Method with a collection of PhongBan.
             <code><![CDATA[
             TList<PhongBan> list = new TList<PhongBan>();
             PhongBan entity = new PhongBan();
             entity.StringProperty = "foo";
             PhongBan entity2 = new PhongBan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhongBanService.Update(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Save(QuanLyHocSinhPTNK.Entities.PhongBan)">
            <summary>
            	public virtualmethod that Saves a PhongBan object into the datasource using a transaction.
            </summary>
            <param name="entity">PhongBan object to Save.</param>
            <remarks>After Saveing into the datasource, the PhongBan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Save Method with an already open transaction.
            <code>
            PhongBan entity = PhongBanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Save Child entity, Then Parent Entity
            	ChildObjectTypeService.Save(entity.ChildObjectSource);
            	PhongBanService.Save(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Save(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.PhongBan})">
             <summary>
             	public virtual method that Saves rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhongBan</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Save.</param>
             <remarks>
            		This function will only Save entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Saveing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Saveing into the datasource, the <c>PhongBan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Save.</returns>
             <example>
             The following code shows the usage of the Save Method with a collection of PhongBan.
             <code><![CDATA[
             TList<PhongBan> list = new TList<PhongBan>();
             PhongBan entity = new PhongBan();
             entity.StringProperty = "foo";
             PhongBan entity2 = new PhongBan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhongBanService.Save(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Delete(QuanLyHocSinhPTNK.Entities.PhongBan)">
            <summary>
            	public virtualmethod that Deletes a PhongBan object into the datasource using a transaction.
            </summary>
            <param name="entity">PhongBan object to Delete.</param>
            <remarks>After Deleteing into the datasource, the PhongBan object will be updated
            to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
            <returns>Returns bool that the operation is successful.</returns>
            <example>
            The following code shows the usage of the Delete Method with an already open transaction.
            <code>
            PhongBan entity = PhongBanService.GetByPrimaryKeyColumn(1234);
            entity.StringProperty = "foo";
            entity.IntProperty = 12;
            entity.ChildObjectSource.StringProperty = "bar";
            TransactionManager tm = null;
            try
            {
            	tm = ConnectionContext.CreateTransaction();
            	//Delete Child entity, Then Parent Entity
            	ChildObjectTypeService.Delete(entity.ChildObjectSource);
            	PhongBanService.Delete(entity);
            }
            catch (Exception e)
            {
            	if (tm != null &amp;&amp; tm.IsOpen) tm.Rollback();
            	if (DomainUtil.HandleException(e, name)) throw;
            }
            </code>
            </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Delete(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.PhongBan})">
             <summary>
             	public virtual method that Deletes rows in <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> to the datasource.
             </summary>
             <param name="entityCollection"><c>PhongBan</c> objects in a <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object to Delete.</param>
             <remarks>
            		This function will only Delete entity objects marked as dirty
            		and have an identity field equal to zero.
            		Upon Deleteing the objects, each dirty object will have the public
            		method <c>Object.AcceptChanges()</c> called to make it clean.
             	After Deleteing into the datasource, the <c>PhongBan</c> objects will be updated
             	to refelect any changes made by the datasource. (ie: identity or computed columns)
            </remarks>
             <returns>Returns the number of successful Delete.</returns>
             <example>
             The following code shows the usage of the Delete Method with a collection of PhongBan.
             <code><![CDATA[
             TList<PhongBan> list = new TList<PhongBan>();
             PhongBan entity = new PhongBan();
             entity.StringProperty = "foo";
             PhongBan entity2 = new PhongBan();
             entity.StringProperty = "bar";
             list.Add(entity);
             list.Add(entity2);
            	PhongBanService.Delete(list);
            	}
            	catch (Exception e)
            	{
            		if (DomainUtil.HandleException(e, name)) throw;
            	}
             ]]></code>
             </example>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Delete(QuanLyHocSinhPTNK.Entities.PhongBanKey)">
            <summary>
            	Deletes a row from the DataSource.
            </summary>
            <param name="key">The unique identifier of the row to delete.</param>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.Delete(System.String)">
            <summary>
            	Deletes a row from the DataSource based on the PK'S System.String maPhongBan
            </summary>
            <param name="maPhongBan">PhongBan pk id.</param>
            <remarks>Deletes based on primary key(s).</remarks>
            <returns>Returns true if operation suceeded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepLoadByMaPhongBan(System.String,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the requested <see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> by the entity keys.  The criteria of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <param name="maPhongBan"></param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PhongBan Property Collection Type Array To Include or Exclude from Load</param>
            <returns>Returns an instance of the <see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> class and DeepLoaded.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.PhongBan)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <param name="entity">PhongBan Object</param>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.PhongBan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.PhongBan,System.Boolean)">
            <summary>
            public virtualDeep Load the IEntity object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.PhongBan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entity">PhongBan Object</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.PhongBan,System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            public virtualDeep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.IEntity"/> object with criteria based of the child 
            property collections only N Levels Deep based on the <see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/>.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire object graph.
            </remarks>
            <param name="entity">The <see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> object to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively load all Property Collections that are descendants of this instance. 
            If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType">DeepLoadType Enumeration to Include/Exclude object property collections from Load.</param>
            <param name="childTypes">PhongBan Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.PhongBan})">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections only 1 Level Deep.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.PhongBan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.PhongBan},System.Boolean)">
            <summary>
            Deep Loads the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object.
            </summary>
            <remarks>
            <seealso cref="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.PhongBan)"/> overloaded methods for a recursive N Level deep loading method.
            </remarks>
            <param name="entityCollection">the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object to deep loads.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepLoad(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.PhongBan},System.Boolean,QuanLyHocSinhPTNK.Data.DeepLoadType,System.Type[])">
            <summary>
            Deep Loads the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections only N Levels Deep based on the DeepLoadType.
            </summary>
            <remarks>
            Use this method with caution as it is possible to DeepLoad with Recursion and traverse an entire collection's object graph.
            </remarks>
            <param name="entityCollection">The <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> instance to load.</param>
            <param name="deep">Boolean. A flag that indicates whether to recursively save all Property Collection that are descendants of this instance. If True, saves the complete object graph below this object. If False, saves this object only. </param>
            <param name="deepLoadType"><see cref="T:QuanLyHocSinhPTNK.Data.DeepLoadType"/> Enumeration to Include/Exclude object property collections from Load.
            	Use DeepLoadType.IncludeChildren, ExcludeChildren to traverse the entire object graph.
            </param>
            <param name="childTypes"><see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> Property Collection Type Array To Include or Exclude from Load</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.PhongBan)">
            <summary>
            public virtualDeep Saves the <see cref="T:QuanLyHocSinhPTNK.Entities.PhongBan"/> object with all of the child
            property collections N Levels Deep.
            </summary>
            <param name="entity">PhongBan Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.PhongBan,QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            public virtualDeep Saves the entire object graph of the PhongBan object with criteria based of the child 
            Type property array and DeepSaveType.
            </summary>
            <param name="entity">PhongBan Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes"><c>PhongBan</c> property Type Array To Include or Exclude from Save</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.PhongBan})">
            <summary>
            Deep Save the entire <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with all of the child 
            property collections.
            </summary>
            <param name="entityCollection">TList{PhongBan} Object</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.DeepSave(QuanLyHocSinhPTNK.Entities.TList{QuanLyHocSinhPTNK.Entities.PhongBan},QuanLyHocSinhPTNK.Data.DeepSaveType,System.Type[])">
            <summary>
            Deep Save the entire object graph of the <see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> object with criteria based of the child 
            property collections.
            </summary>
            <param name="entityCollection"><see cref="T:QuanLyHocSinhPTNK.Entities.TList`1"/> Object</param>
            <param name="deepSaveType">DeepSaveType Enumeration to Include/Exclude object property collections from Save.</param>
            <param name="childTypes">PhongBan Property Collection Type Array To Include or Exclude from Save</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.PhongBanServiceBase.SecurityContext">
            <summary>
             Contains all necessary information to validate and authorize the 
             call of the method with the Principal and Roles of the current user.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.DomainUtil">
            <summary>
            DomainUtil class.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DomainUtil.GetErrorsFromList``1(QuanLyHocSinhPTNK.Entities.TList{``0})">
            <summary>
            Aggregates all the errors in a collection
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DomainUtil.HandleException(System.Exception,System.String)">
            <summary>
            Wraps call to tohe <see cref="T:Microsoft.Practices.EnterpriseLibrary.ExceptionHandling.ExceptionPolicy"/> class which handles all exceptions based on the security policy.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DomainUtil.GetDefaultByType(System.Data.DbType)">
            <summary>
            Get a default value for a given data type
            </summary>
            <param name="dataType">Data type for which to get the default value</param>
            <returns>An object of the default value.</returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DomainUtil.GetDataValue(System.Data.IDataParameter)">
            <summary>
            Get Value or Default Value from an IDataParamater
            Based on DbType
            </summary>
            <param name="p">The IDataParameter instance type is used to determine the default value.</param>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DomainUtil.DefaultToDBNull(System.Object,System.Data.DbType)">
            <summary>
            Checks to see if the Default Value has been set to the parameter.
            If it's the default value, then create.
            </summary>
            <param name="val">The value we want to check.</param>
            <param name="dbtype">The DbType from wich we take the default value.</param>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DomainUtil.GetParameterValue``1(System.Data.IDataParameter)">
            <summary>
            Generic method to return the value of a nullable parameter
            </summary>
            <typeparam name="T">Type of value to return</typeparam>
            <param name="parameter">Parameter from which to extract the value</param>
            <returns></returns>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.DomainUtil.ConvertDataReaderToDataSet(System.Data.IDataReader)">
            <summary>
            Converts a IDataReader to a DataSet.  For use when a custom stored procedure returns an <see cref="T:System.Data.IDataReader"/>, it will
            convert all result sets returned as a DataSet.
            </summary>
            <param name="reader">The reader to convert</param>
            <returns>A dataset with one table per result in the reader</returns>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.LopHocService">
            <summary>
             An component type implementation of the 'LopHoc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.LopHocService.#ctor">
            <summary>
            Initializes a new instance of the LopHocService class.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.PhongBanService">
            <summary>
             An component type implementation of the 'PhongBan' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.PhongBanService.#ctor">
            <summary>
            Initializes a new instance of the PhongBanService class.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.MonHocService">
            <summary>
             An component type implementation of the 'MonHoc' table.
            </summary>
             <remarks>
             All custom implementations should be done here.
             </remarks>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.MonHocService.#ctor">
            <summary>
            Initializes a new instance of the MonHocService class.
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ServiceResult">
            <summary>
            The class provides a notification pattern for the processor execution.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceResult.HasErrors">
            <summary>
               Determines whethere the containing service, has errors.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceResult.Error">
            <summary>
               Provides a string of errors accumulated with a new line of delimeted errors.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceResult.ProcessBrokenRuleLists">
            <summary>
               Provides an aggregated group of BrokenRuleList for each of the executed processes.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceResult.ProcessorResultList">
            <summary>
               Determines whethere the containing processs results that were enlisted in the service.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ServiceResult.ExceptionList">
             <summary>
            	Provides the List of UnHandled Exceptions that occured during processing.
             </summary>
            <value>A list of rules that were broken in the process</value>		
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.SecurityContext`1">
            <summary>
            The class that is available in case role based security is required at runtime.  
            It will be made availabe through the entities themselves.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.SecurityContext`1.#ctor">
            <summary>
            Initializes a new instance of the SecurityContext class.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.SecurityContext`1.IsAuthorized(System.String)">
            <summary>
            Determine whether user is authorized for the rule based on the rule provider
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.SecurityContext`1.Identity">
            <summary>
            The Current IIdentity .
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.SecurityContext`1.Profile">
            <summary>
            The Current Profile .
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.SecurityContext`1.Principal">
            <summary>
             The Current IPrincipal .
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.SecurityContext`1.RuleProvider">
            <summary>
             The Current Authorization Rule Provider
            </summary>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.ContextView`2">
            <summary>
            Used to create a general view of the current context.  
            Useful for firing events and giving the UI a picture of 
            current State of Operation.
            </summary>
            <typeparam name="Entity">The Entity object</typeparam>
            <typeparam name="Domain">Type that holds </typeparam>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ContextView`2.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:QuanLyHocSinhPTNK.Services.ContextView`2"/> class.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ContextView`2.#ctor(`0,QuanLyHocSinhPTNK.Services.SecurityContext{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:QuanLyHocSinhPTNK.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.ContextView`2.#ctor(`0,QuanLyHocSinhPTNK.Services.SecurityContext{`0},QuanLyHocSinhPTNK.Data.TransactionManager)">
            <summary>
            Initializes a new instance of the <see cref="T:QuanLyHocSinhPTNK.Services.ContextView`2"/> class.
            </summary>
            <param name="persistingObject">The persisting object.</param>
            <param name="securityContext">The security context.</param>
            <param name="transactionManager">The transaction manager.</param>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ContextView`2.PersistingObject">
            <summary>
            Gets or sets the persisting object.
            </summary>
            <value>The persisting object.</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ContextView`2.SecurityContext">
            <summary>
            Gets or sets the security context.
            </summary>
            <value>The security context.</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.ContextView`2.TransactionManager">
            <summary>
            Gets or sets the transaction manager.
            </summary>
            <value>The transaction manager.</value>
        </member>
        <member name="T:QuanLyHocSinhPTNK.Services.GenericProcessorResult">
            <summary>
            The interface that each component business domain service of the model implements.
            </summary> 
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.GenericProcessorResult.#ctor">
            <summary>
            Initializes a new instance of the GenericProcessorResult class.
            </summary>
        </member>
        <member name="M:QuanLyHocSinhPTNK.Services.GenericProcessorResult.AddBrokenRulesList(System.Type,QuanLyHocSinhPTNK.Entities.Validation.BrokenRulesList)">
            <summary>
            Provides a method to aggregate BrokenRuleList Collections Based on their Type 
            if they are invalid.
            </summary>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.GenericProcessorResult.Result">
             <summary>
            	Provides a result of the current process.
             </summary>
            <value>A list of business rule processors to execute</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.GenericProcessorResult.BrokenRulesLists">
             <summary>
            	Provides a list of broken rules for the entire process.
             </summary>
            <value>A list of rules that were broken in the process</value>
        </member>
        <member name="P:QuanLyHocSinhPTNK.Services.GenericProcessorResult.FinalProcessorState">
            <summary>
            Provides the final processor state the operation. 
            This is set by the processor.
            </summary>
        </member>
    </members>
</doc>
