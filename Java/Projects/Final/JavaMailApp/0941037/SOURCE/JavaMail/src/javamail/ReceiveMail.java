/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * ReceiveMail.java
 *
 * Created on Oct 28, 2010, 9:57:12 PM
 */

package javamail;
import java.io.*;
import java.net.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.ButtonModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Dan
 */



public class ReceiveMail extends javax.swing.JFrame {
    public static int nMail;
    /** Creates new form ReceiveMail */
    public int newMail;

    public ReceiveMail() {
        initComponents();
        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(rdCoppy);
        buttonGroup.add(rdDelete);
      
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rdCoppy = new javax.swing.JRadioButton();
        btnTienHanh = new javax.swing.JButton();
        rdDelete = new javax.swing.JRadioButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Nhận thư");

        rdCoppy.setSelected(true);
        rdCoppy.setText("Giữ bản copy thư trên Server");
        rdCoppy.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdCoppyMouseClicked(evt);
            }
        });

        btnTienHanh.setText("Tiến hành");
        btnTienHanh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnTienHanhMouseClicked(evt);
            }
        });
        btnTienHanh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTienHanhActionPerformed(evt);
            }
        });

        rdDelete.setText("Xóa luôn thư trên Server");
        rdDelete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rdDeleteMouseClicked(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 36));
        jLabel2.setForeground(new java.awt.Color(0, 204, 51));
        jLabel2.setText("Nhận thư");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(rdCoppy)
                            .addComponent(rdDelete)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(btnTienHanh)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdCoppy)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rdDelete)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnTienHanh)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTienHanhMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnTienHanhMouseClicked
        // TODO add your handling code here:
        if (rdCoppy.isSelected())
              Receive();
        if (rdDelete.isSelected())
            ReceiveAndDelete();
        this.setVisible(false);
        new MailList().setVisible(true);
     JOptionPane.showMessageDialog(null,"Bạn đã download "+newMail+" thư !");

    }//GEN-LAST:event_btnTienHanhMouseClicked

    private void rdCoppyMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdCoppyMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_rdCoppyMouseClicked

    private void rdDeleteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rdDeleteMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_rdDeleteMouseClicked

    private void btnTienHanhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTienHanhActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnTienHanhActionPerformed

  
    /**
    * @param args the command line arguments
    */
   
  
    public void Receive()
    {
            String sentMessage = "";
            String receivedMessage = "";

            try {
            Socket s = new Socket(Login.SvAd, 110);
            InputStream is = s.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream(), "UTF8"));
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s.getOutputStream(),"UTF8"));

            String us = Login.NormalUser;
            String pw = Login.NormalPass;

            receivedMessage=br.readLine();
            
            sentMessage="user "+us+"";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();
            receivedMessage=br.readLine();

            sentMessage="";
            sentMessage="pass "+pw+"";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();
            receivedMessage=br.readLine();
       
            String []ST= receivedMessage.split(" ");
            int k = Integer.parseInt(ST[4]);
            newMail = k;
            nMail = newMail;

             String filetempOldMailServer = Login.NormalUser+"TempOldMailServer.txt";
             File f = new File(filetempOldMailServer);
             if (f.exists())
                 f.delete();
             
             String tempt = ""+k;
             if(rdDelete.isSelected())
                 tempt ="0";
             
             BufferedWriter fwt;
             fwt = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(filetempOldMailServer),"UTF-8"));
             fwt.write(tempt);
             fwt.close();

            for (int i=0;i<k;i++)
            {
                int j = i+1;
                sentMessage="";
                sentMessage="retr "+j+"";
                bw.write(sentMessage);
                bw.newLine();
                bw.flush();
                receivedMessage=br.readLine();

                BufferedWriter fw;
                fw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(Login.NormalUser+"Thu"+i+".txt"),"UTF-8"));

                while(!receivedMessage.equals("."))
                {
                    receivedMessage=br.readLine();
                    String []temp= receivedMessage.split(" ");

                    if(temp[0].equals("Date:"))
                        fw.write(receivedMessage+"\r\n");
                    if(temp[0].equals("From:"))
                        fw.write(receivedMessage+"\r\n");
                    if(temp[0].equals("To:"))
                        fw.write(receivedMessage+"\r\n");
                    if(temp[0].equals("Subject:"))
                    {
                        fw.write(receivedMessage + "\r\n");
                        receivedMessage = br.readLine();
                         while(!receivedMessage.equals("."))
                         {
                             fw.write(receivedMessage+"\r\n");
                             receivedMessage = br.readLine();
                         }
                    }
                  }

                receivedMessage ="--HetThuRoi--";
                fw.write(receivedMessage+"\r\n");
                
                fw.close();
             }

            sentMessage="Quit";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();

            br.close();
            bw.close();
            s.close();
           
           
        }
            catch (IOException e)
            {JOptionPane.showMessageDialog(new JFrame(), "Lỗi nhận thư ", "Lỗi sai thông tin Mail server", JOptionPane.ERROR_MESSAGE);
               e.printStackTrace();
               System.out.println("Lỗi sai thông tin Mail server : " + e.getMessage());
        }
                // note cho nay
                sentMessage ="quit";
    }

    public void ReceiveAndDelete()
    {
            Receive();
            String sentMessage = "";
            String receivedMessage = "";

            try {
            Socket s = new Socket(Login.SvAd, 110);
            BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream(), "UTF8"));
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s.getOutputStream(),"UTF8"));

            String us = Login.NormalUser;
            String pw = Login.NormalPass;

            receivedMessage=br.readLine();

            sentMessage="user "+us+"";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();
            receivedMessage=br.readLine();

            sentMessage="";
            sentMessage="pass "+pw+"";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();
            receivedMessage=br.readLine();

            //Delete mail tren server
            for(int i =1; i<=newMail;i++)
            {
                sentMessage="dele "+i;
                bw.write(sentMessage);
                bw.newLine();
                bw.flush();
                receivedMessage=br.readLine();
            }

            sentMessage="Quit";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();

            br.close();
            bw.close();
            s.close();
        }
            catch (IOException e)
            {JOptionPane.showMessageDialog(new JFrame(), "Chức năng bị lỗi", "Lỗi gửi mail", JOptionPane.ERROR_MESSAGE);
               e.printStackTrace();
               System.out.println("Lỗi nhận mail : " + e.getMessage());
        }
    }
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ReceiveMail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTienHanh;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JRadioButton rdCoppy;
    private javax.swing.JRadioButton rdDelete;
    // End of variables declaration//GEN-END:variables

}
