/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * DeleteMail.java
 *
 * Created on Oct 30, 2010, 6:42:23 PM
 */

package javamail;

import java.io.*;
import java.net.Socket;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ButtonGroup;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Dan
 */
public class DeleteMail extends javax.swing.JFrame {

    /** Creates new form DeleteMail */
    public int newMail = ReceiveMail.nMail;
    public DeleteMail() {
        initComponents();
        ButtonGroup buttonGroup = new ButtonGroup();
        buttonGroup.add(rdMayServer);
        buttonGroup.add(rdMay);
    }



    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel4 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbMailList = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        rdMayServer = new javax.swing.JRadioButton();
        rdMay = new javax.swing.JRadioButton();
        btnXoa = new javax.swing.JToggleButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbOldMail = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        txtSoThuSV = new javax.swing.JLabel();
        btnNapLai = new javax.swing.JToggleButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Xóa thư");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowActivated(java.awt.event.WindowEvent evt) {
                formWindowActivated(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 36));
        jLabel4.setForeground(new java.awt.Color(0, 204, 51));
        jLabel4.setText("Xóa thư ");

        tbMailList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Đến từ", "Chủ đề", "Ngày gửi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbMailList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbMailListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbMailList);
        tbMailList.getColumnModel().getColumn(0).setPreferredWidth(150);
        tbMailList.getColumnModel().getColumn(0).setMaxWidth(150);
        tbMailList.getColumnModel().getColumn(2).setPreferredWidth(120);
        tbMailList.getColumnModel().getColumn(2).setMaxWidth(120);

        jLabel1.setText("----------------Danh sách thư mới --------------");

        jLabel2.setText("  ----------- Chế độ xóa ---------------------------------------------------");

        rdMayServer.setText("Xóa thư trên máy và trên Server");

        rdMay.setSelected(true);
        rdMay.setText("Chỉ xóa thư trên máy");

        btnXoa.setText("Xóa");
        btnXoa.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnXoaMouseClicked(evt);
            }
        });
        btnXoa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnXoaActionPerformed(evt);
            }
        });

        tbOldMail.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Đến từ", "Chủ đề", "Ngày gửi"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbOldMail.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbOldMailMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tbOldMail);
        tbOldMail.getColumnModel().getColumn(0).setPreferredWidth(150);
        tbOldMail.getColumnModel().getColumn(0).setMaxWidth(150);
        tbOldMail.getColumnModel().getColumn(2).setPreferredWidth(120);
        tbOldMail.getColumnModel().getColumn(2).setMaxWidth(120);

        jLabel3.setText("--------------Danh sách thư cũ ------------");

        txtSoThuSV.setText("jLabel5");

        btnNapLai.setText("Nạp lại");
        btnNapLai.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnNapLaiMouseClicked(evt);
            }
        });
        btnNapLai.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNapLaiActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 598, Short.MAX_VALUE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(237, 237, 237)
                        .addComponent(jLabel4))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(43, 43, 43)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(rdMay)
                                .addGap(18, 18, 18)
                                .addComponent(rdMayServer)
                                .addGap(32, 32, 32)
                                .addComponent(btnXoa, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnNapLai, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(59, 59, 59)
                                .addComponent(txtSoThuSV)))))
                .addContainerGap(10, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtSoThuSV))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdMayServer)
                    .addComponent(rdMay)
                    .addComponent(btnXoa)
                    .addComponent(btnNapLai))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void ResetNewMailTable()
    {

tbMailList = new javax.swing.JTable();

tbMailList.setModel(new javax.swing.table.DefaultTableModel(
    new Object [][] {
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null}
    },
    new String [] {
        "Đến từ", "Chủ đề", "Ngày gửi"
    }
) {
    boolean[] canEdit = new boolean [] {
        false, false, false
    };

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
    }
});



tbMailList.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseClicked(java.awt.event.MouseEvent evt) {
        tbMailListMouseClicked(evt);
    }
});

jScrollPane1.setViewportView(tbMailList);

tbMailList.getColumnModel().getColumn(0).setPreferredWidth(150);
tbMailList.getColumnModel().getColumn(0).setMaxWidth(150);
tbMailList.getColumnModel().getColumn(2).setPreferredWidth(120);
tbMailList.getColumnModel().getColumn(2).setMaxWidth(120);

    }

    public void ResetOldMailTable()
    {

tbOldMail = new javax.swing.JTable();

tbOldMail.setModel(new javax.swing.table.DefaultTableModel(
    new Object [][] {
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null},
        {null, null, null}
    },
    new String [] {
        "Đến từ", "Chủ đề", "Ngày gửi"
    }
) {
    boolean[] canEdit = new boolean [] {
        false, false, false
    };

    public boolean isCellEditable(int rowIndex, int columnIndex) {
        return canEdit [columnIndex];
    }
});



tbOldMail.addMouseListener(new java.awt.event.MouseAdapter() {
    public void mouseClicked(java.awt.event.MouseEvent evt) {
        tbOldMailMouseClicked(evt);
    }
});

jScrollPane2.setViewportView(tbOldMail);

tbOldMail.getColumnModel().getColumn(0).setPreferredWidth(150);
tbOldMail.getColumnModel().getColumn(0).setMaxWidth(150);
tbOldMail.getColumnModel().getColumn(2).setPreferredWidth(120);
tbOldMail.getColumnModel().getColumn(2).setMaxWidth(120);

    }
    public void RenameMailAfterDeleting()throws FileNotFoundException, UnsupportedEncodingException, IOException
    {

        if((Login.NormalUser != null))
        {
            int dem =0 ;
            
           
            //Tao một vong lặp để rename thu lai.
            for(int i=0;i<ReceiveMail.nMail;i++)
            {
                String checkMail = Login.NormalUser+"Thu"+i+".txt";
                File f = new File(checkMail);
                if (f.exists())
                {
                    f.renameTo(new File(Login.NormalUser+"Thu"+dem+".txt"));
                    dem++;
                }
            }
        }
    
    }
    
     public void RenameOldMailAfterDeleting()throws FileNotFoundException, UnsupportedEncodingException, IOException
    {
            int oldMailNumber=0;

            BufferedReader rd;
            rd = new BufferedReader(new InputStreamReader(new FileInputStream(Login.NormalUser+"TempOldMail.txt"),"UTF-8"));
            oldMailNumber =  Integer.parseInt(rd.readLine().toString());
            rd.close();

            if((Login.NormalUser != null))
            {
                int dem =0 ;
                //Tao một vong lặp để rename thu lai.
                for(int i=0;i<oldMailNumber;i++)
                {
                    String checkMail = Login.NormalUser+"OldMail"+i+".txt";
                    File f = new File(checkMail);
                    if (f.exists())
                    {
                        f.renameTo(new File(Login.NormalUser+"OldMail"+dem+".txt"));
                        dem++;
                    }
                }

                 BufferedWriter fw;
                 fw = new BufferedWriter(new OutputStreamWriter(new FileOutputStream(Login.NormalUser+"TempOldMail.txt"),"UTF-8"));
                 String temp =""+dem;
                 fw.write(temp);
                 fw.close();
            }
    }
    public void DelMail(int i, String str)
    {
        
        String fileName = str;
        // A File object to represent the filename
        File f = new File(fileName);

        // Make sure the file or directory exists and isn't write protected
        if (!f.exists())
          System.out.print("File không tồn tại");

        if (!f.canWrite())
          System.out.print("File ko đọc được");

        // If it is a directory, make sure it is empty
        if (f.isDirectory()) {
          String[] files = f.list();
          if (files.length > 0)
            System.out.print("Không tồn tại đường dẫn");
        }

        // Attempt to delete it
        boolean success = f.delete();

        if (success)
           JOptionPane.showMessageDialog(null,"Xóa thành công !");

      
 }
      public void DelOldMail(int k, String str2)
      {
         String fileName = str2;
        // A File object to represent the filename
        File f = new File(fileName);

        // Make sure the file or directory exists and isn't write protected
        if (!f.exists())
          System.out.print("File không tồn tại");

        if (!f.canWrite())
          System.out.print("File ko đọc được");

        // If it is a directory, make sure it is empty
        if (f.isDirectory()) {
          String[] files = f.list();
          if (files.length > 0)
            System.out.print("Không tồn tại đường dẫn");
          }

        boolean success = f.delete();

        if (success)
          JOptionPane.showMessageDialog(null,"Xóa thành công !");
     }
    public void DelMailSv(int i)
    {
        //So mail tren sv bat dau bang 1
        i= i + 1;
        String sentMessage = "";
        String receivedMessage = "";

        try {
            Socket s = new Socket(Login.SvAd, 110);
         
            BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream(), "UTF8"));
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s.getOutputStream(),"UTF8"));

            String us = Login.NormalUser;
            String pw = Login.NormalPass;

            receivedMessage=br.readLine();

            sentMessage="user "+us+"";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();
            receivedMessage=br.readLine();

            sentMessage="";
            sentMessage="pass "+pw+"";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();
            receivedMessage=br.readLine();

            sentMessage="dele "+i;
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();
            receivedMessage=br.readLine();

            sentMessage="Quit";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();
            receivedMessage=br.readLine();

            br.close();
            bw.close();
            s.close();
        }
        catch (IOException e)
            {
        }
    }
      public void LoadMail() throws FileNotFoundException, UnsupportedEncodingException, IOException
    {
        int i =0;
        int k =0;

        while (i<ReceiveMail.nMail)
        {
             BufferedReader rd;
             String fileName = Login.NormalUser+"Thu"+i+".txt";

             File f = new File(fileName);
             //Kiem tra file ... neu file ton tai thi moi đọc lên
              if (f.exists())
             {

                 rd = new BufferedReader(new InputStreamReader(new FileInputStream(Login.NormalUser+"Thu"+i+".txt"),"UTF-8"));

                 for(int e =0; e<4; e++)
                 {
                     String []temp = rd.readLine().split(" ");

                     if(temp[0].equals("Date:"))
                     {
                         String str="";
                         for(int h=1;h<temp.length;h++)
                             str=str+" "+temp[h];
                         tbMailList.setValueAt(str, k, 2);
                     }

                     if(temp[0].equals("From:"))
                     {
                         String str="";
                         for(int h=1;h<temp.length;h++)
                             str=str+" "+temp[h];
                         tbMailList.setValueAt(str, k, 0);
                     }

                     if(temp[0].equals("Subject:"))
                     {
                          String str="";
                         for(int h=1;h<temp.length;h++)
                             str=str+" "+temp[h];
                         tbMailList.setValueAt(str, k, 1);
                     }
                 }

                 k++;
                 rd.close();
             }
             i++;
        }
    }
      public void LoadOldMail() throws FileNotFoundException, UnsupportedEncodingException, IOException
    {
        int i =0;
        int k =0;
        int oldMailNumber = 0;

        String filetempOldMail = Login.NormalUser+"TempOldMail.txt";
        File fi = new File(filetempOldMail);

        if(fi.exists())
        {
            BufferedReader rd;
            rd = new BufferedReader(new InputStreamReader(new FileInputStream(Login.NormalUser+"TempOldMail.txt"),"UTF-8"));
            oldMailNumber = oldMailNumber + Integer.parseInt(rd.readLine().toString());
            rd.close();
        }

        while (i<oldMailNumber)
        {
             BufferedReader rd;
             String fileName = Login.NormalUser+"OldMail"+i+".txt";

             File f = new File(fileName);
             //Kiem tra file ... neu file ton tai thi moi đọc lên
              if (f.exists())
             {

                 rd = new BufferedReader(new InputStreamReader(new FileInputStream(fileName),"UTF-8"));

                 for(int e =0; e<4; e++)
                 {
                     String []temp = rd.readLine().split(" ");

                     if(temp[0].equals("Date:"))
                     {
                         String str="";
                         for(int h=1;h<temp.length;h++)
                             str=str+" "+temp[h];
                         tbOldMail.setValueAt(str, k, 2);
                     }

                     if(temp[0].equals("From:"))
                     {
                         String str="";
                         for(int h=1;h<temp.length;h++)
                             str=str+" "+temp[h];
                         tbOldMail.setValueAt(str, k, 0);
                     }

                     if(temp[0].equals("Subject:"))
                     {
                          String str="";
                         for(int h=1;h<temp.length;h++)
                             str=str+" "+temp[h];
                         tbOldMail.setValueAt(str, k, 1);
                     }
                 }
                 k++;
                 rd.close();
             }
             i++;
        }
    }

    public int GetMailSv()
    {
            int k =0;
            String sentMessage = "";
            String receivedMessage = "";

            try {
            Socket s = new Socket(Login.SvAd, 110);
            InputStream is = s.getInputStream();
            BufferedReader br = new BufferedReader(new InputStreamReader(s.getInputStream(), "UTF8"));
            BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(s.getOutputStream(),"UTF8"));

            String us = Login.NormalUser;
            String pw = Login.NormalPass;

            receivedMessage=br.readLine();

            sentMessage="user "+us+"";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();
            receivedMessage=br.readLine();

            sentMessage="";
            sentMessage="pass "+pw+"";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();
            receivedMessage=br.readLine();

            String []ST= receivedMessage.split(" ");
            k = Integer.parseInt(ST[4]);

            sentMessage="Quit";
            bw.write(sentMessage);
            bw.newLine();
            bw.flush();

            br.close();
            bw.close();
            s.close();

           
        }
            catch (IOException e)
            {JOptionPane.showMessageDialog(new JFrame(), "Lỗi nhận thư ", "Lỗi sai thông tin Mail server", JOptionPane.ERROR_MESSAGE);
               e.printStackTrace();
               System.out.println("Lỗi sai thông tin Mail server : " + e.getMessage());
        }
                // note cho nay
             return k;
    }
    private void tbMailListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbMailListMouseClicked
        // TODO add your handling code here:

}//GEN-LAST:event_tbMailListMouseClicked

    private void formWindowActivated(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowActivated
        
        int MailSV = GetMailSv();
        txtSoThuSV.setText("Số thư trên Server : "+MailSV);

        try {
            // TODO add your handling code here:
            LoadMail();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            RenameOldMailAfterDeleting();
            LoadOldMail();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_formWindowActivated

    private void btnXoaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnXoaMouseClicked
        // TODO add your handling code here
        int i = tbMailList.getSelectedRow();
        int k = tbOldMail.getSelectedRow();
        if(rdMay.isSelected())
        {
            
            String str = Login.NormalUser+"Thu"+i+".txt";
            String str2 = Login.NormalUser+"OldMail"+k+".txt";
            DelMail(i,str);

            try {
                RenameMailAfterDeleting();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
            }

            DelOldMail(k,str2);
            try {
                RenameOldMailAfterDeleting();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
            } catch (UnsupportedEncodingException ex) {
                Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if(rdMayServer.isSelected())
        {
            String str = Login.NormalUser+"Thu"+i+".txt";
            DelMail(i,str);
            DelMailSv(i);
            
        }
        //Reset lai 2 table Mail

        ResetNewMailTable();
        ResetOldMailTable();

        //Load lai 2 table Mail
         try {
            // TODO add your handling code here:
            LoadMail();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            LoadOldMail();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(DeleteMail.class.getName()).log(Level.SEVERE, null, ex);
        }

        int MailSV = GetMailSv();
        txtSoThuSV.setText("Số thư trên Server : "+MailSV);
    }//GEN-LAST:event_btnXoaMouseClicked

    private void tbOldMailMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbOldMailMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tbOldMailMouseClicked

    private void btnXoaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnXoaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnXoaActionPerformed

    private void btnNapLaiMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnNapLaiMouseClicked
        // TODO add your handling code here:
        this.setVisible(false);
       DeleteMail dm = new DeleteMail ();
       dm.setVisible(true);
    }//GEN-LAST:event_btnNapLaiMouseClicked

    private void btnNapLaiActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNapLaiActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnNapLaiActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DeleteMail().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnNapLai;
    private javax.swing.JToggleButton btnXoa;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rdMay;
    private javax.swing.JRadioButton rdMayServer;
    private javax.swing.JTable tbMailList;
    private javax.swing.JTable tbOldMail;
    private javax.swing.JLabel txtSoThuSV;
    // End of variables declaration//GEN-END:variables

}
