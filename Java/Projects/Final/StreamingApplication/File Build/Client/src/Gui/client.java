/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * client.java
 *
 * Created on Nov 16, 2010, 12:03:10 PM
 */

package Gui;



import java.io.*;
import javax.sound.sampled.*;
import java.awt.BorderLayout;




import java.io.ByteArrayOutputStream;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import sun.io.Converters;

/**
 *
 * @author Asus
 */
public class client extends javax.swing.JFrame {

    /** Creates new form client */
    MainThread MT;
    boolean running=false;
    public client() throws IOException, InterruptedException, ClassNotFoundException {
        initComponents();
      
        this.pack();
        this.setResizable(false);
        this.btn_distconnet.setEnabled(false);
        setVisible(true);
        
       

    }
    ///get ip server from text file
    public String GetAdd()
    {
        return txtAddres.getText();
    }
     public String getname()
    {
        return txtName.getText();
    }
 protected static ImageIcon createImageIcon(String path) {
        java.net.URL imgURL = client.class.getResource(path);
        if (imgURL != null) {
            return new ImageIcon(imgURL);
        } else {
            System.err.println("Couldn't find file: " + path);
            return null;
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        btn_connect = new javax.swing.JButton();
        txtAddres = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        btn_distconnet = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        picture = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btn_connect.setFont(new java.awt.Font("Tahoma", 1, 11));
        btn_connect.setText("Connect");
        btn_connect.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_connectMouseClicked(evt);
            }
        });
        jPanel1.add(btn_connect, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 100, -1));

        txtAddres.setText("localhost");
        txtAddres.setToolTipText("Nhập vào địa chỉ ip của server");
        jPanel1.add(txtAddres, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 40, 177, -1));

        jButton2.setFont(new java.awt.Font("Tahoma", 1, 11));
        jButton2.setText("Exit");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 20, 73, 30));

        btn_distconnet.setFont(new java.awt.Font("Tahoma", 1, 11));
        btn_distconnet.setText("Disconnect");
        btn_distconnet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btn_distconnetMouseClicked(evt);
            }
        });
        jPanel1.add(btn_distconnet, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 40, 100, -1));

        txtName.setText("nickname");
        txtName.setToolTipText("Nhập vào nickname kết nối");
        jPanel1.add(txtName, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 10, 177, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 320, 380, 100));
        getContentPane().add(picture, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 400, 340));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        // TODO add your handling code here:
        if(running){
         try {
            // TODO add your handling code here:
            Socket sock = new Socket(txtAddres.getText(), 333);
            OutputStream os = sock.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(MT.id);
        } catch (UnknownHostException ex) {
            Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            JOptionPane p=new JOptionPane();
        p.showMessageDialog(new JFrame(),"Connection fail !");
        }
        }
        System.exit(0);
    }//GEN-LAST:event_jButton2MouseClicked

    private void btn_connectMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_connectMouseClicked
        
            // TODO add your handling code here:
           // this.setLayout(new BorderLayout());
         //   picture.setLayout(new BorderLayout());
           
        //  new recive(this, "abc");
        //  new reciveaudio(this,"eee");
          MT    =  new MainThread(this, "MainThread");
          running=true;
         // this.btn_connect.setEnabled(false);
          this.btn_distconnet.setEnabled(true);
    }//GEN-LAST:event_btn_connectMouseClicked

    private void btn_distconnetMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btn_distconnetMouseClicked
        try {
            // TODO add your handling code here:
            Socket sock = new Socket(txtAddres.getText(), 333);
            OutputStream os = sock.getOutputStream();
            ObjectOutputStream oos = new ObjectOutputStream(os);
            oos.writeObject(MT.id);
            this.btn_connect.setEnabled(true);
              this.btn_distconnet.setEnabled(false);
       // if(MT.RIO.cont!=null)
            MT.RIO.cont=false;
        } catch (UnknownHostException ex) {
            Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            //JOptionPane p=new JOptionPane();
//p.showMessageDialog(new JFrame(),"Connection fail !");
            System.err.print("not server sharing");
        }
        
    }//GEN-LAST:event_btn_distconnetMouseClicked
public void setIconPic(ImageIcon im){
    picture.setIcon(im);
}
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) throws IOException, InterruptedException, ClassNotFoundException {
       new client();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_connect;
    private javax.swing.JButton btn_distconnet;
    private javax.swing.JButton jButton2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel picture;
    private javax.swing.JTextField txtAddres;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

}
///Main thread Dieu phoi ket noi
 class MainThread implements Runnable{
    client JF;
    String name;
    Thread t;
    String id;
    reciveaudio RIO;
    MainThread(client Fr,String threadname){
        JF=Fr;
        name = threadname;

		t = new Thread(this, name);
		//System.out.println("New thread: " + t);
		t.start();
    }
    public void run()
     {

                try {


                     Socket sock = new Socket(JF.GetAdd(), 222);//ket vao server
                     OutputStream os = sock.getOutputStream();
                    ObjectOutputStream oos = new ObjectOutputStream(os);
                    oos.writeObject(JF.getname());//gui cho server ten cua ket noi.Day la ten do nguoi dung chon
                    ObjectInputStream ois = new ObjectInputStream(sock.getInputStream());
                    Integer port = (Integer)ois.readObject();
                    int ii=(Integer)ois.readObject();
                   id=Integer.toString(ii);//lay ve ID ma server cap
                    System.out.print(id);
               RIO =   new reciveaudio(JF, name, port);//khoi dong thread nhan audio va phat ra
                  new recive(JF, name, port+1);//khoi dong thread nhanh video va phat ra
                 


                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    System.err.print("not server sharing");
                }

    }


    ////////play video


    ////get format

}

////////////////////////////////////////////////////////////////////////////////

 class recive implements Runnable{//thread nhan video va phat no ra
    client JF;
    String name;
    Thread t;
    int port;
    boolean cont=true;
    recive(client Fr,String threadname,int port){
        JF=Fr;
        name = threadname;

		t = new Thread(this, name);
		//System.out.println("New thread: " + t);
               this.port=port;
		t.start();
    }
    public void run()
     {
           while (cont) {
                try {
         
                  // loadvideoin1s LVD=new loadvideoin1s(JF);
                     Socket sock = new Socket(JF.GetAdd(), port);
                    while(true){

                    ObjectInputStream ois = new ObjectInputStream(sock.getInputStream());
                     
                    ImageIcon icon = (ImageIcon)ois.readObject();
                  
                  //  JF.setSize(icon.getIconWidth(),icon.getIconHeight());
                     JF.setIconPic(icon);//hinh duoc nhan ve va phat lien tuc 24 hinh/s thanh mot doan video
                    
                     Thread.currentThread().sleep(80);
                  
                    }
                } catch (InterruptedException ex) {
                Logger.getLogger(recive.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                    System.err.print("not server video sharing");
                    cont=false;
                }
            }
    }


    
    
}

 class reciveaudio implements Runnable{
    client JF;
    String name;
    Thread t;
    int port;
    boolean cont=true;
    reciveaudio(client Fr,String threadname,int port){
        JF=Fr;
        name = threadname;

		t = new Thread(this, name);
		//System.out.println("New thread: " + t);
                this.port=port;
		t.start();
    }
    public void run()
     {
           while (cont) {
                try {
                   

                   
                     Socket sock = new Socket(JF.GetAdd(), port);
                    ObjectInputStream ois = new ObjectInputStream(sock.getInputStream());
                 

                    byte out[]=(byte[])ois.readObject();//audio duoc nhan ve va phat ra lien tuc
                 
                    if(out.length!=0)
                   playAudio(out);
              Thread.currentThread().sleep(40);
                
                 
                } catch (InterruptedException ex) {
                Logger.getLogger(reciveaudio.class.getName()).log(Level.SEVERE, null, ex);
            } catch (ClassNotFoundException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnknownHostException ex) {
                    Logger.getLogger(client.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IOException ex) {
                   // JOptionPane p=new JOptionPane();
        //p.showMessageDialog(new JFrame(),"Not Server audio Sharing");
                    System.err.print("not audio server sharing");
                    cont=false;
                }
            }
    }


    ////////play video
    private void playAudio(byte[] out) {//ham play audio dau vao la mang byte
    try {
      byte audio[] = out;
      InputStream input =
        new ByteArrayInputStream(audio);
      final AudioFormat format = getFormat();
      final AudioInputStream ais =
        new AudioInputStream(input, format,
        audio.length / format.getFrameSize());
      DataLine.Info info = new DataLine.Info(
        SourceDataLine.class, format);
      final SourceDataLine line = (SourceDataLine)
        AudioSystem.getLine(info);
      line.open(format);
      line.start();

      Runnable runner = new Runnable() {
        int bufferSize = (int) format.getSampleRate()
          * format.getFrameSize();
        byte buffer[] = new byte[bufferSize];

        public void run() {
          try {
            int count;
            while ((count = ais.read(
                buffer, 0, buffer.length)) != -1) {
              if (count > 0) {
                  System.out.print("  in   ");
                line.write(buffer, 0, count);
              }
            }
            line.drain();
            line.close();
          } catch (IOException e) {
            System.err.println("I/O problems: " + e);
            System.exit(-3);
          }
        }
      };
      Thread playThread = new Thread(runner);
      playThread.start();
    } catch (LineUnavailableException e) {
      System.err.println("Line unavailable: " + e);
      System.exit(-4);
    }
  }

    ////get format
    private AudioFormat getFormat() {//get audio format
    float sampleRate = 8000;
    int sampleSizeInBits = 8;
    int channels = 1;
    boolean signed = true;
    boolean bigEndian = true;
    return new AudioFormat(sampleRate,
      sampleSizeInBits, channels, signed, bigEndian);
  }
}
